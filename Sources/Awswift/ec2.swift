import Foundation
import Signer
struct Ec2 {
  struct Client {
    let region: String
    let credentialsProvider: AwsCredentialsProvider
    let session: URLSession
    let queue: DispatchQueue

    init(region: String) {
      self.region = region
      self.credentialsProvider = DefaultChainProvider()
      self.session = URLSession(configuration: URLSessionConfiguration.default)
      self.queue = DispatchQueue(label: "awswift.Ec2.Client.queue")
    }

    func scope() -> AwsCredentialsScope {
      return AwsCredentialsScope(url: URL(string: "https://")!)!
    }

/**
<p>Describes Dedicated Host Reservations which are associated with Dedicated Hosts in your account.</p>
 */
func describeHostReservations(input: DescribeHostReservationsRequest) -> ApiCallTask<DescribeHostReservationsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the specified attribute of the specified volume. You can specify only one attribute at a time.</p> <p>For more information about EBS volumes, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeVolumeAttribute(input: DescribeVolumeAttributeRequest) -> ApiCallTask<DescribeVolumeAttributeResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, AWS will place instances that you launch with a tenancy of <code>host</code>, but without targeting a specific host ID, onto any available Dedicated Host in your account which has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID if you want the instance to launch onto a specific host. If no host ID is provided, the instance will be launched onto a suitable host which has auto-placement enabled.</p>
 */
func modifyHosts(input: ModifyHostsRequest) -> ApiCallTask<ModifyHostsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information about network ACLs, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func replaceNetworkAclAssociation(input: ReplaceNetworkAclAssociationRequest) -> ApiCallTask<ReplaceNetworkAclAssociationResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a VPC endpoint.</p>
 */
func describePrefixLists(input: DescribePrefixListsRequest) -> ApiCallTask<DescribePrefixListsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. </p> <p>The following resource types support longer IDs: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>This setting applies to the principal specified in the request; it does not apply to the principal that makes the request. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
 */
func modifyIdentityIdFormat(input: ModifyIdentityIdFormatRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Detaches an Internet gateway from a VPC, disabling connectivity between the Internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses.</p>
 */
func detachInternetGateway(input: DetachInternetGatewayRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a route in a route table within a VPC.</p> <p>You must specify one of the following targets: Internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, or network interface.</p> <p>When determining how to route traffic, we use the route with the most specific match. For example, let's say the traffic is destined for <code>192.0.2.3</code>, and the route table includes the following two routes:</p> <ul> <li> <p> <code>192.0.2.0/24</code> (goes to some target A)</p> </li> <li> <p> <code>192.0.2.0/28</code> (goes to some target B)</p> </li> </ul> <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.</p> <p>For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createRoute(input: CreateRouteRequest) -> ApiCallTask<CreateRouteResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your VPC endpoints.</p>
 */
func describeVpcEndpoints(input: DescribeVpcEndpointsRequest) -> ApiCallTask<DescribeVpcEndpointsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the peer VPC can delete the VPC peering connection if it's in the <code>active</code> state. The owner of the requester VPC can delete a VPC peering connection in the <code>pending-acceptance</code> state. </p>
 */
func deleteVpcPeeringConnection(input: DeleteVpcPeeringConnectionRequest) -> ApiCallTask<DeleteVpcPeeringConnectionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.</p> <p>The <code>DescribeVolumeStatus</code> operation provides the following information about the specified volumes:</p> <p> <i>Status</i>: Reflects the current status of the volume. The possible values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or <code>insufficient-data</code>. If all checks pass, the overall status of the volume is <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the status is <code>insufficient-data</code>, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information on volume status, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitoring the Status of Your Volumes</a>.</p> <p> <i>Events</i>: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an <code>impaired</code> status, then the volume event might be <code>potential-data-inconsistency</code>. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.</p> <p> <i>Actions</i>: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is <code>impaired</code> and the volume event shows <code>potential-data-inconsistency</code>, then the action shows <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for the volume by calling the <a>EnableVolumeIO</a> action and then check the volume for data consistency.</p> <note> <p>Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the <code>error</code> state (for example, when a volume is incapable of accepting I/O.)</p> </note>
 */
func describeVolumeStatus(input: DescribeVolumeStatusRequest) -> ApiCallTask<DescribeVolumeStatusResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your virtual private gateways.</p> <p>For more information about virtual private gateways, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding an IPsec Hardware VPN to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeVpnGateways(input: DescribeVpnGatewaysRequest) -> ApiCallTask<DescribeVpnGatewaysResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
 */
func deleteNetworkInterface(input: DeleteNetworkInterfaceRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the specified attribute of the specified VPC.</p>
 */
func modifyVpcAttribute(input: ModifyVpcAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.</p>
 */
func cancelExportTask(input: CancelExportTaskRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels one or more Spot instance requests. Spot instances are instances that Amazon EC2 starts on your behalf when the bid price that you specify exceeds the current Spot price. Amazon EC2 periodically sets the Spot price based on available Spot instance capacity and current Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <important> <p>Canceling a Spot instance request does not terminate running Spot instances associated with the request.</p> </important>
 */
func cancelSpotInstanceRequests(input: CancelSpotInstanceRequestsRequest) -> ApiCallTask<CancelSpotInstanceRequestsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your security groups.</p> <p>A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeSecurityGroups(input: DescribeSecurityGroupsRequest) -> ApiCallTask<DescribeSecurityGroupsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. </p>
 */
func moveAddressToVpc(input: MoveAddressToVpcRequest) -> ApiCallTask<MoveAddressToVpcResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#8 private key. If a key with the specified name already exists, Amazon EC2 returns an error.</p> <p>You can have up to five thousand key pairs per region.</p> <p>The key pair returned to you is available only in the region in which you create it. To create a key pair that is available in all regions, use <a>ImportKeyPair</a>.</p> <p>For more information about key pairs, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createKeyPair(input: CreateKeyPairRequest) -> ApiCallTask<KeyPair> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with <a>CreateKeyPair</a>, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.</p> <p>For more information about key pairs, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func importKeyPair(input: ImportKeyPairRequest) -> ApiCallTask<ImportKeyPairResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Releases the specified Elastic IP address.</p> <p>After releasing an Elastic IP address, it is released to the IP address pool and might be unavailable to you. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an <code>AuthFailure</code> error if the address is already allocated to another AWS account.</p> <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use <a>DisassociateAddress</a>.</p> <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address before you try to release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p>
 */
func releaseAddress(input: ReleaseAddressRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the running instances for the specified Spot fleet.</p>
 */
func describeSpotFleetInstances(input: DescribeSpotFleetInstancesRequest) -> ApiCallTask<DescribeSpotFleetInstancesResponse> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.</p>
 */
func deleteVpc(input: DeleteVpcRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Retrieves the encrypted administrator password for an instance running Windows.</p> <p>The Windows password is generated at boot if the <code>EC2Config</code> service plugin, <code>Ec2SetPassword</code>, is enabled. This usually only happens the first time an AMI is launched, and then <code>Ec2SetPassword</code> is automatically disabled. The password is not generated for rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p> <p>The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.</p> <p>Password generation and encryption takes a few moments. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.</p>
 */
func getPasswordData(input: GetPasswordDataRequest) -> ApiCallTask<GetPasswordDataResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of the EBS snapshots available to you. Available snapshots include public snapshots available for any AWS account to launch, private snapshots that you own, and private snapshots owned by another AWS account but for which you've been given explicit create volume permissions.</p> <p>The create volume permissions fall into the following categories:</p> <ul> <li> <p> <i>public</i>: The owner of the snapshot granted create volume permissions for the snapshot to the <code>all</code> group. All AWS accounts have create volume permissions for these snapshots.</p> </li> <li> <p> <i>explicit</i>: The owner of the snapshot granted create volume permissions to a specific AWS account.</p> </li> <li> <p> <i>implicit</i>: An AWS account has implicit create volume permissions for all snapshots it owns.</p> </li> </ul> <p>The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.</p> <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.</p> <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, <code>amazon</code> for snapshots owned by Amazon, or <code>self</code> for snapshots that you own.</p> <p>If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), <code>self</code> for snapshots for which you own or have explicit permissions, or <code>all</code> for public snapshots.</p> <p>If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining results.</p> <p>For more information about EBS snapshots, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeSnapshots(input: DescribeSnapshotsRequest) -> ApiCallTask<DescribeSnapshotsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Attaches an Internet gateway to a VPC, enabling connectivity between the Internet and the VPC. For more information about your VPC and Internet gateway, see the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/">Amazon Virtual Private Cloud User Guide</a>.</p>
 */
func attachInternetGateway(input: AttachInternetGatewayRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.</p>
 */
func enableVgwRoutePropagation(input: EnableVgwRoutePropagationRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Requests a reboot of one or more instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting Console Output and Rebooting Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func rebootInstances(input: RebootInstancesRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies attributes of a specified VPC endpoint. You can modify the policy associated with the endpoint, and you can add and remove route tables associated with the endpoint.</p>
 */
func modifyVpcEndpoint(input: ModifyVpcEndpointRequest) -> ApiCallTask<ModifyVpcEndpointResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.</p>
 */
func describeMovingAddresses(input: DescribeMovingAddressesRequest) -> ApiCallTask<DescribeMovingAddressesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p> <p>You must wait for the attachment's state to switch to <code>detached</code> before you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
 */
func detachVpnGateway(input: DetachVpnGatewayRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified route from the specified route table.</p>
 */
func deleteRoute(input: DeleteRouteRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
 */
func deleteDhcpOptions(input: DeleteDhcpOptionsRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your subnets.</p> <p>For more information about subnets, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeSubnets(input: DescribeSubnetsRequest) -> ApiCallTask<DescribeSubnetsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a placement group that you launch cluster instances into. You must give the group a name that's unique within the scope of your account.</p> <p>For more information about placement groups and cluster instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html">Cluster Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createPlacementGroup(input: CreatePlacementGroupRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Replaces an entry (rule) in a network ACL. For more information about network ACLs, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func replaceNetworkAclEntry(input: ReplaceNetworkAclEntryRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time.</p> <note> <p>AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.</p> </note> <note> <p>The SriovNetSupport enhanced networking attribute cannot be changed using this command. Instead, enable SriovNetSupport on an instance and create an AMI from the instance. This will result in an image with SriovNetSupport enabled.</p> </note>
 */
func modifyImageAttribute(input: ModifyImageAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.</p> <p>If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createImage(input: CreateImageRequest) -> ApiCallTask<CreateImageResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>[EC2-VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.</p>
 */
func describeStaleSecurityGroups(input: DescribeStaleSecurityGroupsRequest) -> ApiCallTask<DescribeStaleSecurityGroupsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.</p> <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not result in the offering being purchased.</p>
 */
func getHostReservationPurchasePreview(input: GetHostReservationPurchasePreviewRequest) -> ApiCallTask<GetHostReservationPurchasePreviewResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Replaces an existing route within a route table in a VPC. You must provide only one of the following: Internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, or network interface.</p> <p>For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func replaceRoute(input: ReplaceRouteRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Unassigns one or more secondary private IP addresses from a network interface.</p>
 */
func unassignPrivateIpAddresses(input: UnassignPrivateIpAddressesRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state (not attached to an instance).</p> <note> <p>The volume may remain in the <code>deleting</code> state for several minutes.</p> </note> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Deleting an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func deleteVolume(input: DeleteVolumeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Set the instance affinity value for a specific stopped instance and modify the instance tenancy setting.</p> <p>Instance affinity is disabled by default. When instance affinity is <code>host</code> and it is not associated with a specific Dedicated Host, the next time it is launched it will automatically be associated with the host it lands on. This relationship will persist if the instance is stopped/started, or rebooted.</p> <p>You can modify the host ID associated with a stopped instance. If a stopped instance has a new host ID association, the instance will target that host when restarted.</p> <p>You can modify the tenancy of a stopped instance with a tenancy of <code>host</code> or <code>dedicated</code>.</p> <p>Affinity, hostID, and tenancy are not required parameters, but at least one of them must be specified in the request. Affinity and tenancy can be modified in the same request, but tenancy can only be modified on instances that are stopped.</p>
 */
func modifyInstancePlacement(input: ModifyInstancePlacementRequest) -> ApiCallTask<ModifyInstancePlacementResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Removes one or more ingress rules from a security group. The values that you specify in the revoke request (for example, ports) must match the existing rule's values for the rule to be removed.</p> <p>Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
 */
func revokeSecurityGroupIngress(input: RevokeSecurityGroupIngressRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Disables monitoring for a running instance. For more information about monitoring instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func unmonitorInstances(input: UnmonitorInstancesRequest) -> ApiCallTask<UnmonitorInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
 */
func describeVpcAttribute(input: DescribeVpcAttributeRequest) -> ApiCallTask<DescribeVpcAttributeResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your DHCP options sets.</p> <p>For more information about DHCP options sets, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeDhcpOptions(input: DescribeDhcpOptionsRequest) -> ApiCallTask<DescribeDhcpOptionsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p> <p>For more information about VPN connections, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createVpnConnectionRoute(input: CreateVpnConnectionRouteRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Adds one or more ingress rules to a security group.</p> <important> <p>EC2-Classic: You can have up to 100 rules per group.</p> <p>EC2-VPC: You can have up to 50 rules per group (covering both ingress and egress rules).</p> </important> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p> <p>[EC2-Classic] This action gives one or more CIDR IP address ranges permission to access a security group in your account, or gives one or more security groups (called the <i>source groups</i>) permission to access a security group for your account. A source group can be for your own AWS account, or another.</p> <p>[EC2-VPC] This action gives one or more CIDR IP address ranges permission to access a security group in your VPC, or gives one or more other security groups (called the <i>source groups</i>) permission to access a security group for your VPC. The security groups must all be for the same VPC.</p>
 */
func authorizeSecurityGroupIngress(input: AuthorizeSecurityGroupIngressRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your conversion tasks. For more information, see the <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
 */
func describeConversionTasks(input: DescribeConversionTasksRequest) -> ApiCallTask<DescribeConversionTasksResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p> <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p> <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p> <p>For more information about network ACLs, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createNetworkAclEntry(input: CreateNetworkAclEntryRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
 */
func deleteNetworkAclEntry(input: DeleteNetworkAclEntryRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your network interfaces.</p>
 */
func describeNetworkInterfaces(input: DescribeNetworkInterfacesRequest) -> ApiCallTask<DescribeNetworkInterfacesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
 */
func describeImportImageTasks(input: DescribeImportImageTasksRequest) -> ApiCallTask<DescribeImportImageTasksResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your key pairs.</p> <p>For more information about key pairs, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeKeyPairs(input: DescribeKeyPairsRequest) -> ApiCallTask<DescribeKeyPairsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Launches the specified number of instances using an AMI for which you have permissions.</p> <p>When you launch an instance, it enters the <code>pending</code> state. After the instance is ready for you, it enters the <code>running</code> state. To check the state of your instance, call <a>DescribeInstances</a>.</p> <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> <p>To tag your instance, ensure that it is <code>running</code> as <a>CreateTags</a> requires a resource ID. For more information about tagging, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a>.</p> <p>If you don't specify a security group when launching an instance, Amazon EC2 uses the default security group. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-VPC only accounts] If you don't specify a subnet in the request, we choose a default subnet from your default VPC for you.</p> <p>[EC2-Classic accounts] If you're launching into EC2-Classic and you don't specify an Availability Zone, we choose one for you.</p> <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can provide optional user data when launching an instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If any of the AMIs have a product code attached for which the user has not subscribed, <code>RunInstances</code> fails.</p> <p>Some instance types can only be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID in the request, <code>RunInstances</code> fails. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance Types Available Only in a VPC</a>.</p> <p>For more information about troubleshooting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What To Do If An Instance Immediately Terminates</a>, and <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting Connecting to Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func runInstances(input: RunInstancesRequest) -> ApiCallTask<Reservation> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
 */
func describeReservedInstancesModifications(input: DescribeReservedInstancesModificationsRequest) -> ApiCallTask<DescribeReservedInstancesModificationsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates an import volume task using metadata from the specified disk image.For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html">Importing Disks to Amazon EBS</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
 */
func importVolume(input: ImportVolumeRequest) -> ApiCallTask<ImportVolumeResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the <a>DescribeReservedInstancesListings</a> operation.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createReservedInstancesListing(input: CreateReservedInstancesListingRequest) -> ApiCallTask<CreateReservedInstancesListingResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> <ul> <li> <p> <code>domain-name-servers</code> - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. If you want your instance to receive a custom DNS hostname as specified in <code>domain-name</code>, you must set <code>domain-name-servers</code> to a custom DNS server.</p> </li> <li> <p> <code>domain-name</code> - If you're using AmazonProvidedDNS in "us-east-1", specify "ec2.internal". If you're using AmazonProvidedDNS in another region, specify "region.compute.internal" (for example, "ap-northeast-1.compute.internal"). Otherwise, specify a domain name (for example, "MyCompany.com"). This value is used to complete unqualified DNS hostnames. <b>Important</b>: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.</p> </li> <li> <p> <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP) servers.</p> </li> <li> <p> <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name servers.</p> </li> <li> <p> <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> </li> </ul> <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an Internet gateway, make sure to set the <code>domain-name-servers</code> option either to <code>AmazonProvidedDNS</code> or to a domain name server of your choice. For more information about DHCP options, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createDhcpOptions(input: CreateDhcpOptionsRequest) -> ApiCallTask<CreateDhcpOptionsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a subnet in an existing VPC.</p> <p>When you create each subnet, you provide the VPC ID and the CIDR block you want for the subnet. After you create a subnet, you can't change its CIDR block. The subnet's CIDR block can be the same as the VPC's CIDR block (assuming you want only a single subnet in the VPC), or a subset of the VPC's CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest subnet (and VPC) you can create uses a /28 netmask (16 IP addresses), and the largest uses a /16 netmask (65,536 IP addresses).</p> <important> <p>AWS reserves both the first four and the last IP address in each subnet's CIDR block. They're not available for use.</p> </important> <p>If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle.</p> <p>If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available.</p> <p>For more information about subnets, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createSubnet(input: CreateSubnetRequest) -> ApiCallTask<CreateSubnetResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Acquires an Elastic IP address.</p> <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func allocateAddress(input: AllocateAddressRequest) -> ApiCallTask<AllocateAddressResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Adds or overwrites one or more tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> <p>For more information about tags, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createTags(input: CreateTagsRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>[EC2-VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.</p>
 */
func describeSecurityGroupReferences(input: DescribeSecurityGroupReferencesRequest) -> ApiCallTask<DescribeSecurityGroupReferencesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information about ClassicLink, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the Amazon Elastic Compute Cloud User Guide.</p>
 */
func describeVpcClassicLinkDnsSupport(input: DescribeVpcClassicLinkDnsSupportRequest) -> ApiCallTask<DescribeVpcClassicLinkDnsSupportResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the ID format settings for your resources on a per-region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p> <p>The following resource types support longer IDs: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code>. </p> <p>These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
 */
func describeIdFormat(input: DescribeIdFormatRequest) -> ApiCallTask<DescribeIdFormatResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the data feed for Spot instances. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeSpotDatafeedSubscription(input: DescribeSpotDatafeedSubscriptionRequest) -> ApiCallTask<DescribeSpotDatafeedSubscriptionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies a volume attribute.</p> <p>By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.</p> <p>You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.</p>
 */
func modifyVolumeAttribute(input: ModifyVolumeAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes a security group.</p> <p>If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with <code>InvalidGroup.InUse</code> in EC2-Classic or <code>DependencyViolation</code> in EC2-VPC.</p>
 */
func deleteSecurityGroup(input: DeleteSecurityGroupRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the data feed for Spot instances.</p>
 */
func deleteSpotDatafeedSubscription(input: DeleteSpotDatafeedSubscriptionRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a NAT gateway in the specified subnet. A NAT gateway can be used to enable instances in a private subnet to connect to the Internet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">NAT Gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createNatGateway(input: CreateNatGatewayRequest) -> ApiCallTask<CreateNatGatewayResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Starts an Amazon EBS-backed AMI that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for hourly instance usage. However, your root partition Amazon EBS volume remains, continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Each time you transition an instance from stopped to started, Amazon EC2 charges a full instance hour, even if transitions happen multiple times within a single hour.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func startInstances(input: StartInstancesRequest) -> ApiCallTask<StartInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your VPN connections.</p> <p>For more information about VPN connections, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeVpnConnections(input: DescribeVpnConnectionsRequest) -> ApiCallTask<DescribeVpnConnectionsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same region or from one region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). The snapshot is copied to the regional endpoint that you send the HTTP request to.</p> <p>Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless the <code>Encrypted</code> flag is specified during the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a non-default CMK with the <code>KmsKeyId</code> parameter. </p> <note> <p>To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.</p> </note> <note> <p>Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.</p> </note> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copying an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func copySnapshot(input: CopySnapshotRequest) -> ApiCallTask<CopySnapshotResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a Spot instance request. Spot instances are instances that Amazon EC2 launches when the bid price that you specify exceeds the current Spot price. Amazon EC2 periodically sets the Spot price based on available Spot Instance capacity and current Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func requestSpotInstances(input: RequestSpotInstancesRequest) -> ApiCallTask<RequestSpotInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table from the subnet later. A route table can be associated with multiple subnets.</p> <p>For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func associateRouteTable(input: AssociateRouteTableRequest) -> ApiCallTask<AssociateRouteTableResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes one or more flow logs.</p>
 */
func deleteFlowLogs(input: DeleteFlowLogsRequest) -> ApiCallTask<DeleteFlowLogsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the ID format for the specified resource on a per-region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created. The following resource types support longer IDs: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code>.</p> <p>This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
 */
func modifyIdFormat(input: ModifyIdFormatRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Submits feedback about the status of an instance. The instance must be in the <code>running</code> state. If your experience with the instance differs from the instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.</p> <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
 */
func reportInstanceStatus(input: ReportInstanceStatusRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.</p>
 */
func deleteNatGateway(input: DeleteNatGatewayRequest) -> ApiCallTask<DeleteNatGatewayResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information about ClassicLink, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the Amazon Elastic Compute Cloud User Guide.</p>
 */
func disableVpcClassicLinkDnsSupport(input: DisableVpcClassicLinkDnsSupportRequest) -> ApiCallTask<DisableVpcClassicLinkDnsSupportResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
 */
func resetNetworkInterfaceAttribute(input: ResetNetworkInterfaceAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC. Use the <code>DescribeVpcPeeringConnections</code> request to view your outstanding VPC peering connection requests.</p>
 */
func acceptVpcPeeringConnection(input: AcceptVpcPeeringConnectionRequest) -> ApiCallTask<AcceptVpcPeeringConnectionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>The following resource types support longer IDs: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code>. </p> <p>These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.</p>
 */
func describeIdentityIdFormat(input: DescribeIdentityIdFormatRequest) -> ApiCallTask<DescribeIdentityIdFormatResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Returns details about the values and term of your specified Convertible Reserved Instances. When an offering ID is specified it returns information about whether the exchange is valid and can be performed.</p>
 */
func getReservedInstancesExchangeQuote(input: GetReservedInstancesExchangeQuoteRequest) -> ApiCallTask<GetReservedInstancesExchangeQuoteResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Associates an Elastic IP address with an instance or a network interface.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance.</p> <p>[VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation.</p> <important> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the <i>Elastic IP Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.</p> </important>
 */
func associateAddress(input: AssociateAddressRequest) -> ApiCallTask<AssociateAddressResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Gets the console output for the specified instance.</p> <p>Instances do not have a physical monitor through which you can view their console output. They also lack physical controls that allow you to power up, reboot, or shut them down. To allow these actions, we provide them through the Amazon EC2 API and command line interface.</p> <p>Instance console output is buffered and posted shortly after instance boot, reboot, and termination. Amazon EC2 preserves the most recent 64 KB output which is available for at least one hour after the most recent post.</p> <p>For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. This output is buffered because the instance produces it and then posts it to a store where the instance's owner can retrieve it.</p> <p>For Windows instances, the instance console output includes output from the EC2Config service.</p>
 */
func getConsoleOutput(input: GetConsoleOutputRequest) -> ApiCallTask<GetConsoleOutputResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Stops an Amazon EBS-backed instance.</p> <p>We don't charge hourly usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains, continues to persist your data, and you are charged for Amazon EBS volume usage. Each time you transition an instance from stopped to started, Amazon EC2 charges a full instance hour, even if transitions happen multiple times within a single hour.</p> <p>You can't start or stop Spot instances, and you can't stop instance store-backed instances.</p> <p>When you stop an instance, we shut it down. You can restart your instance at any time. Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Stopping an instance is different to rebooting or terminating it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, and terminating instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting Stopping Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func stopInstances(input: StopInstancesRequest) -> ApiCallTask<StopInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p> <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <a>DescribeReservedInstances</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func purchaseReservedInstancesOffering(input: PurchaseReservedInstancesOfferingRequest) -> ApiCallTask<PurchaseReservedInstancesOfferingResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
 */
func cancelBundleTask(input: CancelBundleTaskRequest) -> ApiCallTask<CancelBundleTaskResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies a subnet attribute.</p>
 */
func modifySubnetAttribute(input: ModifySubnetAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.</p>
 */
func disableVgwRoutePropagation(input: DisableVgwRoutePropagationRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a network interface in the specified subnet.</p> <p>For more information about network interfaces, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createNetworkInterface(input: CreateNetworkInterfaceRequest) -> ApiCallTask<CreateNetworkInterfaceResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels the specified Spot fleet requests.</p> <p>After you cancel a Spot fleet request, the Spot fleet launches no new Spot instances. You must specify whether the Spot fleet should also terminate its Spot instances. If you terminate the instances, the Spot fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p>
 */
func cancelSpotFleetRequests(input: CancelSpotFleetRequestsRequest) -> ApiCallTask<CancelSpotFleetRequestsResponse> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a VPC endpoint for a specified AWS service. An endpoint enables you to create a private connection between your VPC and another AWS service in your account. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.</p> <p>Currently, only endpoints to Amazon S3 are supported.</p>
 */
func createVpcEndpoint(input: CreateVpcEndpointRequest) -> ApiCallTask<CreateVpcEndpointResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your bundling tasks.</p> <note> <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p> </note>
 */
func describeBundleTasks(input: DescribeBundleTasksRequest) -> ApiCallTask<DescribeBundleTasksResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
 */
func describeImageAttribute(input: DescribeImageAttributeRequest) -> ApiCallTask<ImageAttribute> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your route tables.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeRouteTables(input: DescribeRouteTablesRequest) -> ApiCallTask<DescribeRouteTablesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p>
 */
func deleteVpnConnectionRoute(input: DeleteVpnConnectionRouteRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a data feed for Spot instances, enabling you to view Spot instance usage logs. You can create one data feed per AWS account. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createSpotDatafeedSubscription(input: CreateSpotDatafeedSubscriptionRequest) -> ApiCallTask<CreateSpotDatafeedSubscriptionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Changes the route table associated with a given subnet in a VPC. After the operation completes, the subnet uses the routes in the new route table it's associated with. For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can also use ReplaceRouteTableAssociation to change which table is the main route table in the VPC. You just specify the main route table's association ID and the route table to be the new main route table.</p>
 */
func replaceRouteTableAssociation(input: ReplaceRouteTableAssociationRequest) -> ApiCallTask<ReplaceRouteTableAssociationResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your VPN customer gateways.</p> <p>For more information about VPN customer gateways, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeCustomerGateways(input: DescribeCustomerGatewaysRequest) -> ApiCallTask<DescribeCustomerGatewaysResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your Internet gateways.</p>
 */
func describeInternetGateways(input: DescribeInternetGatewaysRequest) -> ApiCallTask<DescribeInternetGatewaysResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a VPC with the specified CIDR block.</p> <p>The smallest VPC you can create uses a /28 netmask (16 IP addresses), and the largest uses a /16 netmask (65,536 IP addresses). To help you decide how big to make your VPC, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>By default, each instance you launch in the VPC has the default DHCP options, which includes only a default DNS server that we provide (AmazonProvidedDNS). For more information about DHCP options, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/dedicated-instance.html.html">Dedicated Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createVpc(input: CreateVpcRequest) -> ApiCallTask<CreateVpcResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Rejects a VPC peering connection request. The VPC peering connection must be in the <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use <a>DeleteVpcPeeringConnection</a>.</p>
 */
func rejectVpcPeeringConnection(input: RejectVpcPeeringConnectionRequest) -> ApiCallTask<RejectVpcPeeringConnectionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.</p>
 */
func deleteVpnGateway(input: DeleteVpnGatewayRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Imports a disk into an EBS snapshot.</p>
 */
func importSnapshot(input: ImportSnapshotRequest) -> ApiCallTask<ImportSnapshotResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink; you cannot use this request to return information about other instances.</p>
 */
func describeClassicLinkInstances(input: DescribeClassicLinkInstancesRequest) -> ApiCallTask<DescribeClassicLinkInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Purchases one or more Scheduled Instances with the specified schedule.</p> <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a> during each scheduled time period.</p> <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
 */
func purchaseScheduledInstances(input: PurchaseScheduledInstancesRequest) -> ApiCallTask<PurchaseScheduledInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
 */
func deleteRouteTable(input: DeleteRouteTableRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more regions that are currently available to you.</p> <p>For a list of the regions supported by Amazon EC2, see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region">Regions and Endpoints</a>.</p>
 */
func describeRegions(input: DescribeRegionsRequest) -> ApiCallTask<DescribeRegionsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates an import instance task using metadata from the specified disk image. <code>ImportInstance</code> only supports single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
 */
func importInstance(input: ImportInstanceRequest) -> ApiCallTask<ImportInstanceResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Purchases Convertible Reserved Instance offerings described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
 */
func acceptReservedInstancesExchangeQuote(input: AcceptReservedInstancesExchangeQuoteRequest) -> ApiCallTask<AcceptReservedInstancesExchangeQuoteResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of the images (AMIs, AKIs, and ARIs) available to you. Images available to you include public images, private images that you own, and private images owned by other AWS accounts but for which you have explicit launch permissions.</p> <note> <p>Deregistered images are included in the returned results for an unspecified interval after deregistration.</p> </note>
 */
func describeImages(input: DescribeImagesRequest) -> ApiCallTask<DescribeImagesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first.</p> <p>When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detaching an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func detachVolume(input: DetachVolumeRequest) -> ApiCallTask<VolumeAttachment> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner needs to verify whether another user's instance is eligible for support.</p>
 */
func confirmProductInstance(input: ConfirmProductInstanceRequest) -> ApiCallTask<ConfirmProductInstanceResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the ClassicLink status of one or more VPCs.</p>
 */
func describeVpcClassicLink(input: DescribeVpcClassicLinkRequest) -> ApiCallTask<DescribeVpcClassicLinkResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p> <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeReservedInstancesListings(input: DescribeReservedInstancesListingsRequest) -> ApiCallTask<DescribeReservedInstancesListingsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Resets permission settings for the specified snapshot.</p> <p>For more information on modifying snapshot permissions, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func resetSnapshotAttribute(input: ResetSnapshotAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.</p> <p>For more information about EBS snapshots, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeSnapshotAttribute(input: DescribeSnapshotAttributeRequest) -> ApiCallTask<DescribeSnapshotAttributeResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your VPC peering connections.</p>
 */
func describeVpcPeeringConnections(input: DescribeVpcPeeringConnectionsRequest) -> ApiCallTask<DescribeVpcPeeringConnectionsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of the Reserved Instances that you purchased.</p> <p>For more information about Reserved Instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeReservedInstances(input: DescribeReservedInstancesRequest) -> ApiCallTask<DescribeReservedInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.</p>
 */
func describeFlowLogs(input: DescribeFlowLogsRequest) -> ApiCallTask<DescribeFlowLogsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Launches the specified Scheduled Instances.</p> <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p> <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func runScheduledInstances(input: RunScheduledInstancesRequest) -> ApiCallTask<RunScheduledInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the status of one or more instances. By default, only running instances are described, unless specified otherwise.</p> <p>Instance status includes the following components:</p> <ul> <li> <p> <b>Status checks</b> - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status Checks for Your Instances</a> and <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting Instances with Failed Status Checks</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled Events for Your Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Instance state</b> - You can manage your instances from the moment you launch them through their termination. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> </ul>
 */
func describeInstanceStatus(input: DescribeInstanceStatusRequest) -> ApiCallTask<DescribeInstanceStatusResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC's route tables have existing routes for address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address ranges. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the Amazon Elastic Compute Cloud User Guide.</p>
 */
func enableVpcClassicLink(input: EnableVpcClassicLinkRequest) -> ApiCallTask<EnableVpcClassicLinkResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified set of tags from the specified set of resources. This call is designed to follow a <code>DescribeTags</code> request.</p> <p>For more information about tags, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func deleteTags(input: DeleteTagsRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway's external interface. The IP address must be static and may be behind a device performing network address translation (NAT).</p> <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN (in the 64512 - 65534 range).</p> <note> <p>Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the <code>us-east-1</code> region, and 9059, which is reserved in the <code>eu-west-1</code> region.</p> </note> <p>For more information about VPN customer gateways, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <important> <p>You cannot create more than one customer gateway with the same VPN type, IP address, and BGP ASN parameter values. If you run an identical request more than one time, the first request creates the customer gateway, and subsequent requests return information about the existing customer gateway. The subsequent requests do not create new customer gateway resources.</p> </important>
 */
func createCustomerGateway(input: CreateCustomerGatewayRequest) -> ApiCallTask<CreateCustomerGatewayResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p> <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func associateDhcpOptions(input: AssociateDhcpOptionsRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your VPCs.</p>
 */
func describeVpcs(input: DescribeVpcsRequest) -> ApiCallTask<DescribeVpcsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the specified EBS volumes.</p> <p>If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining results.</p> <p>For more information about EBS volumes, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeVolumes(input: DescribeVolumesRequest) -> ApiCallTask<DescribeVolumesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates an Internet gateway for use with a VPC. After creating the Internet gateway, you attach it to a VPC using <a>AttachInternetGateway</a>.</p> <p>For more information about your VPC and Internet gateway, see the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/">Amazon Virtual Private Cloud User Guide</a>.</p>
 */
func createInternetGateway(input: CreateInternetGatewayRequest) -> ApiCallTask<CreateInternetGatewayResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.</p> <p>When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.</p> <p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is <code>pending</code>.</p> <p>To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</p> <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createSnapshot(input: CreateSnapshotRequest) -> ApiCallTask<Snapshot> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of the your NAT gateways.</p>
 */
func describeNatGateways(input: DescribeNatGatewaysRequest) -> ApiCallTask<DescribeNatGatewaysResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes attributes of your AWS account. The following are the supported account attributes:</p> <ul> <li> <p> <code>supported-platforms</code>: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p> </li> <li> <p> <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p> </li> <li> <p> <code>max-instances</code>: The maximum number of On-Demand instances that you can run.</p> </li> <li> <p> <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups that you can assign to a network interface.</p> </li> <li> <p> <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. </p> </li> <li> <p> <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.</p> </li> </ul>
 */
func describeAccountAttributes(input: DescribeAccountAttributesRequest) -> ApiCallTask<DescribeAccountAttributesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified snapshot.</p> <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.</p> <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Deleting an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func deleteSnapshot(input: DeleteSnapshotRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an Image Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
 */
func importImage(input: ImportImageRequest) -> ApiCallTask<ImportImageResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/Creating_InstanceStoreBacked_WinAMI.html">Creating an Instance Store-Backed Windows AMI</a>.</p>
 */
func bundleInstance(input: BundleInstanceRequest) -> ApiCallTask<BundleInstanceResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Allocates a Dedicated Host to your account. At minimum you need to specify the instance size type, Availability Zone, and quantity of hosts you want to allocate.</p>
 */
func allocateHosts(input: AllocateHostsRequest) -> ApiCallTask<AllocateHostsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information about ClassicLink, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the Amazon Elastic Compute Cloud User Guide.</p>
 */
func enableVpcClassicLinkDnsSupport(input: EnableVpcClassicLinkDnsSupportRequest) -> ApiCallTask<EnableVpcClassicLinkDnsSupportResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Disassociates a subnet from a route table.</p> <p>After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func disassociateRouteTable(input: DisassociateRouteTableRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified VPN connection.</p> <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.</p>
 */
func deleteVpnConnection(input: DeleteVpnConnectionRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p> <p>For more information about network ACLs, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createNetworkAcl(input: CreateNetworkAclRequest) -> ApiCallTask<CreateNetworkAclResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your instances.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p>
 */
func describeInstances(input: DescribeInstancesRequest) -> ApiCallTask<DescribeInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.</p>
 */
func deleteCustomerGateway(input: DeleteCustomerGatewayRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels an in-process import virtual machine or import snapshot task.</p>
 */
func cancelImportTask(input: CancelImportTaskRequest) -> ApiCallTask<CancelImportTaskResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your network ACLs.</p> <p>For more information about network ACLs, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func describeNetworkAcls(input: DescribeNetworkAclsRequest) -> ApiCallTask<DescribeNetworkAclsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the Spot instance requests that belong to your account. Spot instances are instances that Amazon EC2 launches when the bid price that you specify exceeds the current Spot price. Amazon EC2 periodically sets the Spot price based on available Spot instance capacity and current Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot instance by examining the response. If the status of the Spot instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a>DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p> <p>Spot instance requests are deleted 4 hours after they are canceled and their instances are terminated.</p>
 */
func describeSpotInstanceRequests(input: DescribeSpotInstanceRequestsRequest) -> ApiCallTask<DescribeSpotInstanceRequestsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information about placement groups and cluster instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html">Cluster Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func deletePlacementGroup(input: DeletePlacementGroupRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating Your Own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <note> <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers the AMI in a single request, so you don't have to register the AMI yourself.</p> </note> <p>You can also use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_LaunchingInstanceFromSnapshot.html">Launching an Instance from a Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <important> <p>Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 <code>billingProduct</code> code associated with an AMI to verify subscription status for package updates. Creating an AMI from an EBS snapshot does not maintain this billing code, and subsequent instances launched from such an AMI will not be able to connect to package update infrastructure.</p> <p>Similarly, although you can create a Windows AMI from a snapshot, you can't successfully launch an instance from the AMI.</p> <p>To create Windows AMIs or to create AMIs for Linux operating systems that must retain AMI billing codes to work properly, see <a>CreateImage</a>.</p> </important> <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.</p> <note> <p>You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.</p> </note>
 */
func registerImage(input: RegisterImageRequest) -> ApiCallTask<RegisterImageResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the Spot price history. The prices returned are listed in chronological order, from the oldest to the most recent, for up to the past 90 days. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance Pricing History</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.</p>
 */
func describeSpotPriceHistory(input: DescribeSpotPriceHistoryRequest) -> ApiCallTask<DescribeSpotPriceHistoryResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Initiates the copy of an AMI from the specified source region to the current region. You specify the destination region by using its endpoint when making the request.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func copyImage(input: CopyImageRequest) -> ApiCallTask<CopyImageResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes one or more specified VPC endpoints. Deleting the endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint.</p>
 */
func deleteVpcEndpoints(input: DeleteVpcEndpointsRequest) -> ApiCallTask<DeleteVpcEndpointsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p>
 */
func cancelConversionTask(input: CancelConversionRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of the tags for your EC2 resources.</p> <p>For more information about tags, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeTags(input: DescribeTagsRequest) -> ApiCallTask<DescribeTagsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.</p>
 */
func detachClassicLinkVpc(input: DetachClassicLinkVpcRequest) -> ApiCallTask<DetachClassicLinkVpcResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Standard Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
 */
func modifyReservedInstances(input: ModifyReservedInstancesRequest) -> ApiCallTask<ModifyReservedInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.</p>
 */
func enableVolumeIO(input: EnableVolumeIORequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Exports a running or stopped instance to an S3 bucket.</p> <p>For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an Instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
 */
func createInstanceExportTask(input: CreateInstanceExportTaskRequest) -> ApiCallTask<CreateInstanceExportTaskResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p> <p>You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.</p> <p>You can create encrypted volumes with the <code>Encrypted</code> parameter. Encrypted volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Creating or Restoring an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func createVolume(input: CreateVolumeRequest) -> ApiCallTask<Volume> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes all supported AWS services that can be specified when creating a VPC endpoint.</p>
 */
func describeVpcEndpointServices(input: DescribeVpcEndpointServicesRequest) -> ApiCallTask<DescribeVpcEndpointServicesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Resets an attribute of an instance to its default value. To reset the <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped state. To reset the <code>sourceDestCheck</code>, the instance can be either running or stopped.</p> <p>The <code>sourceDestCheck</code> attribute controls whether source/destination checking is enabled. The default value is <code>true</code>, which means checking is enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func resetInstanceAttribute(input: ResetInstanceAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.</p> <p>To modify some attributes, the instance must be stopped. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying Attributes of a Stopped Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func modifyInstanceAttribute(input: ModifyInstanceAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates one or more flow logs to capture IP traffic for a specific network interface, subnet, or VPC. Flow logs are delivered to a specified log group in Amazon CloudWatch Logs. If you specify a VPC or subnet in the request, a log stream is created in CloudWatch Logs for each network interface in the subnet or VPC. Log streams can include information about accepted and rejected traffic to a network interface. You can view the data in your log streams using Amazon CloudWatch Logs.</p> <p>In your request, you must also specify an IAM role that has permission to publish logs to CloudWatch Logs.</p>
 */
func createFlowLogs(input: CreateFlowLogsRequest) -> ApiCallTask<CreateFlowLogsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
 */
func disassociateAddress(input: DisassociateAddressRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a security group.</p> <p>A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <important> <p>EC2-Classic: You can have up to 500 security groups.</p> <p>EC2-VPC: You can create up to 500 security groups per VPC.</p> </important> <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p> <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p> <p>You can add or remove rules from your security groups using <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.</p>
 */
func createSecurityGroup(input: CreateSecurityGroupRequest) -> ApiCallTask<CreateSecurityGroupResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Assigns one or more secondary private IP addresses to the specified network interface. You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about Elastic IP addresses, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>AssignPrivateIpAddresses is available only in EC2-VPC.</p>
 */
func assignPrivateIpAddresses(input: AssignPrivateIpAddressesRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
 */
func describeNetworkInterfaceAttribute(input: DescribeNetworkInterfaceAttributeRequest) -> ApiCallTask<DescribeNetworkInterfaceAttributeResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances.</p> <p>This command does not delete the AMI.</p>
 */
func deregisterImage(input: DeregisterImageRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of the Availability Zones that are available to you. The results include zones only for the region you're currently using. If there is an event impacting an Availability Zone, you can use this request to view the state and any provided message for that Availability Zone.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and Availability Zones</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeAvailabilityZones(input: DescribeAvailabilityZonesRequest) -> ApiCallTask<DescribeAvailabilityZonesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p> <p>For more information about route tables, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createRouteTable(input: CreateRouteTableRequest) -> ApiCallTask<CreateRouteTableResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
 */
func restoreAddressToClassic(input: RestoreAddressToClassicRequest) -> ApiCallTask<RestoreAddressToClassicResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func cancelReservedInstancesListing(input: CancelReservedInstancesListingRequest) -> ApiCallTask<CancelReservedInstancesListingResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the specified network interface attribute. You can specify only one attribute at a time.</p>
 */
func modifyNetworkInterfaceAttribute(input: ModifyNetworkInterfaceAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>[EC2-VPC only] Removes one or more egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. The values that you specify in the revoke request (for example, ports) must match the existing rule's values for the rule to be revoked.</p> <p>Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
 */
func revokeSecurityGroupEgress(input: RevokeSecurityGroupEgressRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified Internet gateway. You must detach the Internet gateway from the VPC before you can delete it.</p>
 */
func deleteInternetGateway(input: DeleteInternetGatewayRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and a peer VPC with which to create the connection. The peer VPC can belong to another AWS account. The requester VPC and peer VPC cannot have overlapping CIDR blocks.</p> <p>The owner of the peer VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.</p> <p>A <code>CreateVpcPeeringConnection</code> request between VPCs with overlapping CIDR blocks results in the VPC peering connection having a status of <code>failed</code>.</p>
 */
func createVpcPeeringConnection(input: CreateVpcPeeringConnectionRequest) -> ApiCallTask<CreateVpcPeeringConnectionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Attaches a network interface to an instance.</p>
 */
func attachNetworkInterface(input: AttachNetworkInterfaceRequest) -> ApiCallTask<AttachNetworkInterfaceResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Detaches a network interface from an instance.</p>
 */
func detachNetworkInterface(input: DetachNetworkInterfaceRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.</p> <p>Encrypted EBS volumes may only be attached to instances that support Amazon EBS encryption. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For a list of supported device names, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching an EBS Volume to an Instance</a>. Any device names that aren't reserved for instance store volumes can be used for EBS volumes. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html">Amazon EC2 Instance Store</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If a volume has an AWS Marketplace product code:</p> <ul> <li> <p>The volume can be attached only to a stopped instance.</p> </li> <li> <p>AWS Marketplace product codes are copied from the volume to the instance.</p> </li> <li> <p>You must be subscribed to the product.</p> </li> <li> <p>The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.</p> </li> </ul> <p>For an overview of the AWS Marketplace, see <a href="https://aws.amazon.com/marketplace/help/200900000">Introducing AWS Marketplace</a>.</p> <p>For more information about EBS volumes, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func attachVolume(input: AttachVolumeRequest) -> ApiCallTask<VolumeAttachment> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p> <ul> <li> <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p> </li> <li> <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p> </li> <li> <p>Enable/disable a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p> </li> </ul> <p>If the peered VPCs are in different accounts, each owner must initiate a separate request to modify the peering connection options, depending on whether their VPC was the requester or accepter for the VPC peering connection. If the peered VPCs are in the same account, you can modify the requester and accepter options in the same request. To confirm which VPC is the accepter and requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
 */
func modifyVpcPeeringConnectionOptions(input: ModifyVpcPeeringConnectionOptionsRequest) -> ApiCallTask<ModifyVpcPeeringConnectionOptionsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a Spot fleet request.</p> <p>You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>By default, the Spot fleet requests Spot instances in the Spot pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.</p> <p>Alternatively, you can specify that the Spot fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot instances in your Spot fleet are in different Spot pools, you can improve the availability of your fleet.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet Requests</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func requestSpotFleet(input: RequestSpotFleetRequest) -> ApiCallTask<RequestSpotFleetResponse> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Enables monitoring for a running instance. For more information about monitoring instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func monitorInstances(input: MonitorInstancesRequest) -> ApiCallTask<MonitorInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>[EC2-VPC only] Adds one or more egress rules to a security group for use with a VPC. Specifically, this action permits instances to send traffic to one or more destination CIDR IP address ranges, or to one or more destination security groups for the same VPC. This action doesn't apply to security groups for use in EC2-Classic. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <important> <p>You can have up to 50 rules per security group (covering both ingress and egress rules).</p> </important> <p>Each rule consists of the protocol (for example, TCP), plus either a CIDR range or a source group. For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.</p> <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p>
 */
func authorizeSecurityGroupEgress(input: AuthorizeSecurityGroupEgressRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the <code>running</code> state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it.</p> <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p> <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
 */
func attachClassicLinkVpc(input: AttachClassicLinkVpcRequest) -> ApiCallTask<AttachClassicLinkVpcResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.</p>
 */
func disableVpcClassicLink(input: DisableVpcClassicLinkRequest) -> ApiCallTask<DisableVpcClassicLinkResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> | <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code> | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> | <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> | <code>ebsOptimized</code> | <code>sriovNetSupport</code> </p>
 */
func describeInstanceAttribute(input: DescribeInstanceAttributeRequest) -> ApiCallTask<InstanceAttribute> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Shuts down one or more instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds. </p> <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> <p>Terminated instances remain visible after termination (for approximately one hour).</p> <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information about troubleshooting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting Terminating Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func terminateInstances(input: TerminateInstancesRequest) -> ApiCallTask<TerminateInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single API call. If you need to both add and remove account IDs for a snapshot, you must use multiple API calls.</p> <note> <p>Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.</p> </note> <p>For more information on modifying snapshot permissions, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func modifySnapshotAttribute(input: ModifySnapshotAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.</p>
 */
func purchaseHostReservation(input: PurchaseHostReservationRequest) -> ApiCallTask<PurchaseHostReservationResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Attaches a virtual private gateway to a VPC. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func attachVpnGateway(input: AttachVpnGatewayRequest) -> ApiCallTask<AttachVpnGatewayResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Resets an attribute of an AMI to its default value.</p> <note> <p>The productCodes attribute can't be reset.</p> </note>
 */
func resetImageAttribute(input: ResetImageAttributeRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Modifies the specified Spot fleet request.</p> <p>While the Spot fleet request is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your Spot fleet, increase its target capacity. The Spot fleet launches the additional Spot instances according to the allocation strategy for the Spot fleet request. If the allocation strategy is <code>lowestPrice</code>, the Spot fleet launches instances using the Spot pool with the lowest price. If the allocation strategy is <code>diversified</code>, the Spot fleet distributes the instances across the Spot pools.</p> <p>To scale down your Spot fleet, decrease its target capacity. First, the Spot fleet cancels any open bids that exceed the new target capacity. You can request that the Spot fleet terminate Spot instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>diversified</code>, the Spot fleet terminates instances across the Spot pools. Alternatively, you can request that the Spot fleet keep the fleet at its current size, but not replace any Spot instances that are interrupted or that you terminate manually.</p>
 */
func modifySpotFleetRequest(input: ModifySpotFleetRequestRequest) -> ApiCallTask<ModifySpotFleetRequestResponse> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the Dedicated Host Reservations that are available to purchase.</p> <p>The results describe all the Dedicated Host Reservation offerings, including offerings that may not match the instance family and region of your Dedicated Hosts. When purchasing an offering, ensure that the the instance family and region of the offering matches that of the Dedicated Host/s it will be associated with. For an overview of supported instance types, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts Overview</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
 */
func describeHostReservationOfferings(input: DescribeHostReservationOfferingsRequest) -> ApiCallTask<DescribeHostReservationOfferingsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your export tasks.</p>
 */
func describeExportTasks(input: DescribeExportTasksRequest) -> ApiCallTask<DescribeExportTasksResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p> <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeReservedInstancesOfferings(input: DescribeReservedInstancesOfferingsRequest) -> ApiCallTask<DescribeReservedInstancesOfferingsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your placement groups. For more information about placement groups and cluster instances, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html">Cluster Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describePlacementGroups(input: DescribePlacementGroupsRequest) -> ApiCallTask<DescribePlacementGroupsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your Elastic IP addresses.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
func describeAddresses(input: DescribeAddressesRequest) -> ApiCallTask<DescribeAddressesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into <code>released</code> state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, e.g., ModifyHosts. You must stop or terminate all instances on a host before it can be released.</p> <p>When Dedicated Hosts are released, it make take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated hosts. Try waiting a few minutes, and then try again.</p> <p>Released hosts will still appear in a <a>DescribeHosts</a> response.</p>
 */
func releaseHosts(input: ReleaseHostsRequest) -> ApiCallTask<ReleaseHostsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes the events for the specified Spot fleet request during the specified time.</p> <p>Spot fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event.</p>
 */
func describeSpotFleetRequestHistory(input: DescribeSpotFleetRequestHistoryRequest) -> ApiCallTask<DescribeSpotFleetRequestHistoryResponse> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes your Spot fleet requests.</p> <p>Spot fleet requests are deleted 48 hours after they are canceled and their instances are terminated.</p>
 */
func describeSpotFleetRequests(input: DescribeSpotFleetRequestsRequest) -> ApiCallTask<DescribeSpotFleetRequestsResponse> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Finds available schedules that meet the specified criteria.</p> <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p> <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with that schedule.</p>
 */
func describeScheduledInstanceAvailability(input: DescribeScheduledInstanceAvailabilityRequest) -> ApiCallTask<DescribeScheduledInstanceAvailabilityResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your Dedicated Hosts.</p> <p>The results describe only the Dedicated Hosts in the region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released will be listed with the state <code>released</code>.</p>
 */
func describeHosts(input: DescribeHostsRequest) -> ApiCallTask<DescribeHostsResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The only supported connection type is <code>ipsec.1</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information about VPN connections, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createVpnConnection(input: CreateVpnConnectionRequest) -> ApiCallTask<CreateVpnConnectionResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
 */
func deleteNetworkAcl(input: DeleteNetworkAclRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes one or more of your Scheduled Instances.</p>
 */
func describeScheduledInstances(input: DescribeScheduledInstancesRequest) -> ApiCallTask<DescribeScheduledInstancesResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
 */
func deleteSubnet(input: DeleteSubnetRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.</p> <p>The returned content is Base64-encoded.</p>
 */
func getConsoleScreenshot(input: GetConsoleScreenshotRequest) -> ApiCallTask<GetConsoleScreenshotResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
 */
func deleteKeyPair(input: DeleteKeyPairRequest) -> ApiCallTask<AwsApiVoidOutput> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Describes your import snapshot tasks.</p>
 */
func describeImportSnapshotTasks(input: DescribeImportSnapshotTasksRequest) -> ApiCallTask<DescribeImportSnapshotTasksResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


/**
<p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p> <p>For more information about virtual private gateways, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html">Adding a Hardware Virtual Private Gateway to Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
func createVpnGateway(input: CreateVpnGatewayRequest) -> ApiCallTask<CreateVpnGatewayResult> {
  return ApiCallTask { cb in
    let task = awsApiCallTask(
      session: self.session,
      credentials: self.credentialsProvider.provideAwsCredentials()!,
      scope: self.scope(),
      queue: self.queue,
      urlString: "https://ec2.\(self.region).amazonaws.com/", 
      httpMethod: "POST", 
      expectedStatus: nil, 
      input: input, 
      completionHandler: cb
    )
    task.resume()
  }
}


  }
/**
<p>Contains the output of DescribeVpcClassicLink.</p>
 */
public struct DescribeVpcClassicLinkResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ClassicLink status of one or more VPCs.</p>
 */
  public let vpcs: [VpcClassicLink]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcs != nil { body["vpcSet"] = vpcs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcClassicLinkResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcClassicLinkResult(
        vpcs: jsonDict["vpcSet"].flatMap { ($0 is NSNull) ? nil : [VpcClassicLink].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcs: <p>The ClassicLink status of one or more VPCs.</p>
 */
  public init(vpcs: [VpcClassicLink]?) {
self.vpcs = vpcs
  }
}

/**
<p>Contains the parameters for the request.</p>
 */
public struct GetConsoleScreenshotRequest: RestJsonSerializable {
/**
<p>When set to <code>true</code>, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.</p>
 */
  public let wakeUp: Bool?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if wakeUp != nil { body["WakeUp"] = wakeUp! }
    body["InstanceId"] = instanceId
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - wakeUp: <p>When set to <code>true</code>, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.</p>
      - instanceId: <p>The ID of the instance.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(wakeUp: Bool?, instanceId: String, dryRun: Bool?) {
self.wakeUp = wakeUp
self.instanceId = instanceId
self.dryRun = dryRun
  }
}


enum Movestatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `movingToVpc` = "movingToVpc"
  case `restoringToClassic` = "restoringToClassic"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Movestatus {
    guard case let .json(json) = body else { fatalError() }
    return Movestatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DescribeInstanceAttribute.</p>
 */
public struct DescribeInstanceAttributeRequest: RestJsonSerializable {
/**
<p>The instance attribute.</p> <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p>
 */
  public let attribute: Instanceattributename
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["attribute"] = attribute
    body["instanceId"] = instanceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attribute: <p>The instance attribute.</p> <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p>
      - instanceId: <p>The ID of the instance.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attribute: Instanceattributename, instanceId: String, dryRun: Bool?) {
self.attribute = attribute
self.instanceId = instanceId
self.dryRun = dryRun
  }
}

public struct BlobAttributeValue: RestJsonSerializable, RestJsonDeserializable {
/**

 */
  public let value: Data?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if value != nil { body["value"] = value! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> BlobAttributeValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return BlobAttributeValue(
        value: jsonDict["value"].flatMap { ($0 is NSNull) ? nil : Data.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - value: 
 */
  public init(value: Data?) {
self.value = value
  }
}

/**
<p>Contains the parameters for ModifyVolumeAttribute.</p>
 */
public struct ModifyVolumeAttributeRequest: RestJsonSerializable {
/**
<p>Indicates whether the volume should be auto-enabled for I/O operations.</p>
 */
  public let autoEnableIO: AttributeBooleanValue?
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if autoEnableIO != nil { body["AutoEnableIO"] = autoEnableIO! }
    body["VolumeId"] = volumeId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - autoEnableIO: <p>Indicates whether the volume should be auto-enabled for I/O operations.</p>
      - volumeId: <p>The ID of the volume.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(autoEnableIO: AttributeBooleanValue?, volumeId: String, dryRun: Bool?) {
self.autoEnableIO = autoEnableIO
self.volumeId = volumeId
self.dryRun = dryRun
  }
}

enum Vpnstaticroutesource: String, RestJsonDeserializable, RestJsonSerializable {
  case `static` = "Static"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Vpnstaticroutesource {
    guard case let .json(json) = body else { fatalError() }
    return Vpnstaticroutesource(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Architecturevalues: String, RestJsonDeserializable, RestJsonSerializable {
  case `i386` = "i386"
  case `x86_64` = "x86_64"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Architecturevalues {
    guard case let .json(json) = body else { fatalError() }
    return Architecturevalues(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Traffictype: String, RestJsonDeserializable, RestJsonSerializable {
  case `aCCEPT` = "ACCEPT"
  case `rEJECT` = "REJECT"
  case `aLL` = "ALL"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Traffictype {
    guard case let .json(json) = body else { fatalError() }
    return Traffictype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes the attachment of a VPC to an Internet gateway.</p>
 */
public struct InternetGatewayAttachment: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>The current state of the attachment.</p>
 */
  public let state: Attachmentstatus?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["vpcId"] = vpcId! }
    if state != nil { body["state"] = state! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InternetGatewayAttachment {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InternetGatewayAttachment(
        vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Attachmentstatus.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - state: <p>The current state of the attachment.</p>
 */
  public init(vpcId: String?, state: Attachmentstatus?) {
self.vpcId = vpcId
self.state = state
  }
}

/**
<p>Contains the output of DescribeScheduledInstanceAvailability.</p>
 */
public struct DescribeScheduledInstanceAvailabilityResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>Information about the available Scheduled Instances.</p>
 */
  public let scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if scheduledInstanceAvailabilitySet != nil { body["scheduledInstanceAvailabilitySet"] = scheduledInstanceAvailabilitySet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeScheduledInstanceAvailabilityResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeScheduledInstanceAvailabilityResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      scheduledInstanceAvailabilitySet: jsonDict["scheduledInstanceAvailabilitySet"].flatMap { ($0 is NSNull) ? nil : [ScheduledInstanceAvailability].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
      - scheduledInstanceAvailabilitySet: <p>Information about the available Scheduled Instances.</p>
 */
  public init(nextToken: String?, scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]?) {
self.nextToken = nextToken
self.scheduledInstanceAvailabilitySet = scheduledInstanceAvailabilitySet
  }
}


/**
<p>Contains the output of DescribeAddresses.</p>
 */
public struct DescribeAddressesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more Elastic IP addresses.</p>
 */
  public let addresses: [Address]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if addresses != nil { body["addressesSet"] = addresses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeAddressesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeAddressesResult(
        addresses: jsonDict["addressesSet"].flatMap { ($0 is NSNull) ? nil : [Address].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - addresses: <p>Information about one or more Elastic IP addresses.</p>
 */
  public init(addresses: [Address]?) {
self.addresses = addresses
  }
}

/**
<p>Contains the output of DescribeNatGateways.</p>
 */
public struct DescribeNatGatewaysResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the NAT gateways.</p>
 */
  public let natGateways: [NatGateway]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if natGateways != nil { body["natGatewaySet"] = natGateways! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeNatGatewaysResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeNatGatewaysResult(
        natGateways: jsonDict["natGatewaySet"].flatMap { ($0 is NSNull) ? nil : [NatGateway].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - natGateways: <p>Information about the NAT gateways.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(natGateways: [NatGateway]?, nextToken: String?) {
self.natGateways = natGateways
self.nextToken = nextToken
  }
}

/**
<p>Contains the parameters for ModifyVpcAttribute.</p>
 */
public struct ModifyVpcAttributeRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" will succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>
 */
  public let enableDnsSupport: AttributeBooleanValue?
/**
<p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>
 */
  public let enableDnsHostnames: AttributeBooleanValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    if enableDnsSupport != nil { body["EnableDnsSupport"] = enableDnsSupport! }
    if enableDnsHostnames != nil { body["EnableDnsHostnames"] = enableDnsHostnames! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - enableDnsSupport: <p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" will succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>
      - enableDnsHostnames: <p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>
 */
  public init(vpcId: String, enableDnsSupport: AttributeBooleanValue?, enableDnsHostnames: AttributeBooleanValue?) {
self.vpcId = vpcId
self.enableDnsSupport = enableDnsSupport
self.enableDnsHostnames = enableDnsHostnames
  }
}

/**
<p>Contains the parameters for CreateVpcPeeringConnection.</p>
 */
public struct CreateVpcPeeringConnectionRequest: RestJsonSerializable {
/**
<p>The AWS account ID of the owner of the peer VPC.</p> <p>Default: Your AWS account ID</p>
 */
  public let peerOwnerId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the requester VPC.</p>
 */
  public let vpcId: String?
/**
<p>The ID of the VPC with which you are creating the VPC peering connection.</p>
 */
  public let peerVpcId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if peerOwnerId != nil { body["peerOwnerId"] = peerOwnerId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if peerVpcId != nil { body["peerVpcId"] = peerVpcId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - peerOwnerId: <p>The AWS account ID of the owner of the peer VPC.</p> <p>Default: Your AWS account ID</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcId: <p>The ID of the requester VPC.</p>
      - peerVpcId: <p>The ID of the VPC with which you are creating the VPC peering connection.</p>
 */
  public init(peerOwnerId: String?, dryRun: Bool?, vpcId: String?, peerVpcId: String?) {
self.peerOwnerId = peerOwnerId
self.dryRun = dryRun
self.vpcId = vpcId
self.peerVpcId = peerVpcId
  }
}

/**
<p>Describes the properties of the Dedicated Host.</p>
 */
public struct Host: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
 */
  public let clientToken: String?
/**
<p>Whether auto-placement is on or off.</p>
 */
  public let autoPlacement: Autoplacement?
/**
<p>The ID of the Dedicated Host.</p>
 */
  public let hostId: String?
/**
<p>The Dedicated Host's state.</p>
 */
  public let state: Allocationstate?
/**
<p>The number of new instances that can be launched onto the Dedicated Host.</p>
 */
  public let availableCapacity: AvailableCapacity?
/**
<p>The reservation ID of the Dedicated Host. This returns a <code>null</code> response if the Dedicated Host doesn't have an associated reservation.</p>
 */
  public let hostReservationId: String?
/**
<p>The IDs and instance type that are currently running on the Dedicated Host.</p>
 */
  public let instances: [HostInstance]?
/**
<p>The hardware specifications of the Dedicated Host.</p>
 */
  public let hostProperties: HostProperties?
/**
<p>The Availability Zone of the Dedicated Host.</p>
 */
  public let availabilityZone: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["clientToken"] = clientToken! }
    if autoPlacement != nil { body["autoPlacement"] = autoPlacement! }
    if hostId != nil { body["hostId"] = hostId! }
    if state != nil { body["state"] = state! }
    if availableCapacity != nil { body["availableCapacity"] = availableCapacity! }
    if hostReservationId != nil { body["hostReservationId"] = hostReservationId! }
    if instances != nil { body["instances"] = instances! }
    if hostProperties != nil { body["hostProperties"] = hostProperties! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Host {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Host(
        clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      autoPlacement: jsonDict["autoPlacement"].flatMap { ($0 is NSNull) ? nil : Autoplacement.deserialize(response: response, body: .json($0)) },
      hostId: jsonDict["hostId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Allocationstate.deserialize(response: response, body: .json($0)) },
      availableCapacity: jsonDict["availableCapacity"].flatMap { ($0 is NSNull) ? nil : AvailableCapacity.deserialize(response: response, body: .json($0)) },
      hostReservationId: jsonDict["hostReservationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instances: jsonDict["instances"].flatMap { ($0 is NSNull) ? nil : [HostInstance].deserialize(response: response, body: .json($0)) },
      hostProperties: jsonDict["hostProperties"].flatMap { ($0 is NSNull) ? nil : HostProperties.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
      - autoPlacement: <p>Whether auto-placement is on or off.</p>
      - hostId: <p>The ID of the Dedicated Host.</p>
      - state: <p>The Dedicated Host's state.</p>
      - availableCapacity: <p>The number of new instances that can be launched onto the Dedicated Host.</p>
      - hostReservationId: <p>The reservation ID of the Dedicated Host. This returns a <code>null</code> response if the Dedicated Host doesn't have an associated reservation.</p>
      - instances: <p>The IDs and instance type that are currently running on the Dedicated Host.</p>
      - hostProperties: <p>The hardware specifications of the Dedicated Host.</p>
      - availabilityZone: <p>The Availability Zone of the Dedicated Host.</p>
 */
  public init(clientToken: String?, autoPlacement: Autoplacement?, hostId: String?, state: Allocationstate?, availableCapacity: AvailableCapacity?, hostReservationId: String?, instances: [HostInstance]?, hostProperties: HostProperties?, availabilityZone: String?) {
self.clientToken = clientToken
self.autoPlacement = autoPlacement
self.hostId = hostId
self.state = state
self.availableCapacity = availableCapacity
self.hostReservationId = hostReservationId
self.instances = instances
self.hostProperties = hostProperties
self.availabilityZone = availabilityZone
  }
}



/**
<p>The total value of the new Convertible Reserved Instances.</p>
 */
public struct TargetReservationValue: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
 */
  public let targetConfiguration: TargetConfiguration?
/**
<p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
 */
  public let reservationValue: ReservationValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if targetConfiguration != nil { body["targetConfiguration"] = targetConfiguration! }
    if reservationValue != nil { body["reservationValue"] = reservationValue! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> TargetReservationValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return TargetReservationValue(
        targetConfiguration: jsonDict["targetConfiguration"].flatMap { ($0 is NSNull) ? nil : TargetConfiguration.deserialize(response: response, body: .json($0)) },
      reservationValue: jsonDict["reservationValue"].flatMap { ($0 is NSNull) ? nil : ReservationValue.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - targetConfiguration: <p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
      - reservationValue: <p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
 */
  public init(targetConfiguration: TargetConfiguration?, reservationValue: ReservationValue?) {
self.targetConfiguration = targetConfiguration
self.reservationValue = reservationValue
  }
}

/**
<p>Contains the output of ImportKeyPair.</p>
 */
public struct ImportKeyPairResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The key pair name you provided.</p>
 */
  public let keyName: String?
/**
<p>The MD5 public key fingerprint as specified in section 4 of RFC 4716.</p>
 */
  public let keyFingerprint: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if keyName != nil { body["keyName"] = keyName! }
    if keyFingerprint != nil { body["keyFingerprint"] = keyFingerprint! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportKeyPairResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportKeyPairResult(
        keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      keyFingerprint: jsonDict["keyFingerprint"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - keyName: <p>The key pair name you provided.</p>
      - keyFingerprint: <p>The MD5 public key fingerprint as specified in section 4 of RFC 4716.</p>
 */
  public init(keyName: String?, keyFingerprint: String?) {
self.keyName = keyName
self.keyFingerprint = keyFingerprint
  }
}



/**
<p>Contains the output of DescribeSnapshots.</p>
 */
public struct DescribeSnapshotsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>Information about the snapshots.</p>
 */
  public let snapshots: [Snapshot]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if snapshots != nil { body["snapshotSet"] = snapshots! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSnapshotsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSnapshotsResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshots: jsonDict["snapshotSet"].flatMap { ($0 is NSNull) ? nil : [Snapshot].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - snapshots: <p>Information about the snapshots.</p>
 */
  public init(nextToken: String?, snapshots: [Snapshot]?) {
self.nextToken = nextToken
self.snapshots = snapshots
  }
}

/**
<p>Contains the parameters for DescribeInstanceStatus.</p>
 */
public struct DescribeInstanceStatusRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.code</code> - The code for the scheduled event (<code>instance-reboot</code> | <code>system-reboot</code> | <code>system-maintenance</code> | <code>instance-retirement</code> | <code>instance-stop</code>).</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The code for the instance state, as a 16-bit unsigned integer. The high byte is an opaque internal value and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-status.reachability</code> - Filters on instance status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>instance-status.status</code> - The status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> <li> <p> <code>system-status.reachability</code> - Filters on system status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>system-status.status</code> - The system status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>When <code>true</code>, includes the health status for all instances. When <code>false</code>, includes the health status for running instances only.</p> <p>Default: <code>false</code> </p>
 */
  public let includeAllInstances: Bool?
/**
<p>One or more instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>
 */
  public let instanceIds: [String]?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if includeAllInstances != nil { body["includeAllInstances"] = includeAllInstances! }
    if instanceIds != nil { body["InstanceId"] = instanceIds! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.code</code> - The code for the scheduled event (<code>instance-reboot</code> | <code>system-reboot</code> | <code>system-maintenance</code> | <code>instance-retirement</code> | <code>instance-stop</code>).</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The code for the instance state, as a 16-bit unsigned integer. The high byte is an opaque internal value and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-status.reachability</code> - Filters on instance status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>instance-status.status</code> - The status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> <li> <p> <code>system-status.reachability</code> - Filters on system status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>system-status.status</code> - The system status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - includeAllInstances: <p>When <code>true</code>, includes the health status for all instances. When <code>false</code>, includes the health status for running instances only.</p> <p>Default: <code>false</code> </p>
      - instanceIds: <p>One or more instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, includeAllInstances: Bool?, instanceIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.includeAllInstances = includeAllInstances
self.instanceIds = instanceIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes the volume status.</p>
 */
public struct VolumeStatusItem: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The details of the operation.</p>
 */
  public let actions: [VolumeStatusAction]?
/**
<p>A list of events associated with the volume.</p>
 */
  public let events: [VolumeStatusEvent]?
/**
<p>The volume status.</p>
 */
  public let volumeStatus: VolumeStatusInfo?
/**
<p>The Availability Zone of the volume.</p>
 */
  public let availabilityZone: String?
/**
<p>The volume ID.</p>
 */
  public let volumeId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if actions != nil { body["actionsSet"] = actions! }
    if events != nil { body["eventsSet"] = events! }
    if volumeStatus != nil { body["volumeStatus"] = volumeStatus! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if volumeId != nil { body["volumeId"] = volumeId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeStatusItem {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeStatusItem(
        actions: jsonDict["actionsSet"].flatMap { ($0 is NSNull) ? nil : [VolumeStatusAction].deserialize(response: response, body: .json($0)) },
      events: jsonDict["eventsSet"].flatMap { ($0 is NSNull) ? nil : [VolumeStatusEvent].deserialize(response: response, body: .json($0)) },
      volumeStatus: jsonDict["volumeStatus"].flatMap { ($0 is NSNull) ? nil : VolumeStatusInfo.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - actions: <p>The details of the operation.</p>
      - events: <p>A list of events associated with the volume.</p>
      - volumeStatus: <p>The volume status.</p>
      - availabilityZone: <p>The Availability Zone of the volume.</p>
      - volumeId: <p>The volume ID.</p>
 */
  public init(actions: [VolumeStatusAction]?, events: [VolumeStatusEvent]?, volumeStatus: VolumeStatusInfo?, availabilityZone: String?, volumeId: String?) {
self.actions = actions
self.events = events
self.volumeStatus = volumeStatus
self.availabilityZone = availabilityZone
self.volumeId = volumeId
  }
}

/**
<p>Contains the parameters for EnableVpcClassicLink.</p>
 */
public struct EnableVpcClassicLinkRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of CreateRouteTable.</p>
 */
public struct CreateRouteTableResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the route table.</p>
 */
  public let routeTable: RouteTable?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if routeTable != nil { body["routeTable"] = routeTable! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateRouteTableResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateRouteTableResult(
        routeTable: jsonDict["routeTable"].flatMap { ($0 is NSNull) ? nil : RouteTable.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - routeTable: <p>Information about the route table.</p>
 */
  public init(routeTable: RouteTable?) {
self.routeTable = routeTable
  }
}

/**
<p>Describes a network interface.</p>
 */
public struct InstanceNetworkInterface: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The MAC address.</p>
 */
  public let macAddress: String?
/**
<p>Indicates whether to validate network traffic to or from this network interface.</p>
 */
  public let sourceDestCheck: Bool?
/**
<p>The private DNS name.</p>
 */
  public let privateDnsName: String?
/**
<p>The ID of the AWS account that created the network interface.</p>
 */
  public let ownerId: String?
/**
<p>The network interface attachment.</p>
 */
  public let attachment: InstanceNetworkInterfaceAttachment?
/**
<p>The private IP addresses associated with the network interface.</p>
 */
  public let privateIpAddresses: [InstancePrivateIpAddress]?
/**
<p>The description.</p>
 */
  public let description: String?
/**
<p>The status of the network interface.</p>
 */
  public let status: Networkinterfacestatus?
/**
<p>The IP address of the network interface within the subnet.</p>
 */
  public let privateIpAddress: String?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>One or more security groups.</p>
 */
  public let groups: [GroupIdentifier]?
/**
<p>The association information for an Elastic IP associated with the network interface.</p>
 */
  public let association: InstanceNetworkInterfaceAssociation?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnetId != nil { body["subnetId"] = subnetId! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if macAddress != nil { body["macAddress"] = macAddress! }
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    if privateDnsName != nil { body["privateDnsName"] = privateDnsName! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if attachment != nil { body["attachment"] = attachment! }
    if privateIpAddresses != nil { body["privateIpAddressesSet"] = privateIpAddresses! }
    if description != nil { body["description"] = description! }
    if status != nil { body["status"] = status! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if groups != nil { body["groupSet"] = groups! }
    if association != nil { body["association"] = association! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceNetworkInterface {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceNetworkInterface(
        subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      macAddress: jsonDict["macAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      sourceDestCheck: jsonDict["sourceDestCheck"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateDnsName: jsonDict["privateDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      attachment: jsonDict["attachment"].flatMap { ($0 is NSNull) ? nil : InstanceNetworkInterfaceAttachment.deserialize(response: response, body: .json($0)) },
      privateIpAddresses: jsonDict["privateIpAddressesSet"].flatMap { ($0 is NSNull) ? nil : [InstancePrivateIpAddress].deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Networkinterfacestatus.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      association: jsonDict["association"].flatMap { ($0 is NSNull) ? nil : InstanceNetworkInterfaceAssociation.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnetId: <p>The ID of the subnet.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - macAddress: <p>The MAC address.</p>
      - sourceDestCheck: <p>Indicates whether to validate network traffic to or from this network interface.</p>
      - privateDnsName: <p>The private DNS name.</p>
      - ownerId: <p>The ID of the AWS account that created the network interface.</p>
      - attachment: <p>The network interface attachment.</p>
      - privateIpAddresses: <p>The private IP addresses associated with the network interface.</p>
      - description: <p>The description.</p>
      - status: <p>The status of the network interface.</p>
      - privateIpAddress: <p>The IP address of the network interface within the subnet.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - groups: <p>One or more security groups.</p>
      - association: <p>The association information for an Elastic IP associated with the network interface.</p>
 */
  public init(subnetId: String?, networkInterfaceId: String?, macAddress: String?, sourceDestCheck: Bool?, privateDnsName: String?, ownerId: String?, attachment: InstanceNetworkInterfaceAttachment?, privateIpAddresses: [InstancePrivateIpAddress]?, description: String?, status: Networkinterfacestatus?, privateIpAddress: String?, vpcId: String?, groups: [GroupIdentifier]?, association: InstanceNetworkInterfaceAssociation?) {
self.subnetId = subnetId
self.networkInterfaceId = networkInterfaceId
self.macAddress = macAddress
self.sourceDestCheck = sourceDestCheck
self.privateDnsName = privateDnsName
self.ownerId = ownerId
self.attachment = attachment
self.privateIpAddresses = privateIpAddresses
self.description = description
self.status = status
self.privateIpAddress = privateIpAddress
self.vpcId = vpcId
self.groups = groups
self.association = association
  }
}

/**
<p>Contains the output of CreateNetworkInterface.</p>
 */
public struct CreateNetworkInterfaceResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the network interface.</p>
 */
  public let networkInterface: NetworkInterface?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkInterface != nil { body["networkInterface"] = networkInterface! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateNetworkInterfaceResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateNetworkInterfaceResult(
        networkInterface: jsonDict["networkInterface"].flatMap { ($0 is NSNull) ? nil : NetworkInterface.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - networkInterface: <p>Information about the network interface.</p>
 */
  public init(networkInterface: NetworkInterface?) {
self.networkInterface = networkInterface
  }
}

/**
<p>Contains the parameters for ResetInstanceAttribute.</p>
 */
public struct ResetInstanceAttributeRequest: RestJsonSerializable {
/**
<p>The attribute to reset.</p> <important> <p>You can only reset the following attributes: <code>kernel</code> | <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance attribute, use <a>ModifyInstanceAttribute</a>.</p> </important>
 */
  public let attribute: Instanceattributename
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["attribute"] = attribute
    body["instanceId"] = instanceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attribute: <p>The attribute to reset.</p> <important> <p>You can only reset the following attributes: <code>kernel</code> | <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance attribute, use <a>ModifyInstanceAttribute</a>.</p> </important>
      - instanceId: <p>The ID of the instance.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attribute: Instanceattributename, instanceId: String, dryRun: Bool?) {
self.attribute = attribute
self.instanceId = instanceId
self.dryRun = dryRun
  }
}


/**
<p>Describes the monitoring for the instance.</p>
 */
public struct Monitoring: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether monitoring is enabled for the instance.</p>
 */
  public let state: Monitoringstate?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if state != nil { body["state"] = state! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Monitoring {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Monitoring(
        state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Monitoringstate.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - state: <p>Indicates whether monitoring is enabled for the instance.</p>
 */
  public init(state: Monitoringstate?) {
self.state = state
  }
}

/**
<p>Describes the launch specification for an instance.</p>
 */
public struct RequestSpotLaunchSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more block device mapping entries.</p> <p>Although you can specify encrypted EBS volumes in this block device mapping for your Spot Instances, these volumes are not encrypted.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>The ID of the subnet in which to launch the instance.</p>
 */
  public let subnetId: String?
/**
<p>The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let userData: String?
/**
<p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
 */
  public let ebsOptimized: Bool?
/**

 */
  public let securityGroupIds: [String]?
/**
<p>The ID of the kernel.</p>
 */
  public let kernelId: String?
/**

 */
  public let monitoring: RunInstancesMonitoringEnabled?
/**
<p>The instance type.</p>
 */
  public let instanceType: Instancetype?
/**

 */
  public let securityGroups: [String]?
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String?
/**
<p>Deprecated.</p>
 */
  public let addressingType: String?
/**
<p>The IAM instance profile.</p>
 */
  public let iamInstanceProfile: IamInstanceProfileSpecification?
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String?
/**
<p>One or more network interfaces.</p>
 */
  public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
/**
<p>The placement information for the instance.</p>
 */
  public let placement: SpotPlacement?
/**
<p>The ID of the RAM disk.</p>
 */
  public let ramdiskId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if userData != nil { body["userData"] = userData! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if securityGroupIds != nil { body["SecurityGroupId"] = securityGroupIds! }
    if kernelId != nil { body["kernelId"] = kernelId! }
    if monitoring != nil { body["monitoring"] = monitoring! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if securityGroups != nil { body["SecurityGroup"] = securityGroups! }
    if keyName != nil { body["keyName"] = keyName! }
    if addressingType != nil { body["addressingType"] = addressingType! }
    if iamInstanceProfile != nil { body["iamInstanceProfile"] = iamInstanceProfile! }
    if imageId != nil { body["imageId"] = imageId! }
    if networkInterfaces != nil { body["NetworkInterface"] = networkInterfaces! }
    if placement != nil { body["placement"] = placement! }
    if ramdiskId != nil { body["ramdiskId"] = ramdiskId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RequestSpotLaunchSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RequestSpotLaunchSpecification(
        blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [BlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userData: jsonDict["userData"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebsOptimized: jsonDict["ebsOptimized"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      securityGroupIds: jsonDict["SecurityGroupId"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernelId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      monitoring: jsonDict["monitoring"].flatMap { ($0 is NSNull) ? nil : RunInstancesMonitoringEnabled.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      securityGroups: jsonDict["SecurityGroup"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      addressingType: jsonDict["addressingType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      iamInstanceProfile: jsonDict["iamInstanceProfile"].flatMap { ($0 is NSNull) ? nil : IamInstanceProfileSpecification.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaces: jsonDict["NetworkInterface"].flatMap { ($0 is NSNull) ? nil : [InstanceNetworkInterfaceSpecification].deserialize(response: response, body: .json($0)) },
      placement: jsonDict["placement"].flatMap { ($0 is NSNull) ? nil : SpotPlacement.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdiskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>One or more block device mapping entries.</p> <p>Although you can specify encrypted EBS volumes in this block device mapping for your Spot Instances, these volumes are not encrypted.</p>
      - subnetId: <p>The ID of the subnet in which to launch the instance.</p>
      - userData: <p>The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
      - ebsOptimized: <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
      - securityGroupIds: 
      - kernelId: <p>The ID of the kernel.</p>
      - monitoring: 
      - instanceType: <p>The instance type.</p>
      - securityGroups: 
      - keyName: <p>The name of the key pair.</p>
      - addressingType: <p>Deprecated.</p>
      - iamInstanceProfile: <p>The IAM instance profile.</p>
      - imageId: <p>The ID of the AMI.</p>
      - networkInterfaces: <p>One or more network interfaces.</p>
      - placement: <p>The placement information for the instance.</p>
      - ramdiskId: <p>The ID of the RAM disk.</p>
 */
  public init(blockDeviceMappings: [BlockDeviceMapping]?, subnetId: String?, userData: String?, ebsOptimized: Bool?, securityGroupIds: [String]?, kernelId: String?, monitoring: RunInstancesMonitoringEnabled?, instanceType: Instancetype?, securityGroups: [String]?, keyName: String?, addressingType: String?, iamInstanceProfile: IamInstanceProfileSpecification?, imageId: String?, networkInterfaces: [InstanceNetworkInterfaceSpecification]?, placement: SpotPlacement?, ramdiskId: String?) {
self.blockDeviceMappings = blockDeviceMappings
self.subnetId = subnetId
self.userData = userData
self.ebsOptimized = ebsOptimized
self.securityGroupIds = securityGroupIds
self.kernelId = kernelId
self.monitoring = monitoring
self.instanceType = instanceType
self.securityGroups = securityGroups
self.keyName = keyName
self.addressingType = addressingType
self.iamInstanceProfile = iamInstanceProfile
self.imageId = imageId
self.networkInterfaces = networkInterfaces
self.placement = placement
self.ramdiskId = ramdiskId
  }
}

/**
<p>Describes the disk container object for an import image task.</p>
 */
public struct ImageDiskContainer: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The S3 bucket for the disk image.</p>
 */
  public let userBucket: UserBucket?
/**
<p>The format of the disk image being imported.</p> <p>Valid values: <code>RAW</code> | <code>VHD</code> | <code>VMDK</code> | <code>OVA</code> </p>
 */
  public let format: String?
/**
<p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
 */
  public let snapshotId: String?
/**
<p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
 */
  public let url: String?
/**
<p>The block device mapping for the disk.</p>
 */
  public let deviceName: String?
/**
<p>The description of the disk image.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if userBucket != nil { body["UserBucket"] = userBucket! }
    if format != nil { body["Format"] = format! }
    if snapshotId != nil { body["SnapshotId"] = snapshotId! }
    if url != nil { body["Url"] = url! }
    if deviceName != nil { body["DeviceName"] = deviceName! }
    if description != nil { body["Description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImageDiskContainer {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImageDiskContainer(
        userBucket: jsonDict["UserBucket"].flatMap { ($0 is NSNull) ? nil : UserBucket.deserialize(response: response, body: .json($0)) },
      format: jsonDict["Format"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotId: jsonDict["SnapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      url: jsonDict["Url"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deviceName: jsonDict["DeviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["Description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - userBucket: <p>The S3 bucket for the disk image.</p>
      - format: <p>The format of the disk image being imported.</p> <p>Valid values: <code>RAW</code> | <code>VHD</code> | <code>VMDK</code> | <code>OVA</code> </p>
      - snapshotId: <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
      - url: <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
      - deviceName: <p>The block device mapping for the disk.</p>
      - description: <p>The description of the disk image.</p>
 */
  public init(userBucket: UserBucket?, format: String?, snapshotId: String?, url: String?, deviceName: String?, description: String?) {
self.userBucket = userBucket
self.format = format
self.snapshotId = snapshotId
self.url = url
self.deviceName = deviceName
self.description = description
  }
}

/**
<p>Contains the parameters for PurchaseReservedInstancesOffering.</p>
 */
public struct PurchaseReservedInstancesOfferingRequest: RestJsonSerializable {
/**
<p>The ID of the Reserved Instance offering to purchase.</p>
 */
  public let reservedInstancesOfferingId: String
/**
<p>The number of Reserved Instances to purchase.</p>
 */
  public let instanceCount: Int
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
 */
  public let limitPrice: ReservedInstanceLimitPrice?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ReservedInstancesOfferingId"] = reservedInstancesOfferingId
    body["InstanceCount"] = instanceCount
    if dryRun != nil { body["dryRun"] = dryRun! }
    if limitPrice != nil { body["limitPrice"] = limitPrice! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstancesOfferingId: <p>The ID of the Reserved Instance offering to purchase.</p>
      - instanceCount: <p>The number of Reserved Instances to purchase.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - limitPrice: <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
 */
  public init(reservedInstancesOfferingId: String, instanceCount: Int, dryRun: Bool?, limitPrice: ReservedInstanceLimitPrice?) {
self.reservedInstancesOfferingId = reservedInstancesOfferingId
self.instanceCount = instanceCount
self.dryRun = dryRun
self.limitPrice = limitPrice
  }
}

/**
<p>Describes a Reserved Instance.</p>
 */
public struct ReservedInstances: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The recurring charge tag assigned to the resource.</p>
 */
  public let recurringCharges: [RecurringCharge]?
/**
<p>The usage price of the Reserved Instance, per hour.</p>
 */
  public let usagePrice: Float?
/**
<p>The state of the Reserved Instance purchase.</p>
 */
  public let state: Reservedinstancestate?
/**
<p>The tenancy of the instance.</p>
 */
  public let instanceTenancy: Tenancy?
/**
<p>Any tags assigned to the resource.</p>
 */
  public let tags: [Tag]?
/**
<p>The instance type on which the Reserved Instance can be used.</p>
 */
  public let instanceType: Instancetype?
/**
<p>The Reserved Instance offering type.</p>
 */
  public let offeringType: Offeringtypevalues?
/**
<p>The Reserved Instance product platform description.</p>
 */
  public let productDescription: Riproductdescription?
/**
<p>The Availability Zone in which the Reserved Instance can be used.</p>
 */
  public let availabilityZone: String?
/**
<p>The offering class of the Reserved Instance.</p>
 */
  public let offeringClass: Offeringclasstype?
/**
<p>The date and time the Reserved Instance started.</p>
 */
  public let start: Date?
/**
<p>The time when the Reserved Instance expires.</p>
 */
  public let end: Date?
/**
<p>The ID of the Reserved Instance.</p>
 */
  public let reservedInstancesId: String?
/**
<p>The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The number of reservations purchased.</p>
 */
  public let instanceCount: Int?
/**
<p>The duration of the Reserved Instance, in seconds.</p>
 */
  public let duration: Int?
/**
<p>The scope of the Reserved Instance.</p>
 */
  public let scope: Scope?
/**
<p>The purchase price of the Reserved Instance.</p>
 */
  public let fixedPrice: Float?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if recurringCharges != nil { body["recurringCharges"] = recurringCharges! }
    if usagePrice != nil { body["usagePrice"] = usagePrice! }
    if state != nil { body["state"] = state! }
    if instanceTenancy != nil { body["instanceTenancy"] = instanceTenancy! }
    if tags != nil { body["tagSet"] = tags! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if offeringType != nil { body["offeringType"] = offeringType! }
    if productDescription != nil { body["productDescription"] = productDescription! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if offeringClass != nil { body["offeringClass"] = offeringClass! }
    if start != nil { body["start"] = start! }
    if end != nil { body["end"] = end! }
    if reservedInstancesId != nil { body["reservedInstancesId"] = reservedInstancesId! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if instanceCount != nil { body["instanceCount"] = instanceCount! }
    if duration != nil { body["duration"] = duration! }
    if scope != nil { body["scope"] = scope! }
    if fixedPrice != nil { body["fixedPrice"] = fixedPrice! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstances {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstances(
        recurringCharges: jsonDict["recurringCharges"].flatMap { ($0 is NSNull) ? nil : [RecurringCharge].deserialize(response: response, body: .json($0)) },
      usagePrice: jsonDict["usagePrice"].flatMap { ($0 is NSNull) ? nil : Float.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Reservedinstancestate.deserialize(response: response, body: .json($0)) },
      instanceTenancy: jsonDict["instanceTenancy"].flatMap { ($0 is NSNull) ? nil : Tenancy.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      offeringType: jsonDict["offeringType"].flatMap { ($0 is NSNull) ? nil : Offeringtypevalues.deserialize(response: response, body: .json($0)) },
      productDescription: jsonDict["productDescription"].flatMap { ($0 is NSNull) ? nil : Riproductdescription.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      offeringClass: jsonDict["offeringClass"].flatMap { ($0 is NSNull) ? nil : Offeringclasstype.deserialize(response: response, body: .json($0)) },
      start: jsonDict["start"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      end: jsonDict["end"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      reservedInstancesId: jsonDict["reservedInstancesId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      instanceCount: jsonDict["instanceCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      duration: jsonDict["duration"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      scope: jsonDict["scope"].flatMap { ($0 is NSNull) ? nil : Scope.deserialize(response: response, body: .json($0)) },
      fixedPrice: jsonDict["fixedPrice"].flatMap { ($0 is NSNull) ? nil : Float.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - recurringCharges: <p>The recurring charge tag assigned to the resource.</p>
      - usagePrice: <p>The usage price of the Reserved Instance, per hour.</p>
      - state: <p>The state of the Reserved Instance purchase.</p>
      - instanceTenancy: <p>The tenancy of the instance.</p>
      - tags: <p>Any tags assigned to the resource.</p>
      - instanceType: <p>The instance type on which the Reserved Instance can be used.</p>
      - offeringType: <p>The Reserved Instance offering type.</p>
      - productDescription: <p>The Reserved Instance product platform description.</p>
      - availabilityZone: <p>The Availability Zone in which the Reserved Instance can be used.</p>
      - offeringClass: <p>The offering class of the Reserved Instance.</p>
      - start: <p>The date and time the Reserved Instance started.</p>
      - end: <p>The time when the Reserved Instance expires.</p>
      - reservedInstancesId: <p>The ID of the Reserved Instance.</p>
      - currencyCode: <p>The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is <code>USD</code>.</p>
      - instanceCount: <p>The number of reservations purchased.</p>
      - duration: <p>The duration of the Reserved Instance, in seconds.</p>
      - scope: <p>The scope of the Reserved Instance.</p>
      - fixedPrice: <p>The purchase price of the Reserved Instance.</p>
 */
  public init(recurringCharges: [RecurringCharge]?, usagePrice: Float?, state: Reservedinstancestate?, instanceTenancy: Tenancy?, tags: [Tag]?, instanceType: Instancetype?, offeringType: Offeringtypevalues?, productDescription: Riproductdescription?, availabilityZone: String?, offeringClass: Offeringclasstype?, start: Date?, end: Date?, reservedInstancesId: String?, currencyCode: Currencycodevalues?, instanceCount: Int?, duration: Int?, scope: Scope?, fixedPrice: Float?) {
self.recurringCharges = recurringCharges
self.usagePrice = usagePrice
self.state = state
self.instanceTenancy = instanceTenancy
self.tags = tags
self.instanceType = instanceType
self.offeringType = offeringType
self.productDescription = productDescription
self.availabilityZone = availabilityZone
self.offeringClass = offeringClass
self.start = start
self.end = end
self.reservedInstancesId = reservedInstancesId
self.currencyCode = currencyCode
self.instanceCount = instanceCount
self.duration = duration
self.scope = scope
self.fixedPrice = fixedPrice
  }
}

/**
<p>Contains the parameters for DescribeCustomerGateways.</p>
 */
public struct DescribeCustomerGatewaysRequest: RestJsonSerializable {
/**
<p>One or more customer gateway IDs.</p> <p>Default: Describes all your customer gateways.</p>
 */
  public let customerGatewayIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of the customer gateway.</p> </li> <li> <p> <code>ip-address</code> - The IP address of the customer gateway's Internet-routable external interface.</p> </li> <li> <p> <code>state</code> - The state of the customer gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>type</code> - The type of customer gateway. Currently, the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if customerGatewayIds != nil { body["CustomerGatewayId"] = customerGatewayIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - customerGatewayIds: <p>One or more customer gateway IDs.</p> <p>Default: Describes all your customer gateways.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of the customer gateway.</p> </li> <li> <p> <code>ip-address</code> - The IP address of the customer gateway's Internet-routable external interface.</p> </li> <li> <p> <code>state</code> - The state of the customer gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>type</code> - The type of customer gateway. Currently, the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(customerGatewayIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.customerGatewayIds = customerGatewayIds
self.filters = filters
self.dryRun = dryRun
  }
}

/**
<p>Describes a network interface.</p>
 */
public struct NetworkInterface: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The MAC address.</p>
 */
  public let macAddress: String?
/**
<p>Indicates whether traffic to or from the instance is validated.</p>
 */
  public let sourceDestCheck: Bool?
/**
<p>The private DNS name.</p>
 */
  public let privateDnsName: String?
/**
<p>The AWS account ID of the owner of the network interface.</p>
 */
  public let ownerId: String?
/**
<p>The type of interface.</p>
 */
  public let interfaceType: Networkinterfacetype?
/**
<p>The Availability Zone.</p>
 */
  public let availabilityZone: String?
/**
<p>A description.</p>
 */
  public let description: String?
/**
<p>The private IP addresses associated with the network interface.</p>
 */
  public let privateIpAddresses: [NetworkInterfacePrivateIpAddress]?
/**
<p>The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).</p>
 */
  public let requesterId: String?
/**
<p>The status of the network interface.</p>
 */
  public let status: Networkinterfacestatus?
/**
<p>The network interface attachment.</p>
 */
  public let attachment: NetworkInterfaceAttachment?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>The IP address of the network interface within the subnet.</p>
 */
  public let privateIpAddress: String?
/**
<p>Any tags assigned to the network interface.</p>
 */
  public let tagSet: [Tag]?
/**
<p>Indicates whether the network interface is being managed by AWS.</p>
 */
  public let requesterManaged: Bool?
/**
<p>Any security groups for the network interface.</p>
 */
  public let groups: [GroupIdentifier]?
/**
<p>The association information for an Elastic IP associated with the network interface.</p>
 */
  public let association: NetworkInterfaceAssociation?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnetId != nil { body["subnetId"] = subnetId! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if macAddress != nil { body["macAddress"] = macAddress! }
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    if privateDnsName != nil { body["privateDnsName"] = privateDnsName! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if interfaceType != nil { body["interfaceType"] = interfaceType! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if description != nil { body["description"] = description! }
    if privateIpAddresses != nil { body["privateIpAddressesSet"] = privateIpAddresses! }
    if requesterId != nil { body["requesterId"] = requesterId! }
    if status != nil { body["status"] = status! }
    if attachment != nil { body["attachment"] = attachment! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
    if tagSet != nil { body["tagSet"] = tagSet! }
    if requesterManaged != nil { body["requesterManaged"] = requesterManaged! }
    if groups != nil { body["groupSet"] = groups! }
    if association != nil { body["association"] = association! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkInterface {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkInterface(
        subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      macAddress: jsonDict["macAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      sourceDestCheck: jsonDict["sourceDestCheck"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateDnsName: jsonDict["privateDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      interfaceType: jsonDict["interfaceType"].flatMap { ($0 is NSNull) ? nil : Networkinterfacetype.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      privateIpAddresses: jsonDict["privateIpAddressesSet"].flatMap { ($0 is NSNull) ? nil : [NetworkInterfacePrivateIpAddress].deserialize(response: response, body: .json($0)) },
      requesterId: jsonDict["requesterId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Networkinterfacestatus.deserialize(response: response, body: .json($0)) },
      attachment: jsonDict["attachment"].flatMap { ($0 is NSNull) ? nil : NetworkInterfaceAttachment.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tagSet: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      requesterManaged: jsonDict["requesterManaged"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      association: jsonDict["association"].flatMap { ($0 is NSNull) ? nil : NetworkInterfaceAssociation.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnetId: <p>The ID of the subnet.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - macAddress: <p>The MAC address.</p>
      - sourceDestCheck: <p>Indicates whether traffic to or from the instance is validated.</p>
      - privateDnsName: <p>The private DNS name.</p>
      - ownerId: <p>The AWS account ID of the owner of the network interface.</p>
      - interfaceType: <p>The type of interface.</p>
      - availabilityZone: <p>The Availability Zone.</p>
      - description: <p>A description.</p>
      - privateIpAddresses: <p>The private IP addresses associated with the network interface.</p>
      - requesterId: <p>The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).</p>
      - status: <p>The status of the network interface.</p>
      - attachment: <p>The network interface attachment.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - privateIpAddress: <p>The IP address of the network interface within the subnet.</p>
      - tagSet: <p>Any tags assigned to the network interface.</p>
      - requesterManaged: <p>Indicates whether the network interface is being managed by AWS.</p>
      - groups: <p>Any security groups for the network interface.</p>
      - association: <p>The association information for an Elastic IP associated with the network interface.</p>
 */
  public init(subnetId: String?, networkInterfaceId: String?, macAddress: String?, sourceDestCheck: Bool?, privateDnsName: String?, ownerId: String?, interfaceType: Networkinterfacetype?, availabilityZone: String?, description: String?, privateIpAddresses: [NetworkInterfacePrivateIpAddress]?, requesterId: String?, status: Networkinterfacestatus?, attachment: NetworkInterfaceAttachment?, vpcId: String?, privateIpAddress: String?, tagSet: [Tag]?, requesterManaged: Bool?, groups: [GroupIdentifier]?, association: NetworkInterfaceAssociation?) {
self.subnetId = subnetId
self.networkInterfaceId = networkInterfaceId
self.macAddress = macAddress
self.sourceDestCheck = sourceDestCheck
self.privateDnsName = privateDnsName
self.ownerId = ownerId
self.interfaceType = interfaceType
self.availabilityZone = availabilityZone
self.description = description
self.privateIpAddresses = privateIpAddresses
self.requesterId = requesterId
self.status = status
self.attachment = attachment
self.vpcId = vpcId
self.privateIpAddress = privateIpAddress
self.tagSet = tagSet
self.requesterManaged = requesterManaged
self.groups = groups
self.association = association
  }
}

/**
<p>Describes a subnet.</p>
 */
public struct Subnet: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether instances launched in this subnet receive a public IP address.</p>
 */
  public let mapPublicIpOnLaunch: Bool?
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String?
/**
<p>Indicates whether this is the default subnet for the Availability Zone.</p>
 */
  public let defaultForAz: Bool?
/**
<p>The ID of the VPC the subnet is in.</p>
 */
  public let vpcId: String?
/**
<p>The current state of the subnet.</p>
 */
  public let state: Subnetstate?
/**
<p>Any tags assigned to the subnet.</p>
 */
  public let tags: [Tag]?
/**
<p>The number of unused IP addresses in the subnet. Note that the IP addresses for any stopped instances are considered unavailable.</p>
 */
  public let availableIpAddressCount: Int?
/**
<p>The Availability Zone of the subnet.</p>
 */
  public let availabilityZone: String?
/**
<p>The CIDR block assigned to the subnet.</p>
 */
  public let cidrBlock: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if mapPublicIpOnLaunch != nil { body["mapPublicIpOnLaunch"] = mapPublicIpOnLaunch! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if defaultForAz != nil { body["defaultForAz"] = defaultForAz! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if state != nil { body["state"] = state! }
    if tags != nil { body["tagSet"] = tags! }
    if availableIpAddressCount != nil { body["availableIpAddressCount"] = availableIpAddressCount! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if cidrBlock != nil { body["cidrBlock"] = cidrBlock! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Subnet {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Subnet(
        mapPublicIpOnLaunch: jsonDict["mapPublicIpOnLaunch"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      defaultForAz: jsonDict["defaultForAz"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Subnetstate.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      availableIpAddressCount: jsonDict["availableIpAddressCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      cidrBlock: jsonDict["cidrBlock"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - mapPublicIpOnLaunch: <p>Indicates whether instances launched in this subnet receive a public IP address.</p>
      - subnetId: <p>The ID of the subnet.</p>
      - defaultForAz: <p>Indicates whether this is the default subnet for the Availability Zone.</p>
      - vpcId: <p>The ID of the VPC the subnet is in.</p>
      - state: <p>The current state of the subnet.</p>
      - tags: <p>Any tags assigned to the subnet.</p>
      - availableIpAddressCount: <p>The number of unused IP addresses in the subnet. Note that the IP addresses for any stopped instances are considered unavailable.</p>
      - availabilityZone: <p>The Availability Zone of the subnet.</p>
      - cidrBlock: <p>The CIDR block assigned to the subnet.</p>
 */
  public init(mapPublicIpOnLaunch: Bool?, subnetId: String?, defaultForAz: Bool?, vpcId: String?, state: Subnetstate?, tags: [Tag]?, availableIpAddressCount: Int?, availabilityZone: String?, cidrBlock: String?) {
self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
self.subnetId = subnetId
self.defaultForAz = defaultForAz
self.vpcId = vpcId
self.state = state
self.tags = tags
self.availableIpAddressCount = availableIpAddressCount
self.availabilityZone = availabilityZone
self.cidrBlock = cidrBlock
  }
}

/**
<p>Contains the output of CancelSpotInstanceRequests.</p>
 */
public struct CancelSpotInstanceRequestsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more Spot instance requests.</p>
 */
  public let cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if cancelledSpotInstanceRequests != nil { body["spotInstanceRequestSet"] = cancelledSpotInstanceRequests! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelSpotInstanceRequestsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelSpotInstanceRequestsResult(
        cancelledSpotInstanceRequests: jsonDict["spotInstanceRequestSet"].flatMap { ($0 is NSNull) ? nil : [CancelledSpotInstanceRequest].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - cancelledSpotInstanceRequests: <p>One or more Spot instance requests.</p>
 */
  public init(cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]?) {
self.cancelledSpotInstanceRequests = cancelledSpotInstanceRequests
  }
}


/**
<p>Contains the parameters for EnableVolumeIO.</p>
 */
public struct EnableVolumeIORequest: RestJsonSerializable {
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["volumeId"] = volumeId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - volumeId: <p>The ID of the volume.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(volumeId: String, dryRun: Bool?) {
self.volumeId = volumeId
self.dryRun = dryRun
  }
}


/**
<p>Describes a Spot fleet event.</p>
 */
public struct EventInformation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The event.</p> <p>The following are the <code>error</code> events.</p> <ul> <li> <p> <code>iamFleetRoleInvalid</code> - The Spot fleet did not have the required permissions either to launch or terminate an instance.</p> </li> <li> <p> <code>launchSpecTemporarilyBlacklisted</code> - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.</p> </li> <li> <p> <code>spotFleetRequestConfigurationInvalid</code> - The configuration is not valid. For more information, see the description of the event.</p> </li> <li> <p> <code>spotInstanceCountLimitExceeded</code> - You've reached the limit on the number of Spot instances that you can launch.</p> </li> </ul> <p>The following are the <code>fleetRequestChange</code> events.</p> <ul> <li> <p> <code>active</code> - The Spot fleet has been validated and Amazon EC2 is attempting to maintain the target number of running Spot instances.</p> </li> <li> <p> <code>cancelled</code> - The Spot fleet is canceled and has no running Spot instances. The Spot fleet will be deleted two days after its instances were terminated.</p> </li> <li> <p> <code>cancelled_running</code> - The Spot fleet is canceled and will not launch additional Spot instances, but its existing Spot instances continue to run until they are interrupted or terminated.</p> </li> <li> <p> <code>cancelled_terminating</code> - The Spot fleet is canceled and its Spot instances are terminating.</p> </li> <li> <p> <code>expired</code> - The Spot fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with <code>TerminateInstancesWithExpiration</code> set.</p> </li> <li> <p> <code>modify_in_progress</code> - A request to modify the Spot fleet request was accepted and is in progress.</p> </li> <li> <p> <code>modify_successful</code> - The Spot fleet request was modified.</p> </li> <li> <p> <code>price_update</code> - The bid price for a launch configuration was adjusted because it was too high. This change is permanent.</p> </li> <li> <p> <code>submitted</code> - The Spot fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot instances.</p> </li> </ul> <p>The following are the <code>instanceChange</code> events.</p> <ul> <li> <p> <code>launched</code> - A bid was fulfilled and a new instance was launched.</p> </li> <li> <p> <code>terminated</code> - An instance was terminated by the user.</p> </li> </ul>
 */
  public let eventSubType: String?
/**
<p>The ID of the instance. This information is available only for <code>instanceChange</code> events.</p>
 */
  public let instanceId: String?
/**
<p>The description of the event.</p>
 */
  public let eventDescription: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if eventSubType != nil { body["eventSubType"] = eventSubType! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if eventDescription != nil { body["eventDescription"] = eventDescription! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> EventInformation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return EventInformation(
        eventSubType: jsonDict["eventSubType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      eventDescription: jsonDict["eventDescription"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - eventSubType: <p>The event.</p> <p>The following are the <code>error</code> events.</p> <ul> <li> <p> <code>iamFleetRoleInvalid</code> - The Spot fleet did not have the required permissions either to launch or terminate an instance.</p> </li> <li> <p> <code>launchSpecTemporarilyBlacklisted</code> - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.</p> </li> <li> <p> <code>spotFleetRequestConfigurationInvalid</code> - The configuration is not valid. For more information, see the description of the event.</p> </li> <li> <p> <code>spotInstanceCountLimitExceeded</code> - You've reached the limit on the number of Spot instances that you can launch.</p> </li> </ul> <p>The following are the <code>fleetRequestChange</code> events.</p> <ul> <li> <p> <code>active</code> - The Spot fleet has been validated and Amazon EC2 is attempting to maintain the target number of running Spot instances.</p> </li> <li> <p> <code>cancelled</code> - The Spot fleet is canceled and has no running Spot instances. The Spot fleet will be deleted two days after its instances were terminated.</p> </li> <li> <p> <code>cancelled_running</code> - The Spot fleet is canceled and will not launch additional Spot instances, but its existing Spot instances continue to run until they are interrupted or terminated.</p> </li> <li> <p> <code>cancelled_terminating</code> - The Spot fleet is canceled and its Spot instances are terminating.</p> </li> <li> <p> <code>expired</code> - The Spot fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with <code>TerminateInstancesWithExpiration</code> set.</p> </li> <li> <p> <code>modify_in_progress</code> - A request to modify the Spot fleet request was accepted and is in progress.</p> </li> <li> <p> <code>modify_successful</code> - The Spot fleet request was modified.</p> </li> <li> <p> <code>price_update</code> - The bid price for a launch configuration was adjusted because it was too high. This change is permanent.</p> </li> <li> <p> <code>submitted</code> - The Spot fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot instances.</p> </li> </ul> <p>The following are the <code>instanceChange</code> events.</p> <ul> <li> <p> <code>launched</code> - A bid was fulfilled and a new instance was launched.</p> </li> <li> <p> <code>terminated</code> - An instance was terminated by the user.</p> </li> </ul>
      - instanceId: <p>The ID of the instance. This information is available only for <code>instanceChange</code> events.</p>
      - eventDescription: <p>The description of the event.</p>
 */
  public init(eventSubType: String?, instanceId: String?, eventDescription: String?) {
self.eventSubType = eventSubType
self.instanceId = instanceId
self.eventDescription = eventDescription
  }
}




/**
<p>The result of the exchange and whether it was <code>successful</code>.</p>
 */
public struct AcceptReservedInstancesExchangeQuoteResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the successful exchange.</p>
 */
  public let exchangeId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if exchangeId != nil { body["exchangeId"] = exchangeId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AcceptReservedInstancesExchangeQuoteResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AcceptReservedInstancesExchangeQuoteResult(
        exchangeId: jsonDict["exchangeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - exchangeId: <p>The ID of the successful exchange.</p>
 */
  public init(exchangeId: String?) {
self.exchangeId = exchangeId
  }
}

/**
<p>Contains the output of DescribeTags.</p>
 */
public struct DescribeTagsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return..</p>
 */
  public let nextToken: String?
/**
<p>A list of tags.</p>
 */
  public let tags: [TagDescription]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if tags != nil { body["tagSet"] = tags! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeTagsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeTagsResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [TagDescription].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return..</p>
      - tags: <p>A list of tags.</p>
 */
  public init(nextToken: String?, tags: [TagDescription]?) {
self.nextToken = nextToken
self.tags = tags
  }
}

/**
<p>Contains the parameters for DescribeNatGateways.</p>
 */
public struct DescribeNatGatewaysRequest: RestJsonSerializable {
/**
<p>One or more NAT gateway IDs.</p>
 */
  public let natGatewayIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>nat-gateway-id</code> - The ID of the NAT gateway.</p> </li> <li> <p> <code>state</code> - The state of the NAT gateway (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p> </li> </ul>
 */
  public let filter: [Filter]?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value specified is greater than 1000, we return only 1000 items.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if natGatewayIds != nil { body["NatGatewayId"] = natGatewayIds! }
    if filter != nil { body["Filter"] = filter! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - natGatewayIds: <p>One or more NAT gateway IDs.</p>
      - filter: <p>One or more filters.</p> <ul> <li> <p> <code>nat-gateway-id</code> - The ID of the NAT gateway.</p> </li> <li> <p> <code>state</code> - The state of the NAT gateway (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p> </li> </ul>
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value specified is greater than 1000, we return only 1000 items.</p>
 */
  public init(natGatewayIds: [String]?, filter: [Filter]?, nextToken: String?, maxResults: Int?) {
self.natGatewayIds = natGatewayIds
self.filter = filter
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for DescribeSubnets.</p>
 */
public struct DescribeSubnetsRequest: RestJsonSerializable {
/**
<p>One or more subnet IDs.</p> <p>Default: Describes all your subnets.</p>
 */
  public let subnetIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availabilityZone</code> - The Availability Zone for the subnet. You can also use <code>availability-zone</code> as the filter name.</p> </li> <li> <p> <code>available-ip-address-count</code> - The number of IP addresses in the subnet that are available.</p> </li> <li> <p> <code>cidrBlock</code> - The CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use <code>cidr</code> or <code>cidr-block</code> as the filter names.</p> </li> <li> <p> <code>defaultForAz</code> - Indicates whether this is the default subnet for the Availability Zone. You can also use <code>default-for-az</code> as the filter name.</p> </li> <li> <p> <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the subnet.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnetIds != nil { body["SubnetId"] = subnetIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - subnetIds: <p>One or more subnet IDs.</p> <p>Default: Describes all your subnets.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availabilityZone</code> - The Availability Zone for the subnet. You can also use <code>availability-zone</code> as the filter name.</p> </li> <li> <p> <code>available-ip-address-count</code> - The number of IP addresses in the subnet that are available.</p> </li> <li> <p> <code>cidrBlock</code> - The CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use <code>cidr</code> or <code>cidr-block</code> as the filter names.</p> </li> <li> <p> <code>defaultForAz</code> - Indicates whether this is the default subnet for the Availability Zone. You can also use <code>default-for-az</code> as the filter name.</p> </li> <li> <p> <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the subnet.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(subnetIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.subnetIds = subnetIds
self.filters = filters
self.dryRun = dryRun
  }
}

enum Exportenvironment: String, RestJsonDeserializable, RestJsonSerializable {
  case `citrix` = "citrix"
  case `vmware` = "vmware"
  case `microsoft` = "microsoft"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Exportenvironment {
    guard case let .json(json) = body else { fatalError() }
    return Exportenvironment(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Datafeedsubscriptionstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `active` = "Active"
  case `inactive` = "Inactive"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Datafeedsubscriptionstate {
    guard case let .json(json) = body else { fatalError() }
    return Datafeedsubscriptionstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Domaintype: String, RestJsonDeserializable, RestJsonSerializable {
  case `vpc` = "vpc"
  case `standard` = "standard"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Domaintype {
    guard case let .json(json) = body else { fatalError() }
    return Domaintype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Flowlogsresourcetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `vPC` = "VPC"
  case `subnet` = "Subnet"
  case `networkInterface` = "NetworkInterface"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Flowlogsresourcetype {
    guard case let .json(json) = body else { fatalError() }
    return Flowlogsresourcetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes the private IP address of a network interface.</p>
 */
public struct NetworkInterfacePrivateIpAddress: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The association information for an Elastic IP address associated with the network interface.</p>
 */
  public let association: NetworkInterfaceAssociation?
/**
<p>The private DNS name.</p>
 */
  public let privateDnsName: String?
/**
<p>Indicates whether this IP address is the primary private IP address of the network interface.</p>
 */
  public let primary: Bool?
/**
<p>The private IP address.</p>
 */
  public let privateIpAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if association != nil { body["association"] = association! }
    if privateDnsName != nil { body["privateDnsName"] = privateDnsName! }
    if primary != nil { body["primary"] = primary! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkInterfacePrivateIpAddress {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkInterfacePrivateIpAddress(
        association: jsonDict["association"].flatMap { ($0 is NSNull) ? nil : NetworkInterfaceAssociation.deserialize(response: response, body: .json($0)) },
      privateDnsName: jsonDict["privateDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      primary: jsonDict["primary"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - association: <p>The association information for an Elastic IP address associated with the network interface.</p>
      - privateDnsName: <p>The private DNS name.</p>
      - primary: <p>Indicates whether this IP address is the primary private IP address of the network interface.</p>
      - privateIpAddress: <p>The private IP address.</p>
 */
  public init(association: NetworkInterfaceAssociation?, privateDnsName: String?, primary: Bool?, privateIpAddress: String?) {
self.association = association
self.privateDnsName = privateDnsName
self.primary = primary
self.privateIpAddress = privateIpAddress
  }
}

/**
<p>Contains the output of DescribeNetworkAcls.</p>
 */
public struct DescribeNetworkAclsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more network ACLs.</p>
 */
  public let networkAcls: [NetworkAcl]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkAcls != nil { body["networkAclSet"] = networkAcls! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeNetworkAclsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeNetworkAclsResult(
        networkAcls: jsonDict["networkAclSet"].flatMap { ($0 is NSNull) ? nil : [NetworkAcl].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - networkAcls: <p>Information about one or more network ACLs.</p>
 */
  public init(networkAcls: [NetworkAcl]?) {
self.networkAcls = networkAcls
  }
}

/**
<p>Describes a Reserved Instance listing.</p>
 */
public struct ReservedInstancesListing: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The status of the Reserved Instance listing.</p>
 */
  public let status: Listingstatus?
/**
<p>The price of the Reserved Instance listing.</p>
 */
  public let priceSchedules: [PriceSchedule]?
/**
<p>The ID of the Reserved Instance listing.</p>
 */
  public let reservedInstancesListingId: String?
/**
<p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>Any tags assigned to the resource.</p>
 */
  public let tags: [Tag]?
/**
<p>The last modified timestamp of the listing.</p>
 */
  public let updateDate: Date?
/**
<p>The ID of the Reserved Instance.</p>
 */
  public let reservedInstancesId: String?
/**
<p>The time the listing was created.</p>
 */
  public let createDate: Date?
/**
<p>The reason for the current status of the Reserved Instance listing. The response can be blank.</p>
 */
  public let statusMessage: String?
/**
<p>The number of instances in this state.</p>
 */
  public let instanceCounts: [InstanceCount]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if status != nil { body["status"] = status! }
    if priceSchedules != nil { body["priceSchedules"] = priceSchedules! }
    if reservedInstancesListingId != nil { body["reservedInstancesListingId"] = reservedInstancesListingId! }
    if clientToken != nil { body["clientToken"] = clientToken! }
    if tags != nil { body["tagSet"] = tags! }
    if updateDate != nil { body["updateDate"] = updateDate! }
    if reservedInstancesId != nil { body["reservedInstancesId"] = reservedInstancesId! }
    if createDate != nil { body["createDate"] = createDate! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if instanceCounts != nil { body["instanceCounts"] = instanceCounts! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstancesListing {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstancesListing(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Listingstatus.deserialize(response: response, body: .json($0)) },
      priceSchedules: jsonDict["priceSchedules"].flatMap { ($0 is NSNull) ? nil : [PriceSchedule].deserialize(response: response, body: .json($0)) },
      reservedInstancesListingId: jsonDict["reservedInstancesListingId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      updateDate: jsonDict["updateDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      reservedInstancesId: jsonDict["reservedInstancesId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      createDate: jsonDict["createDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceCounts: jsonDict["instanceCounts"].flatMap { ($0 is NSNull) ? nil : [InstanceCount].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>The status of the Reserved Instance listing.</p>
      - priceSchedules: <p>The price of the Reserved Instance listing.</p>
      - reservedInstancesListingId: <p>The ID of the Reserved Instance listing.</p>
      - clientToken: <p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
      - tags: <p>Any tags assigned to the resource.</p>
      - updateDate: <p>The last modified timestamp of the listing.</p>
      - reservedInstancesId: <p>The ID of the Reserved Instance.</p>
      - createDate: <p>The time the listing was created.</p>
      - statusMessage: <p>The reason for the current status of the Reserved Instance listing. The response can be blank.</p>
      - instanceCounts: <p>The number of instances in this state.</p>
 */
  public init(status: Listingstatus?, priceSchedules: [PriceSchedule]?, reservedInstancesListingId: String?, clientToken: String?, tags: [Tag]?, updateDate: Date?, reservedInstancesId: String?, createDate: Date?, statusMessage: String?, instanceCounts: [InstanceCount]?) {
self.status = status
self.priceSchedules = priceSchedules
self.reservedInstancesListingId = reservedInstancesListingId
self.clientToken = clientToken
self.tags = tags
self.updateDate = updateDate
self.reservedInstancesId = reservedInstancesId
self.createDate = createDate
self.statusMessage = statusMessage
self.instanceCounts = instanceCounts
  }
}


/**
<p>Contains the parameters for DeleteNetworkAcl.</p>
 */
public struct DeleteNetworkAclRequest: RestJsonSerializable {
/**
<p>The ID of the network ACL.</p>
 */
  public let networkAclId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["networkAclId"] = networkAclId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - networkAclId: <p>The ID of the network ACL.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(networkAclId: String, dryRun: Bool?) {
self.networkAclId = networkAclId
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for AllocateHosts.</p>
 */
public struct AllocateHostsRequest: RestJsonSerializable {
/**
<p>This is enabled by default. This property allows instances to be automatically placed onto available Dedicated Hosts, when you are launching instances without specifying a host ID.</p> <p>Default: Enabled</p>
 */
  public let autoPlacement: Autoplacement?
/**
<p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
 */
  public let clientToken: String?
/**
<p>Specify the instance type that you want your Dedicated Hosts to be configured for. When you specify the instance type, that is the only instance type that you can launch onto that host.</p>
 */
  public let instanceType: String
/**
<p>The Availability Zone for the Dedicated Hosts.</p>
 */
  public let availabilityZone: String
/**
<p>The number of Dedicated Hosts you want to allocate to your account with these parameters.</p>
 */
  public let quantity: Int

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if autoPlacement != nil { body["autoPlacement"] = autoPlacement! }
    if clientToken != nil { body["clientToken"] = clientToken! }
    body["instanceType"] = instanceType
    body["availabilityZone"] = availabilityZone
    body["quantity"] = quantity
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - autoPlacement: <p>This is enabled by default. This property allows instances to be automatically placed onto available Dedicated Hosts, when you are launching instances without specifying a host ID.</p> <p>Default: Enabled</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
      - instanceType: <p>Specify the instance type that you want your Dedicated Hosts to be configured for. When you specify the instance type, that is the only instance type that you can launch onto that host.</p>
      - availabilityZone: <p>The Availability Zone for the Dedicated Hosts.</p>
      - quantity: <p>The number of Dedicated Hosts you want to allocate to your account with these parameters.</p>
 */
  public init(autoPlacement: Autoplacement?, clientToken: String?, instanceType: String, availabilityZone: String, quantity: Int) {
self.autoPlacement = autoPlacement
self.clientToken = clientToken
self.instanceType = instanceType
self.availabilityZone = availabilityZone
self.quantity = quantity
  }
}

/**
<p>Contains the parameters for DescribeVpcEndpointServices.</p>
 */
public struct DescribeVpcEndpointServicesRequest: RestJsonSerializable {
/**
<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
 */
  public let maxResults: Int?
/**
<p>The token for the next set of items to return. (You received this token from a prior call.)</p>
 */
  public let nextToken: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if maxResults != nil { body["MaxResults"] = maxResults! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - maxResults: <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      - nextToken: <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(maxResults: Int?, nextToken: String?, dryRun: Bool?) {
self.maxResults = maxResults
self.nextToken = nextToken
self.dryRun = dryRun
  }
}

/**
<p>The ID of the prefix.</p>
 */
public struct PrefixListId: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the prefix.</p>
 */
  public let prefixListId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if prefixListId != nil { body["prefixListId"] = prefixListId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PrefixListId {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PrefixListId(
        prefixListId: jsonDict["prefixListId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - prefixListId: <p>The ID of the prefix.</p>
 */
  public init(prefixListId: String?) {
self.prefixListId = prefixListId
  }
}

/**
<p>Contains the parameters for DeletePlacementGroup.</p>
 */
public struct DeletePlacementGroupRequest: RestJsonSerializable {
/**
<p>The name of the placement group.</p>
 */
  public let groupName: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["groupName"] = groupName
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - groupName: <p>The name of the placement group.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(groupName: String, dryRun: Bool?) {
self.groupName = groupName
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of BundleInstance.</p>
 */
public struct BundleInstanceResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the bundle task.</p>
 */
  public let bundleTask: BundleTask?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if bundleTask != nil { body["bundleInstanceTask"] = bundleTask! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> BundleInstanceResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return BundleInstanceResult(
        bundleTask: jsonDict["bundleInstanceTask"].flatMap { ($0 is NSNull) ? nil : BundleTask.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - bundleTask: <p>Information about the bundle task.</p>
 */
  public init(bundleTask: BundleTask?) {
self.bundleTask = bundleTask
  }
}

/**
<p>The VPC peering connection options.</p>
 */
public struct PeeringConnectionOptionsRequest: RestJsonSerializable {
/**
<p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC via ClassicLink.</p>
 */
  public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
/**
<p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
 */
  public let allowDnsResolutionFromRemoteVpc: Bool?
/**
<p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC via ClassicLink to instances in a peer VPC.</p>
 */
  public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if allowEgressFromLocalVpcToRemoteClassicLink != nil { body["AllowEgressFromLocalVpcToRemoteClassicLink"] = allowEgressFromLocalVpcToRemoteClassicLink! }
    if allowDnsResolutionFromRemoteVpc != nil { body["AllowDnsResolutionFromRemoteVpc"] = allowDnsResolutionFromRemoteVpc! }
    if allowEgressFromLocalClassicLinkToRemoteVpc != nil { body["AllowEgressFromLocalClassicLinkToRemoteVpc"] = allowEgressFromLocalClassicLinkToRemoteVpc! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - allowEgressFromLocalVpcToRemoteClassicLink: <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC via ClassicLink.</p>
      - allowDnsResolutionFromRemoteVpc: <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
      - allowEgressFromLocalClassicLinkToRemoteVpc: <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC via ClassicLink to instances in a peer VPC.</p>
 */
  public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool?, allowDnsResolutionFromRemoteVpc: Bool?, allowEgressFromLocalClassicLinkToRemoteVpc: Bool?) {
self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
  }
}

/**
<p>Describes a value of an account attribute.</p>
 */
public struct AccountAttributeValue: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The value of the attribute.</p>
 */
  public let attributeValue: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attributeValue != nil { body["attributeValue"] = attributeValue! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AccountAttributeValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AccountAttributeValue(
        attributeValue: jsonDict["attributeValue"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - attributeValue: <p>The value of the attribute.</p>
 */
  public init(attributeValue: String?) {
self.attributeValue = attributeValue
  }
}

/**
<p>Contains the parameters for PurchaseScheduledInstances.</p>
 */
public struct PurchaseScheduledInstancesRequest: RestJsonSerializable {
/**
<p>One or more purchase requests.</p>
 */
  public let purchaseRequests: [PurchaseRequest]
/**
<p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["PurchaseRequest"] = purchaseRequests
    if clientToken != nil { body["ClientToken"] = clientToken! }
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - purchaseRequests: <p>One or more purchase requests.</p>
      - clientToken: <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(purchaseRequests: [PurchaseRequest], clientToken: String?, dryRun: Bool?) {
self.purchaseRequests = purchaseRequests
self.clientToken = clientToken
self.dryRun = dryRun
  }
}

public struct DescribeHostReservationOfferingsRequest: RestJsonSerializable {
/**
<p>This is the maximum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.</p>
 */
  public let maxDuration: Int?
/**
<p>This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.</p>
 */
  public let minDuration: Int?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family of the offering (e.g., <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>No Upfront</code> | <code>Partial Upfront</code> | <code>All Upfront</code>).</p> </li> </ul>
 */
  public let filter: [Filter]?
/**
<p>The token to use to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The ID of the reservation offering.</p>
 */
  public let offeringId: String?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500; if <code>maxResults</code> is given a larger value than 500, you will receive an error.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if maxDuration != nil { body["MaxDuration"] = maxDuration! }
    if minDuration != nil { body["MinDuration"] = minDuration! }
    if filter != nil { body["Filter"] = filter! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if offeringId != nil { body["OfferingId"] = offeringId! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - maxDuration: <p>This is the maximum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.</p>
      - minDuration: <p>This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.</p>
      - filter: <p>One or more filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family of the offering (e.g., <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>No Upfront</code> | <code>Partial Upfront</code> | <code>All Upfront</code>).</p> </li> </ul>
      - nextToken: <p>The token to use to retrieve the next page of results.</p>
      - offeringId: <p>The ID of the reservation offering.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500; if <code>maxResults</code> is given a larger value than 500, you will receive an error.</p>
 */
  public init(maxDuration: Int?, minDuration: Int?, filter: [Filter]?, nextToken: String?, offeringId: String?, maxResults: Int?) {
self.maxDuration = maxDuration
self.minDuration = minDuration
self.filter = filter
self.nextToken = nextToken
self.offeringId = offeringId
self.maxResults = maxResults
  }
}

/**
<p>Contains the output of StopInstances.</p>
 */
public struct StopInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more stopped instances.</p>
 */
  public let stoppingInstances: [InstanceStateChange]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if stoppingInstances != nil { body["instancesSet"] = stoppingInstances! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> StopInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return StopInstancesResult(
        stoppingInstances: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [InstanceStateChange].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - stoppingInstances: <p>Information about one or more stopped instances.</p>
 */
  public init(stoppingInstances: [InstanceStateChange]?) {
self.stoppingInstances = stoppingInstances
  }
}


/**
<p>Contains the parameters for DescribeScheduledInstanceAvailability.</p>
 */
public struct DescribeScheduledInstanceAvailabilityRequest: RestJsonSerializable {
/**
<p>The time period for the first schedule to start.</p>
 */
  public let firstSlotStartTimeRange: SlotDateTimeRangeRequest
/**
<p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?
/**
<p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.</p>
 */
  public let maxSlotDurationInHours: Int?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>The token for the next set of results.</p>
 */
  public let nextToken: String?
/**
<p>The schedule recurrence.</p>
 */
  public let recurrence: ScheduledInstanceRecurrenceRequest
/**
<p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
 */
  public let minSlotDurationInHours: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["FirstSlotStartTimeRange"] = firstSlotStartTimeRange
    if maxResults != nil { body["MaxResults"] = maxResults! }
    if maxSlotDurationInHours != nil { body["MaxSlotDurationInHours"] = maxSlotDurationInHours! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if filters != nil { body["Filter"] = filters! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    body["Recurrence"] = recurrence
    if minSlotDurationInHours != nil { body["MinSlotDurationInHours"] = minSlotDurationInHours! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - firstSlotStartTimeRange: <p>The time period for the first schedule to start.</p>
      - maxResults: <p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
      - maxSlotDurationInHours: <p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
      - nextToken: <p>The token for the next set of results.</p>
      - recurrence: <p>The schedule recurrence.</p>
      - minSlotDurationInHours: <p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
 */
  public init(firstSlotStartTimeRange: SlotDateTimeRangeRequest, maxResults: Int?, maxSlotDurationInHours: Int?, dryRun: Bool?, filters: [Filter]?, nextToken: String?, recurrence: ScheduledInstanceRecurrenceRequest, minSlotDurationInHours: Int?) {
self.firstSlotStartTimeRange = firstSlotStartTimeRange
self.maxResults = maxResults
self.maxSlotDurationInHours = maxSlotDurationInHours
self.dryRun = dryRun
self.filters = filters
self.nextToken = nextToken
self.recurrence = recurrence
self.minSlotDurationInHours = minSlotDurationInHours
  }
}

/**
<p>Describes the modification request/s.</p>
 */
public struct ReservedInstancesModificationResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.</p>
 */
  public let reservedInstancesId: String?
/**
<p>The target Reserved Instances configurations supplied as part of the modification request.</p>
 */
  public let targetConfiguration: ReservedInstancesConfiguration?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesId != nil { body["reservedInstancesId"] = reservedInstancesId! }
    if targetConfiguration != nil { body["targetConfiguration"] = targetConfiguration! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstancesModificationResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstancesModificationResult(
        reservedInstancesId: jsonDict["reservedInstancesId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      targetConfiguration: jsonDict["targetConfiguration"].flatMap { ($0 is NSNull) ? nil : ReservedInstancesConfiguration.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesId: <p>The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.</p>
      - targetConfiguration: <p>The target Reserved Instances configurations supplied as part of the modification request.</p>
 */
  public init(reservedInstancesId: String?, targetConfiguration: ReservedInstancesConfiguration?) {
self.reservedInstancesId = reservedInstancesId
self.targetConfiguration = targetConfiguration
  }
}

/**
<p>Contains the output of EnableVpcClassicLinkDnsSupport.</p>
 */
public struct EnableVpcClassicLinkDnsSupportResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> EnableVpcClassicLinkDnsSupportResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return EnableVpcClassicLinkDnsSupportResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}


/**
<p>Contains the parameters for ImportVolume.</p>
 */
public struct ImportVolumeRequest: RestJsonSerializable {
/**
<p>The disk image.</p>
 */
  public let image: DiskImageDetail
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The volume size.</p>
 */
  public let volume: VolumeDetail
/**
<p>The Availability Zone for the resulting EBS volume.</p>
 */
  public let availabilityZone: String
/**
<p>A description of the volume.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["image"] = image
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["volume"] = volume
    body["availabilityZone"] = availabilityZone
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - image: <p>The disk image.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - volume: <p>The volume size.</p>
      - availabilityZone: <p>The Availability Zone for the resulting EBS volume.</p>
      - description: <p>A description of the volume.</p>
 */
  public init(image: DiskImageDetail, dryRun: Bool?, volume: VolumeDetail, availabilityZone: String, description: String?) {
self.image = image
self.dryRun = dryRun
self.volume = volume
self.availabilityZone = availabilityZone
self.description = description
  }
}

enum Volumeattachmentstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `attaching` = "attaching"
  case `attached` = "attached"
  case `detaching` = "detaching"
  case `detached` = "detached"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volumeattachmentstate {
    guard case let .json(json) = body else { fatalError() }
    return Volumeattachmentstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Eventtype: String, RestJsonDeserializable, RestJsonSerializable {
  case `instanceChange` = "instanceChange"
  case `fleetRequestChange` = "fleetRequestChange"
  case `error` = "error"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Eventtype {
    guard case let .json(json) = body else { fatalError() }
    return Eventtype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DescribeAddresses.</p>
 */
public struct DescribeAddressesRequest: RestJsonSerializable {
/**
<p>[EC2-Classic] One or more Elastic IP addresses.</p> <p>Default: Describes all your Elastic IP addresses.</p>
 */
  public let publicIps: [String]?
/**
<p>[EC2-VPC] One or more allocation IDs.</p> <p>Default: Describes all your Elastic IP addresses.</p>
 */
  public let allocationIds: [String]?
/**
<p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p> </li> <li> <p> <code>association-id</code> - [EC2-VPC] The association ID for the address.</p> </li> <li> <p> <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-owner-id</code> - The AWS account ID of the owner.</p> </li> <li> <p> <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p> </li> <li> <p> <code>public-ip</code> - The Elastic IP address.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if publicIps != nil { body["PublicIp"] = publicIps! }
    if allocationIds != nil { body["AllocationId"] = allocationIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - publicIps: <p>[EC2-Classic] One or more Elastic IP addresses.</p> <p>Default: Describes all your Elastic IP addresses.</p>
      - allocationIds: <p>[EC2-VPC] One or more allocation IDs.</p> <p>Default: Describes all your Elastic IP addresses.</p>
      - filters: <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p> </li> <li> <p> <code>association-id</code> - [EC2-VPC] The association ID for the address.</p> </li> <li> <p> <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-owner-id</code> - The AWS account ID of the owner.</p> </li> <li> <p> <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p> </li> <li> <p> <code>public-ip</code> - The Elastic IP address.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(publicIps: [String]?, allocationIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.publicIps = publicIps
self.allocationIds = allocationIds
self.filters = filters
self.dryRun = dryRun
  }
}


/**
<p>Describes a security group</p>
 */
public struct SecurityGroup: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A description of the security group.</p>
 */
  public let description: String?
/**
<p>The name of the security group.</p>
 */
  public let groupName: String?
/**
<p>[EC2-VPC] The ID of the VPC for the security group.</p>
 */
  public let vpcId: String?
/**
<p>One or more inbound rules associated with the security group.</p>
 */
  public let ipPermissions: [IpPermission]?
/**
<p>Any tags assigned to the security group.</p>
 */
  public let tags: [Tag]?
/**
<p>The AWS account ID of the owner of the security group.</p>
 */
  public let ownerId: String?
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String?
/**
<p>[EC2-VPC] One or more outbound rules associated with the security group.</p>
 */
  public let ipPermissionsEgress: [IpPermission]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if description != nil { body["groupDescription"] = description! }
    if groupName != nil { body["groupName"] = groupName! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if ipPermissions != nil { body["ipPermissions"] = ipPermissions! }
    if tags != nil { body["tagSet"] = tags! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if groupId != nil { body["groupId"] = groupId! }
    if ipPermissionsEgress != nil { body["ipPermissionsEgress"] = ipPermissionsEgress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SecurityGroup {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SecurityGroup(
        description: jsonDict["groupDescription"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ipPermissions: jsonDict["ipPermissions"].flatMap { ($0 is NSNull) ? nil : [IpPermission].deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupId: jsonDict["groupId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ipPermissionsEgress: jsonDict["ipPermissionsEgress"].flatMap { ($0 is NSNull) ? nil : [IpPermission].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - description: <p>A description of the security group.</p>
      - groupName: <p>The name of the security group.</p>
      - vpcId: <p>[EC2-VPC] The ID of the VPC for the security group.</p>
      - ipPermissions: <p>One or more inbound rules associated with the security group.</p>
      - tags: <p>Any tags assigned to the security group.</p>
      - ownerId: <p>The AWS account ID of the owner of the security group.</p>
      - groupId: <p>The ID of the security group.</p>
      - ipPermissionsEgress: <p>[EC2-VPC] One or more outbound rules associated with the security group.</p>
 */
  public init(description: String?, groupName: String?, vpcId: String?, ipPermissions: [IpPermission]?, tags: [Tag]?, ownerId: String?, groupId: String?, ipPermissionsEgress: [IpPermission]?) {
self.description = description
self.groupName = groupName
self.vpcId = vpcId
self.ipPermissions = ipPermissions
self.tags = tags
self.ownerId = ownerId
self.groupId = groupId
self.ipPermissionsEgress = ipPermissionsEgress
  }
}

/**
<p>Contains the output of DescribeAccountAttributes.</p>
 */
public struct DescribeAccountAttributesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more account attributes.</p>
 */
  public let accountAttributes: [AccountAttribute]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if accountAttributes != nil { body["accountAttributeSet"] = accountAttributes! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeAccountAttributesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeAccountAttributesResult(
        accountAttributes: jsonDict["accountAttributeSet"].flatMap { ($0 is NSNull) ? nil : [AccountAttribute].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - accountAttributes: <p>Information about one or more account attributes.</p>
 */
  public init(accountAttributes: [AccountAttribute]?) {
self.accountAttributes = accountAttributes
  }
}

/**
<p>Contains the parameters for ReplaceRoute.</p>
 */
public struct ReplaceRouteRequest: RestJsonSerializable {
/**
<p>The ID of a NAT gateway.</p>
 */
  public let natGatewayId: String?
/**
<p>The ID of a network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The ID of a NAT instance in your VPC.</p>
 */
  public let instanceId: String?
/**
<p>The ID of a VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String?
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The CIDR address block used for the destination match. The value you provide must match the CIDR of an existing route in the table.</p>
 */
  public let destinationCidrBlock: String
/**
<p>The ID of an Internet gateway or virtual private gateway.</p>
 */
  public let gatewayId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if natGatewayId != nil { body["natGatewayId"] = natGatewayId! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
    body["routeTableId"] = routeTableId
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["destinationCidrBlock"] = destinationCidrBlock
    if gatewayId != nil { body["gatewayId"] = gatewayId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - natGatewayId: <p>The ID of a NAT gateway.</p>
      - networkInterfaceId: <p>The ID of a network interface.</p>
      - instanceId: <p>The ID of a NAT instance in your VPC.</p>
      - vpcPeeringConnectionId: <p>The ID of a VPC peering connection.</p>
      - routeTableId: <p>The ID of the route table.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - destinationCidrBlock: <p>The CIDR address block used for the destination match. The value you provide must match the CIDR of an existing route in the table.</p>
      - gatewayId: <p>The ID of an Internet gateway or virtual private gateway.</p>
 */
  public init(natGatewayId: String?, networkInterfaceId: String?, instanceId: String?, vpcPeeringConnectionId: String?, routeTableId: String, dryRun: Bool?, destinationCidrBlock: String, gatewayId: String?) {
self.natGatewayId = natGatewayId
self.networkInterfaceId = networkInterfaceId
self.instanceId = instanceId
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.routeTableId = routeTableId
self.dryRun = dryRun
self.destinationCidrBlock = destinationCidrBlock
self.gatewayId = gatewayId
  }
}

/**
<p>Contains the parameters for CreateRoute.</p>
 */
public struct CreateRouteRequest: RestJsonSerializable {
/**
<p>The ID of a NAT gateway.</p>
 */
  public let natGatewayId: String?
/**
<p>The ID of a network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
 */
  public let instanceId: String?
/**
<p>The ID of a VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String?
/**
<p>The ID of the route table for the route.</p>
 */
  public let routeTableId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The CIDR address block used for the destination match. Routing decisions are based on the most specific match.</p>
 */
  public let destinationCidrBlock: String
/**
<p>The ID of an Internet gateway or virtual private gateway attached to your VPC.</p>
 */
  public let gatewayId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if natGatewayId != nil { body["natGatewayId"] = natGatewayId! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
    body["routeTableId"] = routeTableId
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["destinationCidrBlock"] = destinationCidrBlock
    if gatewayId != nil { body["gatewayId"] = gatewayId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - natGatewayId: <p>The ID of a NAT gateway.</p>
      - networkInterfaceId: <p>The ID of a network interface.</p>
      - instanceId: <p>The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
      - vpcPeeringConnectionId: <p>The ID of a VPC peering connection.</p>
      - routeTableId: <p>The ID of the route table for the route.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - destinationCidrBlock: <p>The CIDR address block used for the destination match. Routing decisions are based on the most specific match.</p>
      - gatewayId: <p>The ID of an Internet gateway or virtual private gateway attached to your VPC.</p>
 */
  public init(natGatewayId: String?, networkInterfaceId: String?, instanceId: String?, vpcPeeringConnectionId: String?, routeTableId: String, dryRun: Bool?, destinationCidrBlock: String, gatewayId: String?) {
self.natGatewayId = natGatewayId
self.networkInterfaceId = networkInterfaceId
self.instanceId = instanceId
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.routeTableId = routeTableId
self.dryRun = dryRun
self.destinationCidrBlock = destinationCidrBlock
self.gatewayId = gatewayId
  }
}


/**
<p>Contains the parameters for DeleteVpnConnectionRoute.</p>
 */
public struct DeleteVpnConnectionRouteRequest: RestJsonSerializable {
/**
<p>The ID of the VPN connection.</p>
 */
  public let vpnConnectionId: String
/**
<p>The CIDR block associated with the local subnet of the customer network.</p>
 */
  public let destinationCidrBlock: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpnConnectionId"] = vpnConnectionId
    body["DestinationCidrBlock"] = destinationCidrBlock
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpnConnectionId: <p>The ID of the VPN connection.</p>
      - destinationCidrBlock: <p>The CIDR block associated with the local subnet of the customer network.</p>
 */
  public init(vpnConnectionId: String, destinationCidrBlock: String) {
self.vpnConnectionId = vpnConnectionId
self.destinationCidrBlock = destinationCidrBlock
  }
}

/**
<p>Describes a key pair.</p>
 */
public struct KeyPairInfo: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String?
/**
<p>If you used <a>CreateKeyPair</a> to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used <a>ImportKeyPair</a> to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p>
 */
  public let keyFingerprint: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if keyName != nil { body["keyName"] = keyName! }
    if keyFingerprint != nil { body["keyFingerprint"] = keyFingerprint! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> KeyPairInfo {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return KeyPairInfo(
        keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      keyFingerprint: jsonDict["keyFingerprint"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - keyName: <p>The name of the key pair.</p>
      - keyFingerprint: <p>If you used <a>CreateKeyPair</a> to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used <a>ImportKeyPair</a> to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p>
 */
  public init(keyName: String?, keyFingerprint: String?) {
self.keyName = keyName
self.keyFingerprint = keyFingerprint
  }
}

/**
<p>Describes volume attachment details.</p>
 */
public struct VolumeAttachment: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The time stamp when the attachment initiated.</p>
 */
  public let attachTime: Date?
/**
<p>Indicates whether the EBS volume is deleted on instance termination.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The device name.</p>
 */
  public let device: String?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String?
/**
<p>The attachment state of the volume.</p>
 */
  public let state: Volumeattachmentstate?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attachTime != nil { body["attachTime"] = attachTime! }
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if device != nil { body["device"] = device! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if volumeId != nil { body["volumeId"] = volumeId! }
    if state != nil { body["status"] = state! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeAttachment {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeAttachment(
        attachTime: jsonDict["attachTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      device: jsonDict["device"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Volumeattachmentstate.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - attachTime: <p>The time stamp when the attachment initiated.</p>
      - deleteOnTermination: <p>Indicates whether the EBS volume is deleted on instance termination.</p>
      - device: <p>The device name.</p>
      - instanceId: <p>The ID of the instance.</p>
      - volumeId: <p>The ID of the volume.</p>
      - state: <p>The attachment state of the volume.</p>
 */
  public init(attachTime: Date?, deleteOnTermination: Bool?, device: String?, instanceId: String?, volumeId: String?, state: Volumeattachmentstate?) {
self.attachTime = attachTime
self.deleteOnTermination = deleteOnTermination
self.device = device
self.instanceId = instanceId
self.volumeId = volumeId
self.state = state
  }
}


/**
<p>Contains the parameters for CreateNatGateway.</p>
 */
public struct CreateNatGatewayRequest: RestJsonSerializable {
/**
<p>The subnet in which to create the NAT gateway.</p>
 */
  public let subnetId: String
/**
<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
 */
  public let clientToken: String?
/**
<p>The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.</p>
 */
  public let allocationId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["SubnetId"] = subnetId
    if clientToken != nil { body["ClientToken"] = clientToken! }
    body["AllocationId"] = allocationId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - subnetId: <p>The subnet in which to create the NAT gateway.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
      - allocationId: <p>The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.</p>
 */
  public init(subnetId: String, clientToken: String?, allocationId: String) {
self.subnetId = subnetId
self.clientToken = clientToken
self.allocationId = allocationId
  }
}

/**
<p>Describes an import snapshot task.</p>
 */
public struct ImportSnapshotTask: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the import snapshot task.</p>
 */
  public let importTaskId: String?
/**
<p>Describes an import snapshot task.</p>
 */
  public let snapshotTaskDetail: SnapshotTaskDetail?
/**
<p>A description of the import snapshot task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if importTaskId != nil { body["importTaskId"] = importTaskId! }
    if snapshotTaskDetail != nil { body["snapshotTaskDetail"] = snapshotTaskDetail! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportSnapshotTask {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportSnapshotTask(
        importTaskId: jsonDict["importTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotTaskDetail: jsonDict["snapshotTaskDetail"].flatMap { ($0 is NSNull) ? nil : SnapshotTaskDetail.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - importTaskId: <p>The ID of the import snapshot task.</p>
      - snapshotTaskDetail: <p>Describes an import snapshot task.</p>
      - description: <p>A description of the import snapshot task.</p>
 */
  public init(importTaskId: String?, snapshotTaskDetail: SnapshotTaskDetail?, description: String?) {
self.importTaskId = importTaskId
self.snapshotTaskDetail = snapshotTaskDetail
self.description = description
  }
}

/**
<p>Contains the output of AttachVpnGateway.</p>
 */
public struct AttachVpnGatewayResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the attachment.</p>
 */
  public let vpcAttachment: VpcAttachment?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcAttachment != nil { body["attachment"] = vpcAttachment! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AttachVpnGatewayResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AttachVpnGatewayResult(
        vpcAttachment: jsonDict["attachment"].flatMap { ($0 is NSNull) ? nil : VpcAttachment.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcAttachment: <p>Information about the attachment.</p>
 */
  public init(vpcAttachment: VpcAttachment?) {
self.vpcAttachment = vpcAttachment
  }
}

/**
<p>Contains the parameters for RequestSpotInstances.</p>
 */
public struct RequestSpotInstancesRequest: RestJsonSerializable {
/**
<p>The Spot instance request type.</p> <p>Default: <code>one-time</code> </p>
 */
  public let ec2Type: Spotinstancetype?
/**
<p>The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p> <p>Default: The request is effective indefinitely.</p>
 */
  public let validUntil: Date?
/**
<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let clientToken: String?
/**
<p>The maximum number of Spot instances to launch.</p> <p>Default: 1</p>
 */
  public let instanceCount: Int?
/**
<p>The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.</p> <p>Default: The request is effective indefinitely.</p>
 */
  public let validFrom: Date?
/**
<p>The maximum hourly price (bid) for any Spot instance launched to fulfill the request.</p>
 */
  public let spotPrice: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The instance launch group. Launch groups are Spot instances that launch together and terminate together.</p> <p>Default: Instances are launched and terminated individually</p>
 */
  public let launchGroup: String?
/**
<p>The required duration for the Spot instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p> <p>The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.</p> <p>Note that you can't specify an Availability Zone group or a launch group if you specify a duration.</p>
 */
  public let blockDurationMinutes: Int?
/**
<p>The user-specified name for a logical grouping of bids.</p> <p>When you specify an Availability Zone group in a Spot Instance request, all Spot instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to bids for Spot Instances of the same instance type. Any additional Spot instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active.</p> <p>If there is no active instance running in the Availability Zone group that you specify for a new Spot instance request (all instances are terminated, the bid is expired, or the bid falls below current market), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group.</p> <p>Default: Instances are launched in any available Availability Zone.</p>
 */
  public let availabilityZoneGroup: String?
/**

 */
  public let launchSpecification: RequestSpotLaunchSpecification?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Type != nil { body["type"] = ec2Type! }
    if validUntil != nil { body["validUntil"] = validUntil! }
    if clientToken != nil { body["clientToken"] = clientToken! }
    if instanceCount != nil { body["instanceCount"] = instanceCount! }
    if validFrom != nil { body["validFrom"] = validFrom! }
    body["spotPrice"] = spotPrice
    if dryRun != nil { body["dryRun"] = dryRun! }
    if launchGroup != nil { body["launchGroup"] = launchGroup! }
    if blockDurationMinutes != nil { body["blockDurationMinutes"] = blockDurationMinutes! }
    if availabilityZoneGroup != nil { body["availabilityZoneGroup"] = availabilityZoneGroup! }
    if launchSpecification != nil { body["LaunchSpecification"] = launchSpecification! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - ec2Type: <p>The Spot instance request type.</p> <p>Default: <code>one-time</code> </p>
      - validUntil: <p>The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p> <p>Default: The request is effective indefinitely.</p>
      - clientToken: <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - instanceCount: <p>The maximum number of Spot instances to launch.</p> <p>Default: 1</p>
      - validFrom: <p>The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.</p> <p>Default: The request is effective indefinitely.</p>
      - spotPrice: <p>The maximum hourly price (bid) for any Spot instance launched to fulfill the request.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - launchGroup: <p>The instance launch group. Launch groups are Spot instances that launch together and terminate together.</p> <p>Default: Instances are launched and terminated individually</p>
      - blockDurationMinutes: <p>The required duration for the Spot instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p> <p>The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.</p> <p>Note that you can't specify an Availability Zone group or a launch group if you specify a duration.</p>
      - availabilityZoneGroup: <p>The user-specified name for a logical grouping of bids.</p> <p>When you specify an Availability Zone group in a Spot Instance request, all Spot instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to bids for Spot Instances of the same instance type. Any additional Spot instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active.</p> <p>If there is no active instance running in the Availability Zone group that you specify for a new Spot instance request (all instances are terminated, the bid is expired, or the bid falls below current market), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group.</p> <p>Default: Instances are launched in any available Availability Zone.</p>
      - launchSpecification: 
 */
  public init(ec2Type: Spotinstancetype?, validUntil: Date?, clientToken: String?, instanceCount: Int?, validFrom: Date?, spotPrice: String, dryRun: Bool?, launchGroup: String?, blockDurationMinutes: Int?, availabilityZoneGroup: String?, launchSpecification: RequestSpotLaunchSpecification?) {
self.ec2Type = ec2Type
self.validUntil = validUntil
self.clientToken = clientToken
self.instanceCount = instanceCount
self.validFrom = validFrom
self.spotPrice = spotPrice
self.dryRun = dryRun
self.launchGroup = launchGroup
self.blockDurationMinutes = blockDurationMinutes
self.availabilityZoneGroup = availabilityZoneGroup
self.launchSpecification = launchSpecification
  }
}

/**
<p>Details about the Dedicated Host Reservation offering.</p>
 */
public struct HostOffering: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The upfront price of the offering. Does not apply to No Upfront offerings.</p>
 */
  public let upfrontPrice: String?
/**
<p>The available payment option.</p>
 */
  public let paymentOption: Paymentoption?
/**
<p>The ID of the offering.</p>
 */
  public let offeringId: String?
/**
<p>The hourly price of the offering.</p>
 */
  public let hourlyPrice: String?
/**
<p>The currency of the offering.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The duration of the offering (in seconds).</p>
 */
  public let duration: Int?
/**
<p>The instance family of the offering.</p>
 */
  public let instanceFamily: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if upfrontPrice != nil { body["upfrontPrice"] = upfrontPrice! }
    if paymentOption != nil { body["paymentOption"] = paymentOption! }
    if offeringId != nil { body["offeringId"] = offeringId! }
    if hourlyPrice != nil { body["hourlyPrice"] = hourlyPrice! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if duration != nil { body["duration"] = duration! }
    if instanceFamily != nil { body["instanceFamily"] = instanceFamily! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> HostOffering {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return HostOffering(
        upfrontPrice: jsonDict["upfrontPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      paymentOption: jsonDict["paymentOption"].flatMap { ($0 is NSNull) ? nil : Paymentoption.deserialize(response: response, body: .json($0)) },
      offeringId: jsonDict["offeringId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      hourlyPrice: jsonDict["hourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      duration: jsonDict["duration"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      instanceFamily: jsonDict["instanceFamily"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - upfrontPrice: <p>The upfront price of the offering. Does not apply to No Upfront offerings.</p>
      - paymentOption: <p>The available payment option.</p>
      - offeringId: <p>The ID of the offering.</p>
      - hourlyPrice: <p>The hourly price of the offering.</p>
      - currencyCode: <p>The currency of the offering.</p>
      - duration: <p>The duration of the offering (in seconds).</p>
      - instanceFamily: <p>The instance family of the offering.</p>
 */
  public init(upfrontPrice: String?, paymentOption: Paymentoption?, offeringId: String?, hourlyPrice: String?, currencyCode: Currencycodevalues?, duration: Int?, instanceFamily: String?) {
self.upfrontPrice = upfrontPrice
self.paymentOption = paymentOption
self.offeringId = offeringId
self.hourlyPrice = hourlyPrice
self.currencyCode = currencyCode
self.duration = duration
self.instanceFamily = instanceFamily
  }
}

/**
<p>Contains the parameters for DescribeImages.</p>
 */
public struct DescribeImagesRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>architecture</code> - The image architecture (<code>i386</code> | <code>x86_64</code>).</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name for the EBS volume (for example, <code>/dev/sdh</code>).</p> </li> <li> <p> <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the EBS volume.</p> </li> <li> <p> <code>block-device-mapping.volume-size</code> - The volume size of the EBS volume, in GiB.</p> </li> <li> <p> <code>block-device-mapping.volume-type</code> - The volume type of the EBS volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>| <code>sc1</code> | <code>standard</code>).</p> </li> <li> <p> <code>description</code> - The description of the image (provided during image creation).</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>image-id</code> - The ID of the image.</p> </li> <li> <p> <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> | <code>ramdisk</code>).</p> </li> <li> <p> <code>is-public</code> - A Boolean that indicates whether the image is public.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>manifest-location</code> - The location of the image manifest.</p> </li> <li> <p> <code>name</code> - The name of the AMI (provided during image creation).</p> </li> <li> <p> <code>owner-alias</code> - String value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the image owner.</p> </li> <li> <p> <code>platform</code> - The platform. To only list Windows-based AMIs, use <code>windows</code>.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>product-code.type</code> - The type of the product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>root-device-name</code> - The name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>state</code> - The state of the image (<code>available</code> | <code>pending</code> | <code>failed</code>).</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - The message for the state change.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> | <code>hvm</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Scopes the images by users with explicit launch permissions. Specify an AWS account ID, <code>self</code> (the sender of the request), or <code>all</code> (public AMIs).</p>
 */
  public let executableUsers: [String]?
/**
<p>One or more image IDs.</p> <p>Default: Describes all images available to you.</p>
 */
  public let imageIds: [String]?
/**
<p>Filters the images by the owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>). Omitting this option returns all images for which you have launch permissions, regardless of ownership.</p>
 */
  public let owners: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if executableUsers != nil { body["ExecutableBy"] = executableUsers! }
    if imageIds != nil { body["ImageId"] = imageIds! }
    if owners != nil { body["Owner"] = owners! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>architecture</code> - The image architecture (<code>i386</code> | <code>x86_64</code>).</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name for the EBS volume (for example, <code>/dev/sdh</code>).</p> </li> <li> <p> <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the EBS volume.</p> </li> <li> <p> <code>block-device-mapping.volume-size</code> - The volume size of the EBS volume, in GiB.</p> </li> <li> <p> <code>block-device-mapping.volume-type</code> - The volume type of the EBS volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>| <code>sc1</code> | <code>standard</code>).</p> </li> <li> <p> <code>description</code> - The description of the image (provided during image creation).</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>image-id</code> - The ID of the image.</p> </li> <li> <p> <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> | <code>ramdisk</code>).</p> </li> <li> <p> <code>is-public</code> - A Boolean that indicates whether the image is public.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>manifest-location</code> - The location of the image manifest.</p> </li> <li> <p> <code>name</code> - The name of the AMI (provided during image creation).</p> </li> <li> <p> <code>owner-alias</code> - String value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the image owner.</p> </li> <li> <p> <code>platform</code> - The platform. To only list Windows-based AMIs, use <code>windows</code>.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>product-code.type</code> - The type of the product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>root-device-name</code> - The name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>state</code> - The state of the image (<code>available</code> | <code>pending</code> | <code>failed</code>).</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - The message for the state change.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> | <code>hvm</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - executableUsers: <p>Scopes the images by users with explicit launch permissions. Specify an AWS account ID, <code>self</code> (the sender of the request), or <code>all</code> (public AMIs).</p>
      - imageIds: <p>One or more image IDs.</p> <p>Default: Describes all images available to you.</p>
      - owners: <p>Filters the images by the owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>). Omitting this option returns all images for which you have launch permissions, regardless of ownership.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, executableUsers: [String]?, imageIds: [String]?, owners: [String]?) {
self.filters = filters
self.dryRun = dryRun
self.executableUsers = executableUsers
self.imageIds = imageIds
self.owners = owners
  }
}

/**
<p>Contains the parameters for DeleteRouteTable.</p>
 */
public struct DeleteRouteTableRequest: RestJsonSerializable {
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["routeTableId"] = routeTableId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - routeTableId: <p>The ID of the route table.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(routeTableId: String, dryRun: Bool?) {
self.routeTableId = routeTableId
self.dryRun = dryRun
  }
}

/**
<p>Describes a network interface.</p>
 */
public struct InstanceNetworkInterfaceSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The index of the device on the instance for the network interface attachment. If you are specifying a network interface in a <a>RunInstances</a> request, you must provide the device index.</p>
 */
  public let deviceIndex: Int?
/**
<p>The ID of the subnet associated with the network string. Applies only if creating a network interface when launching an instance.</p>
 */
  public let subnetId: String?
/**
<p>One or more private IP addresses to assign to the network interface. Only one private IP address can be designated as primary. You cannot specify this option if you're launching more than one instance in a <a>RunInstances</a> request.</p>
 */
  public let privateIpAddresses: [PrivateIpAddressSpecification]?
/**
<p>The private IP address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a <a>RunInstances</a> request.</p>
 */
  public let privateIpAddress: String?
/**
<p>Indicates whether to assign a public IP address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is <code>true</code>.</p>
 */
  public let associatePublicIpAddress: Bool?
/**
<p>The description of the network interface. Applies only if creating a network interface when launching an instance.</p>
 */
  public let description: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>If set to <code>true</code>, the interface is deleted when the instance is terminated. You can specify <code>true</code> only if creating a new network interface when launching an instance.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.</p>
 */
  public let groups: [String]?
/**
<p>The number of secondary private IP addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a <a>RunInstances</a> request.</p>
 */
  public let secondaryPrivateIpAddressCount: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deviceIndex != nil { body["deviceIndex"] = deviceIndex! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if privateIpAddresses != nil { body["privateIpAddressesSet"] = privateIpAddresses! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
    if associatePublicIpAddress != nil { body["associatePublicIpAddress"] = associatePublicIpAddress! }
    if description != nil { body["description"] = description! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if groups != nil { body["SecurityGroupId"] = groups! }
    if secondaryPrivateIpAddressCount != nil { body["secondaryPrivateIpAddressCount"] = secondaryPrivateIpAddressCount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceNetworkInterfaceSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceNetworkInterfaceSpecification(
        deviceIndex: jsonDict["deviceIndex"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      privateIpAddresses: jsonDict["privateIpAddressesSet"].flatMap { ($0 is NSNull) ? nil : [PrivateIpAddressSpecification].deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      associatePublicIpAddress: jsonDict["associatePublicIpAddress"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["SecurityGroupId"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      secondaryPrivateIpAddressCount: jsonDict["secondaryPrivateIpAddressCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deviceIndex: <p>The index of the device on the instance for the network interface attachment. If you are specifying a network interface in a <a>RunInstances</a> request, you must provide the device index.</p>
      - subnetId: <p>The ID of the subnet associated with the network string. Applies only if creating a network interface when launching an instance.</p>
      - privateIpAddresses: <p>One or more private IP addresses to assign to the network interface. Only one private IP address can be designated as primary. You cannot specify this option if you're launching more than one instance in a <a>RunInstances</a> request.</p>
      - privateIpAddress: <p>The private IP address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a <a>RunInstances</a> request.</p>
      - associatePublicIpAddress: <p>Indicates whether to assign a public IP address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is <code>true</code>.</p>
      - description: <p>The description of the network interface. Applies only if creating a network interface when launching an instance.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - deleteOnTermination: <p>If set to <code>true</code>, the interface is deleted when the instance is terminated. You can specify <code>true</code> only if creating a new network interface when launching an instance.</p>
      - groups: <p>The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.</p>
      - secondaryPrivateIpAddressCount: <p>The number of secondary private IP addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a <a>RunInstances</a> request.</p>
 */
  public init(deviceIndex: Int?, subnetId: String?, privateIpAddresses: [PrivateIpAddressSpecification]?, privateIpAddress: String?, associatePublicIpAddress: Bool?, description: String?, networkInterfaceId: String?, deleteOnTermination: Bool?, groups: [String]?, secondaryPrivateIpAddressCount: Int?) {
self.deviceIndex = deviceIndex
self.subnetId = subnetId
self.privateIpAddresses = privateIpAddresses
self.privateIpAddress = privateIpAddress
self.associatePublicIpAddress = associatePublicIpAddress
self.description = description
self.networkInterfaceId = networkInterfaceId
self.deleteOnTermination = deleteOnTermination
self.groups = groups
self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
  }
}

/**
<p>Describes the IP addresses and network interface associated with a NAT gateway.</p>
 */
public struct NatGatewayAddress: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the network interface associated with the NAT gateway.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The Elastic IP address associated with the NAT gateway.</p>
 */
  public let publicIp: String?
/**
<p>The private IP address associated with the Elastic IP address.</p>
 */
  public let privateIp: String?
/**
<p>The allocation ID of the Elastic IP address that's associated with the NAT gateway.</p>
 */
  public let allocationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if publicIp != nil { body["publicIp"] = publicIp! }
    if privateIp != nil { body["privateIp"] = privateIp! }
    if allocationId != nil { body["allocationId"] = allocationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NatGatewayAddress {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NatGatewayAddress(
        networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      privateIp: jsonDict["privateIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      allocationId: jsonDict["allocationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - networkInterfaceId: <p>The ID of the network interface associated with the NAT gateway.</p>
      - publicIp: <p>The Elastic IP address associated with the NAT gateway.</p>
      - privateIp: <p>The private IP address associated with the Elastic IP address.</p>
      - allocationId: <p>The allocation ID of the Elastic IP address that's associated with the NAT gateway.</p>
 */
  public init(networkInterfaceId: String?, publicIp: String?, privateIp: String?, allocationId: String?) {
self.networkInterfaceId = networkInterfaceId
self.publicIp = publicIp
self.privateIp = privateIp
self.allocationId = allocationId
  }
}

/**
<p>Contains the output of DescribeNetworkInterfaceAttribute.</p>
 */
public struct DescribeNetworkInterfaceAttributeResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether source/destination checking is enabled.</p>
 */
  public let sourceDestCheck: AttributeBooleanValue?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The attachment (if any) of the network interface.</p>
 */
  public let attachment: NetworkInterfaceAttachment?
/**
<p>The security groups associated with the network interface.</p>
 */
  public let groups: [GroupIdentifier]?
/**
<p>The description of the network interface.</p>
 */
  public let description: AttributeValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if attachment != nil { body["attachment"] = attachment! }
    if groups != nil { body["groupSet"] = groups! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeNetworkInterfaceAttributeResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeNetworkInterfaceAttributeResult(
        sourceDestCheck: jsonDict["sourceDestCheck"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      attachment: jsonDict["attachment"].flatMap { ($0 is NSNull) ? nil : NetworkInterfaceAttachment.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - sourceDestCheck: <p>Indicates whether source/destination checking is enabled.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - attachment: <p>The attachment (if any) of the network interface.</p>
      - groups: <p>The security groups associated with the network interface.</p>
      - description: <p>The description of the network interface.</p>
 */
  public init(sourceDestCheck: AttributeBooleanValue?, networkInterfaceId: String?, attachment: NetworkInterfaceAttachment?, groups: [GroupIdentifier]?, description: AttributeValue?) {
self.sourceDestCheck = sourceDestCheck
self.networkInterfaceId = networkInterfaceId
self.attachment = attachment
self.groups = groups
self.description = description
  }
}

/**
<p>Contains the output of ModifyVpcEndpoint.</p>
 */
public struct ModifyVpcEndpointResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ModifyVpcEndpointResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ModifyVpcEndpointResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

/**
<p>Contains the parameters for ImportSnapshot.</p>
 */
public struct ImportSnapshotRequest: RestJsonSerializable {
/**
<p>Token to enable idempotency for VM import requests.</p>
 */
  public let clientToken: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The name of the role to use when not using the default role, 'vmimport'.</p>
 */
  public let roleName: String?
/**
<p>The client-specific data.</p>
 */
  public let clientData: ClientData?
/**
<p>Information about the disk container.</p>
 */
  public let diskContainer: SnapshotDiskContainer?
/**
<p>The description string for the import snapshot task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["ClientToken"] = clientToken! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if roleName != nil { body["RoleName"] = roleName! }
    if clientData != nil { body["ClientData"] = clientData! }
    if diskContainer != nil { body["DiskContainer"] = diskContainer! }
    if description != nil { body["Description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - clientToken: <p>Token to enable idempotency for VM import requests.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - roleName: <p>The name of the role to use when not using the default role, 'vmimport'.</p>
      - clientData: <p>The client-specific data.</p>
      - diskContainer: <p>Information about the disk container.</p>
      - description: <p>The description string for the import snapshot task.</p>
 */
  public init(clientToken: String?, dryRun: Bool?, roleName: String?, clientData: ClientData?, diskContainer: SnapshotDiskContainer?, description: String?) {
self.clientToken = clientToken
self.dryRun = dryRun
self.roleName = roleName
self.clientData = clientData
self.diskContainer = diskContainer
self.description = description
  }
}

/**
<p>Contains the parameters for CreateVpc.</p>
 */
public struct CreateVpcRequest: RestJsonSerializable {
/**
<p>The network range for the VPC, in CIDR notation. For example, <code>10.0.0.0/16</code>.</p>
 */
  public let cidrBlock: String
/**
<p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of <code>dedicated</code> or <code>host</code> into a dedicated tenancy VPC. </p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
 */
  public let instanceTenancy: Tenancy?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["CidrBlock"] = cidrBlock
    if instanceTenancy != nil { body["instanceTenancy"] = instanceTenancy! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - cidrBlock: <p>The network range for the VPC, in CIDR notation. For example, <code>10.0.0.0/16</code>.</p>
      - instanceTenancy: <p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of <code>dedicated</code> or <code>host</code> into a dedicated tenancy VPC. </p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(cidrBlock: String, instanceTenancy: Tenancy?, dryRun: Bool?) {
self.cidrBlock = cidrBlock
self.instanceTenancy = instanceTenancy
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for CreateRouteTable.</p>
 */
public struct CreateRouteTableRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeVpcs.</p>
 */
public struct DescribeVpcsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more VPCs.</p>
 */
  public let vpcs: [Vpc]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcs != nil { body["vpcSet"] = vpcs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcsResult(
        vpcs: jsonDict["vpcSet"].flatMap { ($0 is NSNull) ? nil : [Vpc].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcs: <p>Information about one or more VPCs.</p>
 */
  public init(vpcs: [Vpc]?) {
self.vpcs = vpcs
  }
}

/**
<p>Contains the parameters for ImportInstance.</p>
 */
public struct ImportInstanceRequest: RestJsonSerializable {
/**
<p>The disk image.</p>
 */
  public let diskImages: [DiskImage]?
/**
<p>The instance operating system.</p>
 */
  public let platform: Platformvalues
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The launch specification.</p>
 */
  public let launchSpecification: ImportInstanceLaunchSpecification?
/**
<p>A description for the instance being imported.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if diskImages != nil { body["diskImage"] = diskImages! }
    body["platform"] = platform
    if dryRun != nil { body["dryRun"] = dryRun! }
    if launchSpecification != nil { body["launchSpecification"] = launchSpecification! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - diskImages: <p>The disk image.</p>
      - platform: <p>The instance operating system.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - launchSpecification: <p>The launch specification.</p>
      - description: <p>A description for the instance being imported.</p>
 */
  public init(diskImages: [DiskImage]?, platform: Platformvalues, dryRun: Bool?, launchSpecification: ImportInstanceLaunchSpecification?, description: String?) {
self.diskImages = diskImages
self.platform = platform
self.dryRun = dryRun
self.launchSpecification = launchSpecification
self.description = description
  }
}

/**
<p>Describes the status of a moving Elastic IP address.</p>
 */
public struct MovingAddressStatus: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.</p>
 */
  public let moveStatus: Movestatus?
/**
<p>The Elastic IP address.</p>
 */
  public let publicIp: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if moveStatus != nil { body["moveStatus"] = moveStatus! }
    if publicIp != nil { body["publicIp"] = publicIp! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> MovingAddressStatus {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return MovingAddressStatus(
        moveStatus: jsonDict["moveStatus"].flatMap { ($0 is NSNull) ? nil : Movestatus.deserialize(response: response, body: .json($0)) },
      publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - moveStatus: <p>The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.</p>
      - publicIp: <p>The Elastic IP address.</p>
 */
  public init(moveStatus: Movestatus?, publicIp: String?) {
self.moveStatus = moveStatus
self.publicIp = publicIp
  }
}

/**
<p>Contains the parameters for CreateVpcEndpoint.</p>
 */
public struct CreateVpcEndpointRequest: RestJsonSerializable {
/**
<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>The AWS service name, in the form <code>com.amazonaws.<i>region</i>.<i>service</i> </code>. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request.</p>
 */
  public let serviceName: String
/**
<p>The ID of the VPC in which the endpoint will be used.</p>
 */
  public let vpcId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.</p>
 */
  public let policyDocument: String?
/**
<p>One or more route table IDs.</p>
 */
  public let routeTableIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["ClientToken"] = clientToken! }
    body["ServiceName"] = serviceName
    body["VpcId"] = vpcId
    if dryRun != nil { body["DryRun"] = dryRun! }
    if policyDocument != nil { body["PolicyDocument"] = policyDocument! }
    if routeTableIds != nil { body["RouteTableId"] = routeTableIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
      - serviceName: <p>The AWS service name, in the form <code>com.amazonaws.<i>region</i>.<i>service</i> </code>. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request.</p>
      - vpcId: <p>The ID of the VPC in which the endpoint will be used.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - policyDocument: <p>A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.</p>
      - routeTableIds: <p>One or more route table IDs.</p>
 */
  public init(clientToken: String?, serviceName: String, vpcId: String, dryRun: Bool?, policyDocument: String?, routeTableIds: [String]?) {
self.clientToken = clientToken
self.serviceName = serviceName
self.vpcId = vpcId
self.dryRun = dryRun
self.policyDocument = policyDocument
self.routeTableIds = routeTableIds
  }
}

enum Subnetstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `available` = "available"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Subnetstate {
    guard case let .json(json) = body else { fatalError() }
    return Subnetstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the parameters for DeregisterImage.</p>
 */
public struct DeregisterImageRequest: RestJsonSerializable {
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ImageId"] = imageId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - imageId: <p>The ID of the AMI.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(imageId: String, dryRun: Bool?) {
self.imageId = imageId
self.dryRun = dryRun
  }
}



/**
<p>Contains the parameters for DeleteSnapshot.</p>
 */
public struct DeleteSnapshotRequest: RestJsonSerializable {
/**
<p>The ID of the EBS snapshot.</p>
 */
  public let snapshotId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["SnapshotId"] = snapshotId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - snapshotId: <p>The ID of the EBS snapshot.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(snapshotId: String, dryRun: Bool?) {
self.snapshotId = snapshotId
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeReservedInstancesOfferings.</p>
 */
public struct DescribeReservedInstancesOfferingsRequest: RestJsonSerializable {
/**
<p>The maximum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 94608000 (3 years)</p>
 */
  public let maxDuration: Int?
/**
<p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).</p> <p>Default: <code>default</code> </p>
 */
  public let instanceTenancy: Tenancy?
/**
<p>One or more Reserved Instances offering IDs.</p>
 */
  public let reservedInstancesOfferingIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (for example, one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p> </li> <li> <p> <code>reserved-instances-offering-id</code> - The Reserved Instances offering ID.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or <code>Region</code>).</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let instanceType: Instancetype?
/**
<p>The Availability Zone in which the Reserved Instance can be used.</p>
 */
  public let availabilityZone: String?
/**
<p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type. </p>
 */
  public let offeringType: Offeringtypevalues?
/**
<p>The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.</p>
 */
  public let offeringClass: Offeringclasstype?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. The maximum is 100.</p> <p>Default: 100</p>
 */
  public let maxResults: Int?
/**
<p>The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.</p>
 */
  public let productDescription: Riproductdescription?
/**
<p>Include Reserved Instance Marketplace offerings in the response.</p>
 */
  public let includeMarketplace: Bool?
/**
<p>The minimum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 2592000 (1 month)</p>
 */
  public let minDuration: Int?
/**
<p>The maximum number of instances to filter when searching for offerings.</p> <p>Default: 20</p>
 */
  public let maxInstanceCount: Int?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if maxDuration != nil { body["MaxDuration"] = maxDuration! }
    if instanceTenancy != nil { body["instanceTenancy"] = instanceTenancy! }
    if reservedInstancesOfferingIds != nil { body["ReservedInstancesOfferingId"] = reservedInstancesOfferingIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if instanceType != nil { body["InstanceType"] = instanceType! }
    if availabilityZone != nil { body["AvailabilityZone"] = availabilityZone! }
    if offeringType != nil { body["offeringType"] = offeringType! }
    if offeringClass != nil { body["OfferingClass"] = offeringClass! }
    if maxResults != nil { body["maxResults"] = maxResults! }
    if productDescription != nil { body["ProductDescription"] = productDescription! }
    if includeMarketplace != nil { body["IncludeMarketplace"] = includeMarketplace! }
    if minDuration != nil { body["MinDuration"] = minDuration! }
    if maxInstanceCount != nil { body["MaxInstanceCount"] = maxInstanceCount! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - maxDuration: <p>The maximum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 94608000 (3 years)</p>
      - instanceTenancy: <p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).</p> <p>Default: <code>default</code> </p>
      - reservedInstancesOfferingIds: <p>One or more Reserved Instances offering IDs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (for example, one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p> </li> <li> <p> <code>reserved-instances-offering-id</code> - The Reserved Instances offering ID.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or <code>Region</code>).</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceType: <p>The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - availabilityZone: <p>The Availability Zone in which the Reserved Instance can be used.</p>
      - offeringType: <p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type. </p>
      - offeringClass: <p>The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. The maximum is 100.</p> <p>Default: 100</p>
      - productDescription: <p>The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.</p>
      - includeMarketplace: <p>Include Reserved Instance Marketplace offerings in the response.</p>
      - minDuration: <p>The minimum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 2592000 (1 month)</p>
      - maxInstanceCount: <p>The maximum number of instances to filter when searching for offerings.</p> <p>Default: 20</p>
      - nextToken: <p>The token to retrieve the next page of results.</p>
 */
  public init(maxDuration: Int?, instanceTenancy: Tenancy?, reservedInstancesOfferingIds: [String]?, filters: [Filter]?, dryRun: Bool?, instanceType: Instancetype?, availabilityZone: String?, offeringType: Offeringtypevalues?, offeringClass: Offeringclasstype?, maxResults: Int?, productDescription: Riproductdescription?, includeMarketplace: Bool?, minDuration: Int?, maxInstanceCount: Int?, nextToken: String?) {
self.maxDuration = maxDuration
self.instanceTenancy = instanceTenancy
self.reservedInstancesOfferingIds = reservedInstancesOfferingIds
self.filters = filters
self.dryRun = dryRun
self.instanceType = instanceType
self.availabilityZone = availabilityZone
self.offeringType = offeringType
self.offeringClass = offeringClass
self.maxResults = maxResults
self.productDescription = productDescription
self.includeMarketplace = includeMarketplace
self.minDuration = minDuration
self.maxInstanceCount = maxInstanceCount
self.nextToken = nextToken
  }
}

/**
<p>Describes a request to cancel a Spot instance.</p>
 */
public struct CancelledSpotInstanceRequest: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the Spot instance request.</p>
 */
  public let spotInstanceRequestId: String?
/**
<p>The state of the Spot instance request.</p>
 */
  public let state: Cancelspotinstancerequeststate?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotInstanceRequestId != nil { body["spotInstanceRequestId"] = spotInstanceRequestId! }
    if state != nil { body["state"] = state! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelledSpotInstanceRequest {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelledSpotInstanceRequest(
        spotInstanceRequestId: jsonDict["spotInstanceRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Cancelspotinstancerequeststate.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - spotInstanceRequestId: <p>The ID of the Spot instance request.</p>
      - state: <p>The state of the Spot instance request.</p>
 */
  public init(spotInstanceRequestId: String?, state: Cancelspotinstancerequeststate?) {
self.spotInstanceRequestId = spotInstanceRequestId
self.state = state
  }
}



/**
<p>Contains the parameters for ModifyImageAttribute.</p>
 */
public struct ModifyImageAttributeRequest: RestJsonSerializable {
/**
<p>One or more product codes. After you add a product code to an AMI, it can't be removed. This is only valid when modifying the <code>productCodes</code> attribute.</p>
 */
  public let productCodes: [String]?
/**
<p>The value of the attribute being modified. This is only valid when modifying the <code>description</code> attribute.</p>
 */
  public let value: String?
/**
<p>One or more AWS account IDs. This is only valid when modifying the <code>launchPermission</code> attribute.</p>
 */
  public let userIds: [String]?
/**
<p>One or more user groups. This is only valid when modifying the <code>launchPermission</code> attribute.</p>
 */
  public let userGroups: [String]?
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The name of the attribute to modify.</p>
 */
  public let attribute: String?
/**
<p>A launch permission modification.</p>
 */
  public let launchPermission: LaunchPermissionModifications?
/**
<p>The operation type.</p>
 */
  public let operationType: Operationtype?
/**
<p>A description for the AMI.</p>
 */
  public let description: AttributeValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if productCodes != nil { body["ProductCode"] = productCodes! }
    if value != nil { body["Value"] = value! }
    if userIds != nil { body["UserId"] = userIds! }
    if userGroups != nil { body["UserGroup"] = userGroups! }
    body["ImageId"] = imageId
    if dryRun != nil { body["dryRun"] = dryRun! }
    if attribute != nil { body["Attribute"] = attribute! }
    if launchPermission != nil { body["LaunchPermission"] = launchPermission! }
    if operationType != nil { body["OperationType"] = operationType! }
    if description != nil { body["Description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - productCodes: <p>One or more product codes. After you add a product code to an AMI, it can't be removed. This is only valid when modifying the <code>productCodes</code> attribute.</p>
      - value: <p>The value of the attribute being modified. This is only valid when modifying the <code>description</code> attribute.</p>
      - userIds: <p>One or more AWS account IDs. This is only valid when modifying the <code>launchPermission</code> attribute.</p>
      - userGroups: <p>One or more user groups. This is only valid when modifying the <code>launchPermission</code> attribute.</p>
      - imageId: <p>The ID of the AMI.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - attribute: <p>The name of the attribute to modify.</p>
      - launchPermission: <p>A launch permission modification.</p>
      - operationType: <p>The operation type.</p>
      - description: <p>A description for the AMI.</p>
 */
  public init(productCodes: [String]?, value: String?, userIds: [String]?, userGroups: [String]?, imageId: String, dryRun: Bool?, attribute: String?, launchPermission: LaunchPermissionModifications?, operationType: Operationtype?, description: AttributeValue?) {
self.productCodes = productCodes
self.value = value
self.userIds = userIds
self.userGroups = userGroups
self.imageId = imageId
self.dryRun = dryRun
self.attribute = attribute
self.launchPermission = launchPermission
self.operationType = operationType
self.description = description
  }
}



/**
<p>Contains the output of CreateDhcpOptions.</p>
 */
public struct CreateDhcpOptionsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A set of DHCP options.</p>
 */
  public let dhcpOptions: DhcpOptions?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dhcpOptions != nil { body["dhcpOptions"] = dhcpOptions! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateDhcpOptionsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateDhcpOptionsResult(
        dhcpOptions: jsonDict["dhcpOptions"].flatMap { ($0 is NSNull) ? nil : DhcpOptions.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - dhcpOptions: <p>A set of DHCP options.</p>
 */
  public init(dhcpOptions: DhcpOptions?) {
self.dhcpOptions = dhcpOptions
  }
}

/**
<p>Describes association information for an Elastic IP address.</p>
 */
public struct InstanceNetworkInterfaceAssociation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The public IP address or Elastic IP address bound to the network interface.</p>
 */
  public let publicIp: String?
/**
<p>The ID of the owner of the Elastic IP address.</p>
 */
  public let ipOwnerId: String?
/**
<p>The public DNS name.</p>
 */
  public let publicDnsName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if publicIp != nil { body["publicIp"] = publicIp! }
    if ipOwnerId != nil { body["ipOwnerId"] = ipOwnerId! }
    if publicDnsName != nil { body["publicDnsName"] = publicDnsName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceNetworkInterfaceAssociation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceNetworkInterfaceAssociation(
        publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ipOwnerId: jsonDict["ipOwnerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      publicDnsName: jsonDict["publicDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - publicIp: <p>The public IP address or Elastic IP address bound to the network interface.</p>
      - ipOwnerId: <p>The ID of the owner of the Elastic IP address.</p>
      - publicDnsName: <p>The public DNS name.</p>
 */
  public init(publicIp: String?, ipOwnerId: String?, publicDnsName: String?) {
self.publicIp = publicIp
self.ipOwnerId = ipOwnerId
self.publicDnsName = publicDnsName
  }
}


/**
<p>Describes a parameter used to set up an EBS volume in a block device mapping.</p>
 */
public struct EbsInstanceBlockDevice: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The time stamp when the attachment initiated.</p>
 */
  public let attachTime: Date?
/**
<p>Indicates whether the volume is deleted on instance termination.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The attachment state.</p>
 */
  public let status: Attachmentstatus?
/**
<p>The ID of the EBS volume.</p>
 */
  public let volumeId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attachTime != nil { body["attachTime"] = attachTime! }
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if status != nil { body["status"] = status! }
    if volumeId != nil { body["volumeId"] = volumeId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> EbsInstanceBlockDevice {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return EbsInstanceBlockDevice(
        attachTime: jsonDict["attachTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Attachmentstatus.deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - attachTime: <p>The time stamp when the attachment initiated.</p>
      - deleteOnTermination: <p>Indicates whether the volume is deleted on instance termination.</p>
      - status: <p>The attachment state.</p>
      - volumeId: <p>The ID of the EBS volume.</p>
 */
  public init(attachTime: Date?, deleteOnTermination: Bool?, status: Attachmentstatus?, volumeId: String?) {
self.attachTime = attachTime
self.deleteOnTermination = deleteOnTermination
self.status = status
self.volumeId = volumeId
  }
}

/**
<p>Contains the parameters for CancelImportTask.</p>
 */
public struct CancelImportTaskRequest: RestJsonSerializable {
/**
<p>The ID of the import image or import snapshot task to be canceled.</p>
 */
  public let importTaskId: String?
/**
<p>The reason for canceling the task.</p>
 */
  public let cancelReason: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if importTaskId != nil { body["ImportTaskId"] = importTaskId! }
    if cancelReason != nil { body["CancelReason"] = cancelReason! }
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - importTaskId: <p>The ID of the import image or import snapshot task to be canceled.</p>
      - cancelReason: <p>The reason for canceling the task.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(importTaskId: String?, cancelReason: String?, dryRun: Bool?) {
self.importTaskId = importTaskId
self.cancelReason = cancelReason
self.dryRun = dryRun
  }
}

/**
<p>The total value of the Convertible Reserved Instance.</p>
 */
public struct ReservedInstanceReservationValue: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
 */
  public let reservedInstanceId: String?
/**
<p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
 */
  public let reservationValue: ReservationValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstanceId != nil { body["reservedInstanceId"] = reservedInstanceId! }
    if reservationValue != nil { body["reservationValue"] = reservationValue! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstanceReservationValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstanceReservationValue(
        reservedInstanceId: jsonDict["reservedInstanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      reservationValue: jsonDict["reservationValue"].flatMap { ($0 is NSNull) ? nil : ReservationValue.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstanceId: <p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
      - reservationValue: <p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
 */
  public init(reservedInstanceId: String?, reservationValue: ReservationValue?) {
self.reservedInstanceId = reservedInstanceId
self.reservationValue = reservationValue
  }
}

/**
<p>Contains the output of CreateFlowLogs.</p>
 */
public struct CreateFlowLogsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IDs of the flow logs.</p>
 */
  public let flowLogIds: [String]?
/**
<p>Information about the flow logs that could not be created successfully.</p>
 */
  public let unsuccessful: [UnsuccessfulItem]?
/**
<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
 */
  public let clientToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if flowLogIds != nil { body["flowLogIdSet"] = flowLogIds! }
    if unsuccessful != nil { body["unsuccessful"] = unsuccessful! }
    if clientToken != nil { body["clientToken"] = clientToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateFlowLogsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateFlowLogsResult(
        flowLogIds: jsonDict["flowLogIdSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      unsuccessful: jsonDict["unsuccessful"].flatMap { ($0 is NSNull) ? nil : [UnsuccessfulItem].deserialize(response: response, body: .json($0)) },
      clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - flowLogIds: <p>The IDs of the flow logs.</p>
      - unsuccessful: <p>Information about the flow logs that could not be created successfully.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
 */
  public init(flowLogIds: [String]?, unsuccessful: [UnsuccessfulItem]?, clientToken: String?) {
self.flowLogIds = flowLogIds
self.unsuccessful = unsuccessful
self.clientToken = clientToken
  }
}

/**
<p>Contains the parameters for StopInstances.</p>
 */
public struct StopInstancesRequest: RestJsonSerializable {
/**
<p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>
 */
  public let force: Bool?
/**
<p>One or more instance IDs.</p>
 */
  public let instanceIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if force != nil { body["force"] = force! }
    body["InstanceId"] = instanceIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - force: <p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>
      - instanceIds: <p>One or more instance IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(force: Bool?, instanceIds: [String], dryRun: Bool?) {
self.force = force
self.instanceIds = instanceIds
self.dryRun = dryRun
  }
}

/**
<p>Describes an Availability Zone.</p>
 */
public struct AvailabilityZone: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the Availability Zone.</p>
 */
  public let zoneName: String?
/**
<p>The state of the Availability Zone.</p>
 */
  public let state: Availabilityzonestate?
/**
<p>Any messages about the Availability Zone.</p>
 */
  public let messages: [AvailabilityZoneMessage]?
/**
<p>The name of the region.</p>
 */
  public let regionName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if zoneName != nil { body["zoneName"] = zoneName! }
    if state != nil { body["zoneState"] = state! }
    if messages != nil { body["messageSet"] = messages! }
    if regionName != nil { body["regionName"] = regionName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AvailabilityZone {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AvailabilityZone(
        zoneName: jsonDict["zoneName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["zoneState"].flatMap { ($0 is NSNull) ? nil : Availabilityzonestate.deserialize(response: response, body: .json($0)) },
      messages: jsonDict["messageSet"].flatMap { ($0 is NSNull) ? nil : [AvailabilityZoneMessage].deserialize(response: response, body: .json($0)) },
      regionName: jsonDict["regionName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - zoneName: <p>The name of the Availability Zone.</p>
      - state: <p>The state of the Availability Zone.</p>
      - messages: <p>Any messages about the Availability Zone.</p>
      - regionName: <p>The name of the region.</p>
 */
  public init(zoneName: String?, state: Availabilityzonestate?, messages: [AvailabilityZoneMessage]?, regionName: String?) {
self.zoneName = zoneName
self.state = state
self.messages = messages
self.regionName = regionName
  }
}

/**
<p>Describes a volume status.</p>
 */
public struct VolumeStatusDetails: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the volume status.</p>
 */
  public let name: Volumestatusname?
/**
<p>The intended status of the volume status.</p>
 */
  public let status: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if name != nil { body["name"] = name! }
    if status != nil { body["status"] = status! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeStatusDetails {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeStatusDetails(
        name: jsonDict["name"].flatMap { ($0 is NSNull) ? nil : Volumestatusname.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - name: <p>The name of the volume status.</p>
      - status: <p>The intended status of the volume status.</p>
 */
  public init(name: Volumestatusname?, status: String?) {
self.name = name
self.status = status
  }
}

enum Availabilityzonestate: String, RestJsonDeserializable, RestJsonSerializable {
  case `available` = "available"
  case `information` = "information"
  case `impaired` = "impaired"
  case `unavailable` = "unavailable"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Availabilityzonestate {
    guard case let .json(json) = body else { fatalError() }
    return Availabilityzonestate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DescribeReservedInstancesModifications.</p>
 */
public struct DescribeReservedInstancesModificationsRequest: RestJsonSerializable {
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>client-token</code> - The idempotency token for the modification request.</p> </li> <li> <p> <code>create-date</code> - The time when the modification request was created.</p> </li> <li> <p> <code>effective-date</code> - The time when the modification becomes effective.</p> </li> <li> <p> <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p> </li> <li> <p> <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p> </li> <li> <p> <code>reserved-instances-modification-id</code> - The ID of the modification request.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instances modification request (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> <li> <p> <code>update-date</code> - The time when the modification request was last updated.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>IDs for the submitted modification request.</p>
 */
  public let reservedInstancesModificationIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if filters != nil { body["Filter"] = filters! }
    if reservedInstancesModificationIds != nil { body["ReservedInstancesModificationId"] = reservedInstancesModificationIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>client-token</code> - The idempotency token for the modification request.</p> </li> <li> <p> <code>create-date</code> - The time when the modification request was created.</p> </li> <li> <p> <code>effective-date</code> - The time when the modification becomes effective.</p> </li> <li> <p> <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p> </li> <li> <p> <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p> </li> <li> <p> <code>reserved-instances-modification-id</code> - The ID of the modification request.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instances modification request (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> <li> <p> <code>update-date</code> - The time when the modification request was last updated.</p> </li> </ul>
      - reservedInstancesModificationIds: <p>IDs for the submitted modification request.</p>
 */
  public init(nextToken: String?, filters: [Filter]?, reservedInstancesModificationIds: [String]?) {
self.nextToken = nextToken
self.filters = filters
self.reservedInstancesModificationIds = reservedInstancesModificationIds
  }
}

/**
<p>Describes a Spot instance state change.</p>
 */
public struct SpotInstanceStateFault: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The reason code for the Spot instance state change.</p>
 */
  public let code: String?
/**
<p>The message for the Spot instance state change.</p>
 */
  public let message: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if code != nil { body["code"] = code! }
    if message != nil { body["message"] = message! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotInstanceStateFault {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotInstanceStateFault(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - code: <p>The reason code for the Spot instance state change.</p>
      - message: <p>The message for the Spot instance state change.</p>
 */
  public init(code: String?, message: String?) {
self.code = code
self.message = message
  }
}

/**
<p>Contains the output of DescribeImages.</p>
 */
public struct DescribeImagesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more images.</p>
 */
  public let images: [Image]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if images != nil { body["imagesSet"] = images! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeImagesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeImagesResult(
        images: jsonDict["imagesSet"].flatMap { ($0 is NSNull) ? nil : [Image].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - images: <p>Information about one or more images.</p>
 */
  public init(images: [Image]?) {
self.images = images
  }
}


/**
<p>Describes a Spot fleet request that was successfully canceled.</p>
 */
public struct CancelSpotFleetRequestsSuccessItem: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The current state of the Spot fleet request.</p>
 */
  public let currentSpotFleetRequestState: Batchstate
/**
<p>The previous state of the Spot fleet request.</p>
 */
  public let previousSpotFleetRequestState: Batchstate
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["currentSpotFleetRequestState"] = currentSpotFleetRequestState
    body["previousSpotFleetRequestState"] = previousSpotFleetRequestState
    body["spotFleetRequestId"] = spotFleetRequestId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelSpotFleetRequestsSuccessItem {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelSpotFleetRequestsSuccessItem(
        currentSpotFleetRequestState: jsonDict["currentSpotFleetRequestState"].flatMap { ($0 is NSNull) ? nil : Batchstate.deserialize(response: response, body: .json($0)) }!,
      previousSpotFleetRequestState: jsonDict["previousSpotFleetRequestState"].flatMap { ($0 is NSNull) ? nil : Batchstate.deserialize(response: response, body: .json($0)) }!,
      spotFleetRequestId: jsonDict["spotFleetRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - currentSpotFleetRequestState: <p>The current state of the Spot fleet request.</p>
      - previousSpotFleetRequestState: <p>The previous state of the Spot fleet request.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
 */
  public init(currentSpotFleetRequestState: Batchstate, previousSpotFleetRequestState: Batchstate, spotFleetRequestId: String) {
self.currentSpotFleetRequestState = currentSpotFleetRequestState
self.previousSpotFleetRequestState = previousSpotFleetRequestState
self.spotFleetRequestId = spotFleetRequestId
  }
}

/**
<p>Describes the placement for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesPlacement: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Availability Zone.</p>
 */
  public let availabilityZone: String?
/**
<p>The name of the placement group.</p>
 */
  public let groupName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if availabilityZone != nil { body["AvailabilityZone"] = availabilityZone! }
    if groupName != nil { body["GroupName"] = groupName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesPlacement {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesPlacement(
        availabilityZone: jsonDict["AvailabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["GroupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - availabilityZone: <p>The Availability Zone.</p>
      - groupName: <p>The name of the placement group.</p>
 */
  public init(availabilityZone: String?, groupName: String?) {
self.availabilityZone = availabilityZone
self.groupName = groupName
  }
}

/**
<p>Contains the parameters for AuthorizeSecurityGroupIngress.</p>
 */
public struct AuthorizeSecurityGroupIngressRequest: RestJsonSerializable {
/**
<p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>
 */
  public let toPort: Int?
/**
<p>[EC2-Classic, default VPC] The name of the security group.</p>
 */
  public let groupName: String?
/**
<p>A set of IP permissions. Can be used to specify multiple rules in a single command.</p>
 */
  public let ipPermissions: [IpPermission]?
/**
<p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>
 */
  public let cidrIp: String?
/**
<p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.</p>
 */
  public let sourceSecurityGroupName: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.</p>
 */
  public let fromPort: Int?
/**
<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). (VPC only) Use <code>-1</code> to specify all traffic. If you specify <code>-1</code>, traffic on all ports is allowed, regardless of any ports you specify.</p>
 */
  public let ipProtocol: String?
/**
<p>The ID of the security group. Required for a nondefault VPC.</p>
 */
  public let groupId: String?
/**
<p>[EC2-Classic] The AWS account number for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupOwnerId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if toPort != nil { body["ToPort"] = toPort! }
    if groupName != nil { body["GroupName"] = groupName! }
    if ipPermissions != nil { body["IpPermissions"] = ipPermissions! }
    if cidrIp != nil { body["CidrIp"] = cidrIp! }
    if sourceSecurityGroupName != nil { body["SourceSecurityGroupName"] = sourceSecurityGroupName! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if fromPort != nil { body["FromPort"] = fromPort! }
    if ipProtocol != nil { body["IpProtocol"] = ipProtocol! }
    if groupId != nil { body["GroupId"] = groupId! }
    if sourceSecurityGroupOwnerId != nil { body["SourceSecurityGroupOwnerId"] = sourceSecurityGroupOwnerId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - toPort: <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>
      - groupName: <p>[EC2-Classic, default VPC] The name of the security group.</p>
      - ipPermissions: <p>A set of IP permissions. Can be used to specify multiple rules in a single command.</p>
      - cidrIp: <p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>
      - sourceSecurityGroupName: <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - fromPort: <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.</p>
      - ipProtocol: <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). (VPC only) Use <code>-1</code> to specify all traffic. If you specify <code>-1</code>, traffic on all ports is allowed, regardless of any ports you specify.</p>
      - groupId: <p>The ID of the security group. Required for a nondefault VPC.</p>
      - sourceSecurityGroupOwnerId: <p>[EC2-Classic] The AWS account number for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.</p>
 */
  public init(toPort: Int?, groupName: String?, ipPermissions: [IpPermission]?, cidrIp: String?, sourceSecurityGroupName: String?, dryRun: Bool?, fromPort: Int?, ipProtocol: String?, groupId: String?, sourceSecurityGroupOwnerId: String?) {
self.toPort = toPort
self.groupName = groupName
self.ipPermissions = ipPermissions
self.cidrIp = cidrIp
self.sourceSecurityGroupName = sourceSecurityGroupName
self.dryRun = dryRun
self.fromPort = fromPort
self.ipProtocol = ipProtocol
self.groupId = groupId
self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
  }
}


/**
<p>Describes a range of ports.</p>
 */
public struct PortRange: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The first port in the range.</p>
 */
  public let from: Int?
/**
<p>The last port in the range.</p>
 */
  public let to: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if from != nil { body["from"] = from! }
    if to != nil { body["to"] = to! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PortRange {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PortRange(
        from: jsonDict["from"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      to: jsonDict["to"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - from: <p>The first port in the range.</p>
      - to: <p>The last port in the range.</p>
 */
  public init(from: Int?, to: Int?) {
self.from = from
self.to = to
  }
}

/**
<p>Describes the current state of the instance.</p>
 */
public struct InstanceState: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The current state of the instance.</p>
 */
  public let name: Instancestatename?
/**
<p>The low byte represents the state. The high byte is an opaque internal value and should be ignored.</p> <ul> <li> <p> <code>0</code> : <code>pending</code> </p> </li> <li> <p> <code>16</code> : <code>running</code> </p> </li> <li> <p> <code>32</code> : <code>shutting-down</code> </p> </li> <li> <p> <code>48</code> : <code>terminated</code> </p> </li> <li> <p> <code>64</code> : <code>stopping</code> </p> </li> <li> <p> <code>80</code> : <code>stopped</code> </p> </li> </ul>
 */
  public let code: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if name != nil { body["name"] = name! }
    if code != nil { body["code"] = code! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceState {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceState(
        name: jsonDict["name"].flatMap { ($0 is NSNull) ? nil : Instancestatename.deserialize(response: response, body: .json($0)) },
      code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - name: <p>The current state of the instance.</p>
      - code: <p>The low byte represents the state. The high byte is an opaque internal value and should be ignored.</p> <ul> <li> <p> <code>0</code> : <code>pending</code> </p> </li> <li> <p> <code>16</code> : <code>running</code> </p> </li> <li> <p> <code>32</code> : <code>shutting-down</code> </p> </li> <li> <p> <code>48</code> : <code>terminated</code> </p> </li> <li> <p> <code>64</code> : <code>stopping</code> </p> </li> <li> <p> <code>80</code> : <code>stopped</code> </p> </li> </ul>
 */
  public init(name: Instancestatename?, code: Int?) {
self.name = name
self.code = code
  }
}

enum Tenancy: String, RestJsonDeserializable, RestJsonSerializable {
  case `default` = "default"
  case `dedicated` = "dedicated"
  case `host` = "host"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Tenancy {
    guard case let .json(json) = body else { fatalError() }
    return Tenancy(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Describes a private IP address.</p>
 */
public struct InstancePrivateIpAddress: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The association information for an Elastic IP address for the network interface.</p>
 */
  public let association: InstanceNetworkInterfaceAssociation?
/**
<p>The private DNS name.</p>
 */
  public let privateDnsName: String?
/**
<p>Indicates whether this IP address is the primary private IP address of the network interface.</p>
 */
  public let primary: Bool?
/**
<p>The private IP address of the network interface.</p>
 */
  public let privateIpAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if association != nil { body["association"] = association! }
    if privateDnsName != nil { body["privateDnsName"] = privateDnsName! }
    if primary != nil { body["primary"] = primary! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstancePrivateIpAddress {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstancePrivateIpAddress(
        association: jsonDict["association"].flatMap { ($0 is NSNull) ? nil : InstanceNetworkInterfaceAssociation.deserialize(response: response, body: .json($0)) },
      privateDnsName: jsonDict["privateDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      primary: jsonDict["primary"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - association: <p>The association information for an Elastic IP address for the network interface.</p>
      - privateDnsName: <p>The private DNS name.</p>
      - primary: <p>Indicates whether this IP address is the primary private IP address of the network interface.</p>
      - privateIpAddress: <p>The private IP address of the network interface.</p>
 */
  public init(association: InstanceNetworkInterfaceAssociation?, privateDnsName: String?, primary: Bool?, privateIpAddress: String?) {
self.association = association
self.privateDnsName = privateDnsName
self.primary = primary
self.privateIpAddress = privateIpAddress
  }
}

/**
<p>Describes properties of a Dedicated Host.</p>
 */
public struct HostProperties: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The number of sockets on the Dedicated Host.</p>
 */
  public let sockets: Int?
/**
<p>The instance type size that the Dedicated Host supports (for example, <code>m3.medium</code>).</p>
 */
  public let instanceType: String?
/**
<p>The number of vCPUs on the Dedicated Host.</p>
 */
  public let totalVCpus: Int?
/**
<p>The number of cores on the Dedicated Host.</p>
 */
  public let cores: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if sockets != nil { body["sockets"] = sockets! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if totalVCpus != nil { body["totalVCpus"] = totalVCpus! }
    if cores != nil { body["cores"] = cores! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> HostProperties {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return HostProperties(
        sockets: jsonDict["sockets"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      totalVCpus: jsonDict["totalVCpus"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      cores: jsonDict["cores"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - sockets: <p>The number of sockets on the Dedicated Host.</p>
      - instanceType: <p>The instance type size that the Dedicated Host supports (for example, <code>m3.medium</code>).</p>
      - totalVCpus: <p>The number of vCPUs on the Dedicated Host.</p>
      - cores: <p>The number of cores on the Dedicated Host.</p>
 */
  public init(sockets: Int?, instanceType: String?, totalVCpus: Int?, cores: Int?) {
self.sockets = sockets
self.instanceType = instanceType
self.totalVCpus = totalVCpus
self.cores = cores
  }
}

/**
<p>Contains the parameters for UnassignPrivateIpAddresses.</p>
 */
public struct UnassignPrivateIpAddressesRequest: RestJsonSerializable {
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
 */
  public let privateIpAddresses: [String]

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["networkInterfaceId"] = networkInterfaceId
    body["privateIpAddress"] = privateIpAddresses
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - privateIpAddresses: <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
 */
  public init(networkInterfaceId: String, privateIpAddresses: [String]) {
self.networkInterfaceId = networkInterfaceId
self.privateIpAddresses = privateIpAddresses
  }
}


/**
<p>Describes the price for a Reserved Instance.</p>
 */
public struct PriceSchedule: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The fixed price for the term.</p>
 */
  public let price: Double?
/**
<p>The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>
 */
  public let term: Int?
/**
<p>The current price schedule, as determined by the term remaining for the Reserved Instance in the listing.</p> <p>A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.</p>
 */
  public let active: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if price != nil { body["price"] = price! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if term != nil { body["term"] = term! }
    if active != nil { body["active"] = active! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PriceSchedule {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PriceSchedule(
        price: jsonDict["price"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      term: jsonDict["term"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      active: jsonDict["active"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - price: <p>The fixed price for the term.</p>
      - currencyCode: <p>The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.</p>
      - term: <p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>
      - active: <p>The current price schedule, as determined by the term remaining for the Reserved Instance in the listing.</p> <p>A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.</p>
 */
  public init(price: Double?, currencyCode: Currencycodevalues?, term: Int?, active: Bool?) {
self.price = price
self.currencyCode = currencyCode
self.term = term
self.active = active
  }
}

/**
<p>Describes a VPC with a security group that references your security group.</p>
 */
public struct SecurityGroupReference: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String?
/**
<p>The ID of your security group.</p>
 */
  public let groupId: String
/**
<p>The ID of the VPC with the referencing security group.</p>
 */
  public let referencingVpcId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
    body["groupId"] = groupId
    body["referencingVpcId"] = referencingVpcId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SecurityGroupReference {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SecurityGroupReference(
        vpcPeeringConnectionId: jsonDict["vpcPeeringConnectionId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupId: jsonDict["groupId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      referencingVpcId: jsonDict["referencingVpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
      - groupId: <p>The ID of your security group.</p>
      - referencingVpcId: <p>The ID of the VPC with the referencing security group.</p>
 */
  public init(vpcPeeringConnectionId: String?, groupId: String, referencingVpcId: String) {
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.groupId = groupId
self.referencingVpcId = referencingVpcId
  }
}

/**
<p>Contains the parameters for DescribePrefixLists.</p>
 */
public struct DescribePrefixListsRequest: RestJsonSerializable {
/**
<p>One or more prefix list IDs.</p>
 */
  public let prefixListIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>prefix-list-id</code>: The ID of a prefix list.</p> </li> <li> <p> <code>prefix-list-name</code>: The name of a prefix list.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The token for the next set of items to return. (You received this token from a prior call.)</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value specified is greater than 1000, we return only 1000 items.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if prefixListIds != nil { body["PrefixListId"] = prefixListIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - prefixListIds: <p>One or more prefix list IDs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>prefix-list-id</code>: The ID of a prefix list.</p> </li> <li> <p> <code>prefix-list-name</code>: The name of a prefix list.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
      - maxResults: <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value specified is greater than 1000, we return only 1000 items.</p>
 */
  public init(prefixListIds: [String]?, filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.prefixListIds = prefixListIds
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}


/**
<p>Describes a disk image.</p>
 */
public struct DiskImage: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the disk image.</p>
 */
  public let image: DiskImageDetail?
/**
<p>Information about the volume.</p>
 */
  public let volume: VolumeDetail?
/**
<p>A description of the disk image.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if image != nil { body["Image"] = image! }
    if volume != nil { body["Volume"] = volume! }
    if description != nil { body["Description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DiskImage {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DiskImage(
        image: jsonDict["Image"].flatMap { ($0 is NSNull) ? nil : DiskImageDetail.deserialize(response: response, body: .json($0)) },
      volume: jsonDict["Volume"].flatMap { ($0 is NSNull) ? nil : VolumeDetail.deserialize(response: response, body: .json($0)) },
      description: jsonDict["Description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - image: <p>Information about the disk image.</p>
      - volume: <p>Information about the volume.</p>
      - description: <p>A description of the disk image.</p>
 */
  public init(image: DiskImageDetail?, volume: VolumeDetail?, description: String?) {
self.image = image
self.volume = volume
self.description = description
  }
}

/**
<p>Contains the parameters for DescribeRouteTables.</p>
 */
public struct DescribeRouteTablesRequest: RestJsonSerializable {
/**
<p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p>
 */
  public let routeTableIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The CIDR range specified in a route in the table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS service specified in a route in the table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the route table was created; <code>CreateRoute</code> indicates that the route was manually added to the route table; <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if routeTableIds != nil { body["RouteTableId"] = routeTableIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - routeTableIds: <p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The CIDR range specified in a route in the table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS service specified in a route in the table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the route table was created; <code>CreateRoute</code> indicates that the route was manually added to the route table; <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(routeTableIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.routeTableIds = routeTableIds
self.filters = filters
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeInternetGateways.</p>
 */
public struct DescribeInternetGatewaysResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more Internet gateways.</p>
 */
  public let internetGateways: [InternetGateway]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if internetGateways != nil { body["internetGatewaySet"] = internetGateways! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeInternetGatewaysResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeInternetGatewaysResult(
        internetGateways: jsonDict["internetGatewaySet"].flatMap { ($0 is NSNull) ? nil : [InternetGateway].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - internetGateways: <p>Information about one or more Internet gateways.</p>
 */
  public init(internetGateways: [InternetGateway]?) {
self.internetGateways = internetGateways
  }
}

/**
<p>Describes a network interface attachment.</p>
 */
public struct InstanceNetworkInterfaceAttachment: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The time stamp when the attachment initiated.</p>
 */
  public let attachTime: Date?
/**
<p>Indicates whether the network interface is deleted when the instance is terminated.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The index of the device on the instance for the network interface attachment.</p>
 */
  public let deviceIndex: Int?
/**
<p>The ID of the network interface attachment.</p>
 */
  public let attachmentId: String?
/**
<p>The attachment state.</p>
 */
  public let status: Attachmentstatus?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attachTime != nil { body["attachTime"] = attachTime! }
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if deviceIndex != nil { body["deviceIndex"] = deviceIndex! }
    if attachmentId != nil { body["attachmentId"] = attachmentId! }
    if status != nil { body["status"] = status! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceNetworkInterfaceAttachment {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceNetworkInterfaceAttachment(
        attachTime: jsonDict["attachTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      deviceIndex: jsonDict["deviceIndex"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      attachmentId: jsonDict["attachmentId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Attachmentstatus.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - attachTime: <p>The time stamp when the attachment initiated.</p>
      - deleteOnTermination: <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
      - deviceIndex: <p>The index of the device on the instance for the network interface attachment.</p>
      - attachmentId: <p>The ID of the network interface attachment.</p>
      - status: <p>The attachment state.</p>
 */
  public init(attachTime: Date?, deleteOnTermination: Bool?, deviceIndex: Int?, attachmentId: String?, status: Attachmentstatus?) {
self.attachTime = attachTime
self.deleteOnTermination = deleteOnTermination
self.deviceIndex = deviceIndex
self.attachmentId = attachmentId
self.status = status
  }
}



/**
<p>Contains the parameters for DescribeVpcPeeringConnections.</p>
 */
public struct DescribeVpcPeeringConnectionsRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>accepter-vpc-info.cidr-block</code> - The CIDR block of the peer VPC.</p> </li> <li> <p> <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the peer VPC.</p> </li> <li> <p> <code>accepter-vpc-info.vpc-id</code> - The ID of the peer VPC.</p> </li> <li> <p> <code>expiration-time</code> - The expiration date and time for the VPC peering connection.</p> </li> <li> <p> <code>requester-vpc-info.cidr-block</code> - The CIDR block of the requester's VPC.</p> </li> <li> <p> <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the requester VPC.</p> </li> <li> <p> <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p> </li> <li> <p> <code>status-code</code> - The status of the VPC peering connection (<code>pending-acceptance</code> | <code>failed</code> | <code>expired</code> | <code>provisioning</code> | <code>active</code> | <code>deleted</code> | <code>rejected</code>).</p> </li> <li> <p> <code>status-message</code> - A message that provides more information about the status of the VPC peering connection, if applicable.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>One or more VPC peering connection IDs.</p> <p>Default: Describes all your VPC peering connections.</p>
 */
  public let vpcPeeringConnectionIds: [String]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if vpcPeeringConnectionIds != nil { body["VpcPeeringConnectionId"] = vpcPeeringConnectionIds! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>accepter-vpc-info.cidr-block</code> - The CIDR block of the peer VPC.</p> </li> <li> <p> <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the peer VPC.</p> </li> <li> <p> <code>accepter-vpc-info.vpc-id</code> - The ID of the peer VPC.</p> </li> <li> <p> <code>expiration-time</code> - The expiration date and time for the VPC peering connection.</p> </li> <li> <p> <code>requester-vpc-info.cidr-block</code> - The CIDR block of the requester's VPC.</p> </li> <li> <p> <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the requester VPC.</p> </li> <li> <p> <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p> </li> <li> <p> <code>status-code</code> - The status of the VPC peering connection (<code>pending-acceptance</code> | <code>failed</code> | <code>expired</code> | <code>provisioning</code> | <code>active</code> | <code>deleted</code> | <code>rejected</code>).</p> </li> <li> <p> <code>status-message</code> - A message that provides more information about the status of the VPC peering connection, if applicable.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p> </li> </ul>
      - vpcPeeringConnectionIds: <p>One or more VPC peering connection IDs.</p> <p>Default: Describes all your VPC peering connections.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(filters: [Filter]?, vpcPeeringConnectionIds: [String]?, dryRun: Bool?) {
self.filters = filters
self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for DetachClassicLinkVpc.</p>
 */
public struct DetachClassicLinkVpcRequest: RestJsonSerializable {
/**
<p>The ID of the VPC to which the instance is linked.</p>
 */
  public let vpcId: String
/**
<p>The ID of the instance to unlink from the VPC.</p>
 */
  public let instanceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    body["instanceId"] = instanceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC to which the instance is linked.</p>
      - instanceId: <p>The ID of the instance to unlink from the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, instanceId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.instanceId = instanceId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DetachClassicLinkVpc.</p>
 */
public struct DetachClassicLinkVpcResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DetachClassicLinkVpcResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DetachClassicLinkVpcResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

/**
<p>The cost associated with the Reserved Instance.</p>
 */
public struct ReservationValue: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The hourly rate of the reservation.</p>
 */
  public let hourlyPrice: String?
/**
<p>The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).</p>
 */
  public let remainingTotalValue: String?
/**
<p>The remaining upfront cost of the reservation.</p>
 */
  public let remainingUpfrontValue: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if hourlyPrice != nil { body["hourlyPrice"] = hourlyPrice! }
    if remainingTotalValue != nil { body["remainingTotalValue"] = remainingTotalValue! }
    if remainingUpfrontValue != nil { body["remainingUpfrontValue"] = remainingUpfrontValue! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservationValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservationValue(
        hourlyPrice: jsonDict["hourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      remainingTotalValue: jsonDict["remainingTotalValue"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      remainingUpfrontValue: jsonDict["remainingUpfrontValue"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - hourlyPrice: <p>The hourly rate of the reservation.</p>
      - remainingTotalValue: <p>The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).</p>
      - remainingUpfrontValue: <p>The remaining upfront cost of the reservation.</p>
 */
  public init(hourlyPrice: String?, remainingTotalValue: String?, remainingUpfrontValue: String?) {
self.hourlyPrice = hourlyPrice
self.remainingTotalValue = remainingTotalValue
self.remainingUpfrontValue = remainingUpfrontValue
  }
}



/**
<p>Describes the storage parameters for S3 and S3 buckets for an instance store-backed AMI.</p>
 */
public struct S3Storage: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
 */
  public let bucket: String?
/**
<p>An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.</p>
 */
  public let uploadPolicy: Data?
/**
<p>The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in <a href="http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html">Best Practices for Managing AWS Access Keys</a>.</p>
 */
  public let aWSAccessKeyId: String?
/**
<p>The signature of the JSON document.</p>
 */
  public let uploadPolicySignature: String?
/**
<p>The beginning of the file name of the AMI.</p>
 */
  public let prefix: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if bucket != nil { body["bucket"] = bucket! }
    if uploadPolicy != nil { body["uploadPolicy"] = uploadPolicy! }
    if aWSAccessKeyId != nil { body["AWSAccessKeyId"] = aWSAccessKeyId! }
    if uploadPolicySignature != nil { body["uploadPolicySignature"] = uploadPolicySignature! }
    if prefix != nil { body["prefix"] = prefix! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> S3Storage {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return S3Storage(
        bucket: jsonDict["bucket"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      uploadPolicy: jsonDict["uploadPolicy"].flatMap { ($0 is NSNull) ? nil : Data.deserialize(response: response, body: .json($0)) },
      aWSAccessKeyId: jsonDict["AWSAccessKeyId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      uploadPolicySignature: jsonDict["uploadPolicySignature"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      prefix: jsonDict["prefix"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - bucket: <p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
      - uploadPolicy: <p>An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.</p>
      - aWSAccessKeyId: <p>The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in <a href="http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html">Best Practices for Managing AWS Access Keys</a>.</p>
      - uploadPolicySignature: <p>The signature of the JSON document.</p>
      - prefix: <p>The beginning of the file name of the AMI.</p>
 */
  public init(bucket: String?, uploadPolicy: Data?, aWSAccessKeyId: String?, uploadPolicySignature: String?, prefix: String?) {
self.bucket = bucket
self.uploadPolicy = uploadPolicy
self.aWSAccessKeyId = aWSAccessKeyId
self.uploadPolicySignature = uploadPolicySignature
self.prefix = prefix
  }
}


/**
<p>Contains the output of DescribeInstances.</p>
 */
public struct DescribeInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>Zero or more reservations.</p>
 */
  public let reservations: [Reservation]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if reservations != nil { body["reservationSet"] = reservations! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeInstancesResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      reservations: jsonDict["reservationSet"].flatMap { ($0 is NSNull) ? nil : [Reservation].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - reservations: <p>Zero or more reservations.</p>
 */
  public init(nextToken: String?, reservations: [Reservation]?) {
self.nextToken = nextToken
self.reservations = reservations
  }
}

/**
<p>Contains the parameters for DescribeReservedInstancesListings.</p>
 */
public struct DescribeReservedInstancesListingsRequest: RestJsonSerializable {
/**
<p>One or more Reserved Instance IDs.</p>
 */
  public let reservedInstancesId: String?
/**
<p>One or more Reserved Instance listing IDs.</p>
 */
  public let reservedInstancesListingId: String?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p> </li> <li> <p> <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> | <code>cancelled</code> | <code>closed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> </ul>
 */
  public let filters: [Filter]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesId != nil { body["reservedInstancesId"] = reservedInstancesId! }
    if reservedInstancesListingId != nil { body["reservedInstancesListingId"] = reservedInstancesListingId! }
    if filters != nil { body["Filter"] = filters! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstancesId: <p>One or more Reserved Instance IDs.</p>
      - reservedInstancesListingId: <p>One or more Reserved Instance listing IDs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p> </li> <li> <p> <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> | <code>cancelled</code> | <code>closed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> </ul>
 */
  public init(reservedInstancesId: String?, reservedInstancesListingId: String?, filters: [Filter]?) {
self.reservedInstancesId = reservedInstancesId
self.reservedInstancesListingId = reservedInstancesListingId
self.filters = filters
  }
}

enum Monitoringstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `disabled` = "disabled"
  case `disabling` = "disabling"
  case `enabled` = "enabled"
  case `pending` = "pending"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Monitoringstate {
    guard case let .json(json) = body else { fatalError() }
    return Monitoringstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}



/**
<p>Contains the parameters for CancelBundleTask.</p>
 */
public struct CancelBundleTaskRequest: RestJsonSerializable {
/**
<p>The ID of the bundle task.</p>
 */
  public let bundleId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["BundleId"] = bundleId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - bundleId: <p>The ID of the bundle task.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(bundleId: String, dryRun: Bool?) {
self.bundleId = bundleId
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for DeleteCustomerGateway.</p>
 */
public struct DeleteCustomerGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the customer gateway.</p>
 */
  public let customerGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["CustomerGatewayId"] = customerGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - customerGatewayId: <p>The ID of the customer gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(customerGatewayId: String, dryRun: Bool?) {
self.customerGatewayId = customerGatewayId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeHosts.</p>
 */
public struct DescribeHostsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the Dedicated Hosts.</p>
 */
  public let hosts: [Host]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if hosts != nil { body["hostSet"] = hosts! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeHostsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeHostsResult(
        hosts: jsonDict["hostSet"].flatMap { ($0 is NSNull) ? nil : [Host].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - hosts: <p>Information about the Dedicated Hosts.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(hosts: [Host]?, nextToken: String?) {
self.hosts = hosts
self.nextToken = nextToken
  }
}

enum Snapshotattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `productCodes` = "productCodes"
  case `createVolumePermission` = "createVolumePermission"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Snapshotattributename {
    guard case let .json(json) = body else { fatalError() }
    return Snapshotattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}



public struct PurchaseHostReservationResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Describes the details of the purchase.</p>
 */
  public let purchase: [Purchase]?
/**
<p>The total amount that will be charged to your account when you purchase the reservation.</p>
 */
  public let totalUpfrontPrice: String?
/**
<p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> </p>
 */
  public let clientToken: String?
/**
<p>The total hourly price of the reservation calculated per hour.</p>
 */
  public let totalHourlyPrice: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if purchase != nil { body["purchase"] = purchase! }
    if totalUpfrontPrice != nil { body["totalUpfrontPrice"] = totalUpfrontPrice! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if clientToken != nil { body["clientToken"] = clientToken! }
    if totalHourlyPrice != nil { body["totalHourlyPrice"] = totalHourlyPrice! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PurchaseHostReservationResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PurchaseHostReservationResult(
        purchase: jsonDict["purchase"].flatMap { ($0 is NSNull) ? nil : [Purchase].deserialize(response: response, body: .json($0)) },
      totalUpfrontPrice: jsonDict["totalUpfrontPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      totalHourlyPrice: jsonDict["totalHourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - purchase: <p>Describes the details of the purchase.</p>
      - totalUpfrontPrice: <p>The total amount that will be charged to your account when you purchase the reservation.</p>
      - currencyCode: <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> </p>
      - totalHourlyPrice: <p>The total hourly price of the reservation calculated per hour.</p>
 */
  public init(purchase: [Purchase]?, totalUpfrontPrice: String?, currencyCode: Currencycodevalues?, clientToken: String?, totalHourlyPrice: String?) {
self.purchase = purchase
self.totalUpfrontPrice = totalUpfrontPrice
self.currencyCode = currencyCode
self.clientToken = clientToken
self.totalHourlyPrice = totalHourlyPrice
  }
}

/**
<p>Contains the parameters for DeleteVolume.</p>
 */
public struct DeleteVolumeRequest: RestJsonSerializable {
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VolumeId"] = volumeId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - volumeId: <p>The ID of the volume.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(volumeId: String, dryRun: Bool?) {
self.volumeId = volumeId
self.dryRun = dryRun
  }
}


/**
<p>Information about the Convertible Reserved Instance offering.</p>
 */
public struct TargetConfiguration: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the Convertible Reserved Instance offering.</p>
 */
  public let offeringId: String?
/**
<p>The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request</p>
 */
  public let instanceCount: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if offeringId != nil { body["offeringId"] = offeringId! }
    if instanceCount != nil { body["instanceCount"] = instanceCount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> TargetConfiguration {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return TargetConfiguration(
        offeringId: jsonDict["offeringId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceCount: jsonDict["instanceCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - offeringId: <p>The ID of the Convertible Reserved Instance offering.</p>
      - instanceCount: <p>The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request</p>
 */
  public init(offeringId: String?, instanceCount: Int?) {
self.offeringId = offeringId
self.instanceCount = instanceCount
  }
}


/**
<p>Contains the output of CreateCustomerGateway.</p>
 */
public struct CreateCustomerGatewayResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the customer gateway.</p>
 */
  public let customerGateway: CustomerGateway?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if customerGateway != nil { body["customerGateway"] = customerGateway! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateCustomerGatewayResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateCustomerGatewayResult(
        customerGateway: jsonDict["customerGateway"].flatMap { ($0 is NSNull) ? nil : CustomerGateway.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - customerGateway: <p>Information about the customer gateway.</p>
 */
  public init(customerGateway: CustomerGateway?) {
self.customerGateway = customerGateway
  }
}

/**
<p>Contains the output of DescribeBundleTasks.</p>
 */
public struct DescribeBundleTasksResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more bundle tasks.</p>
 */
  public let bundleTasks: [BundleTask]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if bundleTasks != nil { body["bundleInstanceTasksSet"] = bundleTasks! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeBundleTasksResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeBundleTasksResult(
        bundleTasks: jsonDict["bundleInstanceTasksSet"].flatMap { ($0 is NSNull) ? nil : [BundleTask].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - bundleTasks: <p>Information about one or more bundle tasks.</p>
 */
  public init(bundleTasks: [BundleTask]?) {
self.bundleTasks = bundleTasks
  }
}

/**
<p>Contains the output of GetReservedInstancesExchangeQuote.</p>
 */
public struct GetReservedInstancesExchangeQuoteResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Describes the reason why the exchange can not be completed.</p>
 */
  public let validationFailureReason: String?
/**

 */
  public let targetConfigurationValueRollup: ReservationValue?
/**
<p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be performed.</p>
 */
  public let isValidExchange: Bool?
/**

 */
  public let reservedInstanceValueRollup: ReservationValue?
/**
<p>The configuration of your Convertible Reserved Instances.</p>
 */
  public let reservedInstanceValueSet: [ReservedInstanceReservationValue]?
/**
<p>The total true upfront charge for the exchange.</p>
 */
  public let paymentDue: String?
/**
<p>The currency of the transaction.</p>
 */
  public let currencyCode: String?
/**
<p>The values of the target Convertible Reserved Instances.</p>
 */
  public let targetConfigurationValueSet: [TargetReservationValue]?
/**
<p>The new end date of the reservation term.</p>
 */
  public let outputReservedInstancesWillExpireAt: Date?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if validationFailureReason != nil { body["validationFailureReason"] = validationFailureReason! }
    if targetConfigurationValueRollup != nil { body["targetConfigurationValueRollup"] = targetConfigurationValueRollup! }
    if isValidExchange != nil { body["isValidExchange"] = isValidExchange! }
    if reservedInstanceValueRollup != nil { body["reservedInstanceValueRollup"] = reservedInstanceValueRollup! }
    if reservedInstanceValueSet != nil { body["reservedInstanceValueSet"] = reservedInstanceValueSet! }
    if paymentDue != nil { body["paymentDue"] = paymentDue! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if targetConfigurationValueSet != nil { body["targetConfigurationValueSet"] = targetConfigurationValueSet! }
    if outputReservedInstancesWillExpireAt != nil { body["outputReservedInstancesWillExpireAt"] = outputReservedInstancesWillExpireAt! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> GetReservedInstancesExchangeQuoteResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return GetReservedInstancesExchangeQuoteResult(
        validationFailureReason: jsonDict["validationFailureReason"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      targetConfigurationValueRollup: jsonDict["targetConfigurationValueRollup"].flatMap { ($0 is NSNull) ? nil : ReservationValue.deserialize(response: response, body: .json($0)) },
      isValidExchange: jsonDict["isValidExchange"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      reservedInstanceValueRollup: jsonDict["reservedInstanceValueRollup"].flatMap { ($0 is NSNull) ? nil : ReservationValue.deserialize(response: response, body: .json($0)) },
      reservedInstanceValueSet: jsonDict["reservedInstanceValueSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstanceReservationValue].deserialize(response: response, body: .json($0)) },
      paymentDue: jsonDict["paymentDue"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      targetConfigurationValueSet: jsonDict["targetConfigurationValueSet"].flatMap { ($0 is NSNull) ? nil : [TargetReservationValue].deserialize(response: response, body: .json($0)) },
      outputReservedInstancesWillExpireAt: jsonDict["outputReservedInstancesWillExpireAt"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - validationFailureReason: <p>Describes the reason why the exchange can not be completed.</p>
      - targetConfigurationValueRollup: 
      - isValidExchange: <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be performed.</p>
      - reservedInstanceValueRollup: 
      - reservedInstanceValueSet: <p>The configuration of your Convertible Reserved Instances.</p>
      - paymentDue: <p>The total true upfront charge for the exchange.</p>
      - currencyCode: <p>The currency of the transaction.</p>
      - targetConfigurationValueSet: <p>The values of the target Convertible Reserved Instances.</p>
      - outputReservedInstancesWillExpireAt: <p>The new end date of the reservation term.</p>
 */
  public init(validationFailureReason: String?, targetConfigurationValueRollup: ReservationValue?, isValidExchange: Bool?, reservedInstanceValueRollup: ReservationValue?, reservedInstanceValueSet: [ReservedInstanceReservationValue]?, paymentDue: String?, currencyCode: String?, targetConfigurationValueSet: [TargetReservationValue]?, outputReservedInstancesWillExpireAt: Date?) {
self.validationFailureReason = validationFailureReason
self.targetConfigurationValueRollup = targetConfigurationValueRollup
self.isValidExchange = isValidExchange
self.reservedInstanceValueRollup = reservedInstanceValueRollup
self.reservedInstanceValueSet = reservedInstanceValueSet
self.paymentDue = paymentDue
self.currencyCode = currencyCode
self.targetConfigurationValueSet = targetConfigurationValueSet
self.outputReservedInstancesWillExpireAt = outputReservedInstancesWillExpireAt
  }
}

/**
<p>Describes an instance to export.</p>
 */
public struct InstanceExportDetails: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the resource being exported.</p>
 */
  public let instanceId: String?
/**
<p>The target virtualization environment.</p>
 */
  public let targetEnvironment: Exportenvironment?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceId != nil { body["instanceId"] = instanceId! }
    if targetEnvironment != nil { body["targetEnvironment"] = targetEnvironment! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceExportDetails {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceExportDetails(
        instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      targetEnvironment: jsonDict["targetEnvironment"].flatMap { ($0 is NSNull) ? nil : Exportenvironment.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceId: <p>The ID of the resource being exported.</p>
      - targetEnvironment: <p>The target virtualization environment.</p>
 */
  public init(instanceId: String?, targetEnvironment: Exportenvironment?) {
self.instanceId = instanceId
self.targetEnvironment = targetEnvironment
  }
}

/**
<p>Describes a network ACL.</p>
 */
public struct NetworkAcl: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether this is the default network ACL for the VPC.</p>
 */
  public let isDefault: Bool?
/**
<p>One or more entries (rules) in the network ACL.</p>
 */
  public let entries: [NetworkAclEntry]?
/**
<p>The ID of the network ACL.</p>
 */
  public let networkAclId: String?
/**
<p>The ID of the VPC for the network ACL.</p>
 */
  public let vpcId: String?
/**
<p>Any tags assigned to the network ACL.</p>
 */
  public let tags: [Tag]?
/**
<p>Any associations between the network ACL and one or more subnets</p>
 */
  public let associations: [NetworkAclAssociation]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if isDefault != nil { body["default"] = isDefault! }
    if entries != nil { body["entrySet"] = entries! }
    if networkAclId != nil { body["networkAclId"] = networkAclId! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if tags != nil { body["tagSet"] = tags! }
    if associations != nil { body["associationSet"] = associations! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkAcl {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkAcl(
        isDefault: jsonDict["default"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      entries: jsonDict["entrySet"].flatMap { ($0 is NSNull) ? nil : [NetworkAclEntry].deserialize(response: response, body: .json($0)) },
      networkAclId: jsonDict["networkAclId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      associations: jsonDict["associationSet"].flatMap { ($0 is NSNull) ? nil : [NetworkAclAssociation].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - isDefault: <p>Indicates whether this is the default network ACL for the VPC.</p>
      - entries: <p>One or more entries (rules) in the network ACL.</p>
      - networkAclId: <p>The ID of the network ACL.</p>
      - vpcId: <p>The ID of the VPC for the network ACL.</p>
      - tags: <p>Any tags assigned to the network ACL.</p>
      - associations: <p>Any associations between the network ACL and one or more subnets</p>
 */
  public init(isDefault: Bool?, entries: [NetworkAclEntry]?, networkAclId: String?, vpcId: String?, tags: [Tag]?, associations: [NetworkAclAssociation]?) {
self.isDefault = isDefault
self.entries = entries
self.networkAclId = networkAclId
self.vpcId = vpcId
self.tags = tags
self.associations = associations
  }
}

/**
<p>Contains the output of DescribeKeyPairs.</p>
 */
public struct DescribeKeyPairsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more key pairs.</p>
 */
  public let keyPairs: [KeyPairInfo]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if keyPairs != nil { body["keySet"] = keyPairs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeKeyPairsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeKeyPairsResult(
        keyPairs: jsonDict["keySet"].flatMap { ($0 is NSNull) ? nil : [KeyPairInfo].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - keyPairs: <p>Information about one or more key pairs.</p>
 */
  public init(keyPairs: [KeyPairInfo]?) {
self.keyPairs = keyPairs
  }
}

/**
<p>Contains the parameters for RevokeSecurityGroupIngress.</p>
 */
public struct RevokeSecurityGroupIngressRequest: RestJsonSerializable {
/**
<p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>
 */
  public let toPort: Int?
/**
<p>[EC2-Classic, default VPC] The name of the security group.</p>
 */
  public let groupName: String?
/**
<p>A set of IP permissions. You can't specify a source security group and a CIDR IP address range.</p>
 */
  public let ipPermissions: [IpPermission]?
/**
<p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>
 */
  public let cidrIp: String?
/**
<p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupName: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.</p>
 */
  public let fromPort: Int?
/**
<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). Use <code>-1</code> to specify all.</p>
 */
  public let ipProtocol: String?
/**
<p>The ID of the security group. Required for a security group in a nondefault VPC.</p>
 */
  public let groupId: String?
/**
<p>[EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupOwnerId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if toPort != nil { body["ToPort"] = toPort! }
    if groupName != nil { body["GroupName"] = groupName! }
    if ipPermissions != nil { body["IpPermissions"] = ipPermissions! }
    if cidrIp != nil { body["CidrIp"] = cidrIp! }
    if sourceSecurityGroupName != nil { body["SourceSecurityGroupName"] = sourceSecurityGroupName! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if fromPort != nil { body["FromPort"] = fromPort! }
    if ipProtocol != nil { body["IpProtocol"] = ipProtocol! }
    if groupId != nil { body["GroupId"] = groupId! }
    if sourceSecurityGroupOwnerId != nil { body["SourceSecurityGroupOwnerId"] = sourceSecurityGroupOwnerId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - toPort: <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>
      - groupName: <p>[EC2-Classic, default VPC] The name of the security group.</p>
      - ipPermissions: <p>A set of IP permissions. You can't specify a source security group and a CIDR IP address range.</p>
      - cidrIp: <p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>
      - sourceSecurityGroupName: <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - fromPort: <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.</p>
      - ipProtocol: <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). Use <code>-1</code> to specify all.</p>
      - groupId: <p>The ID of the security group. Required for a security group in a nondefault VPC.</p>
      - sourceSecurityGroupOwnerId: <p>[EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
 */
  public init(toPort: Int?, groupName: String?, ipPermissions: [IpPermission]?, cidrIp: String?, sourceSecurityGroupName: String?, dryRun: Bool?, fromPort: Int?, ipProtocol: String?, groupId: String?, sourceSecurityGroupOwnerId: String?) {
self.toPort = toPort
self.groupName = groupName
self.ipPermissions = ipPermissions
self.cidrIp = cidrIp
self.sourceSecurityGroupName = sourceSecurityGroupName
self.dryRun = dryRun
self.fromPort = fromPort
self.ipProtocol = ipProtocol
self.groupId = groupId
self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
  }
}

/**
<p>Describes a private IP address for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesPrivateIpAddressConfig: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether this is a primary IP address. Otherwise, this is a secondary IP address.</p>
 */
  public let primary: Bool?
/**
<p>The IP address.</p>
 */
  public let privateIpAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if primary != nil { body["Primary"] = primary! }
    if privateIpAddress != nil { body["PrivateIpAddress"] = privateIpAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesPrivateIpAddressConfig {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesPrivateIpAddressConfig(
        primary: jsonDict["Primary"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["PrivateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - primary: <p>Indicates whether this is a primary IP address. Otherwise, this is a secondary IP address.</p>
      - privateIpAddress: <p>The IP address.</p>
 */
  public init(primary: Bool?, privateIpAddress: String?) {
self.primary = primary
self.privateIpAddress = privateIpAddress
  }
}

/**
<p>Contains the output of CancelReservedInstancesListing.</p>
 */
public struct CancelReservedInstancesListingResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Reserved Instance listing.</p>
 */
  public let reservedInstancesListings: [ReservedInstancesListing]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesListings != nil { body["reservedInstancesListingsSet"] = reservedInstancesListings! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelReservedInstancesListingResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelReservedInstancesListingResult(
        reservedInstancesListings: jsonDict["reservedInstancesListingsSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesListing].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesListings: <p>The Reserved Instance listing.</p>
 */
  public init(reservedInstancesListings: [ReservedInstancesListing]?) {
self.reservedInstancesListings = reservedInstancesListings
  }
}

/**
<p>Contains the parameters for accepting the quote.</p>
 */
public struct AcceptReservedInstancesExchangeQuoteRequest: RestJsonSerializable {
/**
<p>The IDs of the Convertible Reserved Instances that you want to exchange for other Convertible Reserved Instances of the same or higher value.</p>
 */
  public let reservedInstanceIds: [String]
/**
<p>The configurations of the Convertible Reserved Instance offerings you are purchasing in this exchange.</p>
 */
  public let targetConfigurations: [TargetConfigurationRequest]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ReservedInstanceId"] = reservedInstanceIds
    if targetConfigurations != nil { body["TargetConfiguration"] = targetConfigurations! }
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstanceIds: <p>The IDs of the Convertible Reserved Instances that you want to exchange for other Convertible Reserved Instances of the same or higher value.</p>
      - targetConfigurations: <p>The configurations of the Convertible Reserved Instance offerings you are purchasing in this exchange.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(reservedInstanceIds: [String], targetConfigurations: [TargetConfigurationRequest]?, dryRun: Bool?) {
self.reservedInstanceIds = reservedInstanceIds
self.targetConfigurations = targetConfigurations
self.dryRun = dryRun
  }
}


enum State: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "Pending"
  case `available` = "Available"
  case `deleting` = "Deleting"
  case `deleted` = "Deleted"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> State {
    guard case let .json(json) = body else { fatalError() }
    return State(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for BundleInstance.</p>
 */
public struct BundleInstanceRequest: RestJsonSerializable {
/**
<p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p>
 */
  public let instanceId: String
/**
<p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
 */
  public let storage: Storage
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceId
    body["Storage"] = storage
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceId: <p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p>
      - storage: <p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceId: String, storage: Storage, dryRun: Bool?) {
self.instanceId = instanceId
self.storage = storage
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeVpcClassicLink.</p>
 */
public struct DescribeVpcClassicLinkRequest: RestJsonSerializable {
/**
<p>One or more VPCs for which you want to describe the ClassicLink status.</p>
 */
  public let vpcIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcIds != nil { body["VpcId"] = vpcIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcIds: <p>One or more VPCs for which you want to describe the ClassicLink status.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.vpcIds = vpcIds
self.filters = filters
self.dryRun = dryRun
  }
}




/**
<p>Contains the parameters for DescribeVolumeAttribute.</p>
 */
public struct DescribeVolumeAttributeRequest: RestJsonSerializable {
/**
<p>The instance attribute.</p>
 */
  public let attribute: Volumeattributename?
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attribute != nil { body["Attribute"] = attribute! }
    body["VolumeId"] = volumeId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attribute: <p>The instance attribute.</p>
      - volumeId: <p>The ID of the volume.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attribute: Volumeattributename?, volumeId: String, dryRun: Bool?) {
self.attribute = attribute
self.volumeId = volumeId
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for GetPasswordData.</p>
 */
public struct GetPasswordDataRequest: RestJsonSerializable {
/**
<p>The ID of the Windows instance.</p>
 */
  public let instanceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceId: <p>The ID of the Windows instance.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceId: String, dryRun: Bool?) {
self.instanceId = instanceId
self.dryRun = dryRun
  }
}

enum Riproductdescription: String, RestJsonDeserializable, RestJsonSerializable {
  case `linuxUNIX` = "Linux/UNIX"
  case `linuxUNIXAmazonVPC` = "Linux/UNIX (Amazon VPC)"
  case `windows` = "Windows"
  case `windowsAmazonVPC` = "Windows (Amazon VPC)"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Riproductdescription {
    guard case let .json(json) = body else { fatalError() }
    return Riproductdescription(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the parameters for ReportInstanceStatus.</p>
 */
public struct ReportInstanceStatusRequest: RestJsonSerializable {
/**
<p>The time at which the reported instance health state began.</p>
 */
  public let startTime: Date?
/**
<p>The status of all instances listed.</p>
 */
  public let status: Reportstatustype
/**
<p>The time at which the reported instance health state ended.</p>
 */
  public let endTime: Date?
/**
<p>One or more instances.</p>
 */
  public let instances: [String]
/**
<p>One or more reason codes that describes the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems which I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems which I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems which I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul>
 */
  public let reasonCodes: [Reportinstancereasoncodes]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Descriptive text about the health state of your instance.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if startTime != nil { body["startTime"] = startTime! }
    body["status"] = status
    if endTime != nil { body["endTime"] = endTime! }
    body["instanceId"] = instances
    body["reasonCode"] = reasonCodes
    if dryRun != nil { body["dryRun"] = dryRun! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - startTime: <p>The time at which the reported instance health state began.</p>
      - status: <p>The status of all instances listed.</p>
      - endTime: <p>The time at which the reported instance health state ended.</p>
      - instances: <p>One or more instances.</p>
      - reasonCodes: <p>One or more reason codes that describes the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems which I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems which I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems which I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - description: <p>Descriptive text about the health state of your instance.</p>
 */
  public init(startTime: Date?, status: Reportstatustype, endTime: Date?, instances: [String], reasonCodes: [Reportinstancereasoncodes], dryRun: Bool?, description: String?) {
self.startTime = startTime
self.status = status
self.endTime = endTime
self.instances = instances
self.reasonCodes = reasonCodes
self.dryRun = dryRun
self.description = description
  }
}

/**
<p>Contains the output of AllocateHosts.</p>
 */
public struct AllocateHostsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the allocated Dedicated Host. This is used when you want to launch an instance onto a specific host.</p>
 */
  public let hostIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if hostIds != nil { body["hostIdSet"] = hostIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AllocateHostsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AllocateHostsResult(
        hostIds: jsonDict["hostIdSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - hostIds: <p>The ID of the allocated Dedicated Host. This is used when you want to launch an instance onto a specific host.</p>
 */
  public init(hostIds: [String]?) {
self.hostIds = hostIds
  }
}

/**
<p>Describes a tag.</p>
 */
public struct Tag: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The value of the tag.</p> <p>Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.</p>
 */
  public let value: String?
/**
<p>The key of the tag.</p> <p>Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with <code>aws:</code> </p>
 */
  public let key: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if value != nil { body["value"] = value! }
    if key != nil { body["key"] = key! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Tag {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Tag(
        value: jsonDict["value"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      key: jsonDict["key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - value: <p>The value of the tag.</p> <p>Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.</p>
      - key: <p>The key of the tag.</p> <p>Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with <code>aws:</code> </p>
 */
  public init(value: String?, key: String?) {
self.value = value
self.key = key
  }
}

/**
<p>Describes a tag.</p>
 */
public struct TagDescription: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The tag key.</p>
 */
  public let key: String?
/**
<p>The ID of the resource. For example, <code>ami-1a2b3c4d</code>.</p>
 */
  public let resourceId: String?
/**
<p>The tag value.</p>
 */
  public let value: String?
/**
<p>The resource type.</p>
 */
  public let resourceType: Resourcetype?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if key != nil { body["key"] = key! }
    if resourceId != nil { body["resourceId"] = resourceId! }
    if value != nil { body["value"] = value! }
    if resourceType != nil { body["resourceType"] = resourceType! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> TagDescription {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return TagDescription(
        key: jsonDict["key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      resourceId: jsonDict["resourceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      value: jsonDict["value"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      resourceType: jsonDict["resourceType"].flatMap { ($0 is NSNull) ? nil : Resourcetype.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - key: <p>The tag key.</p>
      - resourceId: <p>The ID of the resource. For example, <code>ami-1a2b3c4d</code>.</p>
      - value: <p>The tag value.</p>
      - resourceType: <p>The resource type.</p>
 */
  public init(key: String?, resourceId: String?, value: String?, resourceType: Resourcetype?) {
self.key = key
self.resourceId = resourceId
self.value = value
self.resourceType = resourceType
  }
}

/**
<p>Contains the parameters for DescribeRegions.</p>
 */
public struct DescribeRegionsRequest: RestJsonSerializable {
/**
<p>The names of one or more regions.</p>
 */
  public let regionNames: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>endpoint</code> - The endpoint of the region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the region (for example, <code>us-east-1</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if regionNames != nil { body["RegionName"] = regionNames! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - regionNames: <p>The names of one or more regions.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>endpoint</code> - The endpoint of the region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the region (for example, <code>us-east-1</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(regionNames: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.regionNames = regionNames
self.filters = filters
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for DescribeSpotDatafeedSubscription.</p>
 */
public struct DescribeSpotDatafeedSubscriptionRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(dryRun: Bool?) {
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeSnapshotAttribute.</p>
 */
public struct DescribeSnapshotAttributeRequest: RestJsonSerializable {
/**
<p>The snapshot attribute you would like to view.</p>
 */
  public let attribute: Snapshotattributename
/**
<p>The ID of the EBS snapshot.</p>
 */
  public let snapshotId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["Attribute"] = attribute
    body["SnapshotId"] = snapshotId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attribute: <p>The snapshot attribute you would like to view.</p>
      - snapshotId: <p>The ID of the EBS snapshot.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attribute: Snapshotattributename, snapshotId: String, dryRun: Bool?) {
self.attribute = attribute
self.snapshotId = snapshotId
self.dryRun = dryRun
  }
}


/**
<p>Contains the output of DescribeSnapshotAttribute.</p>
 */
public struct DescribeSnapshotAttributeResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A list of permissions for creating volumes from the snapshot.</p>
 */
  public let createVolumePermissions: [CreateVolumePermission]?
/**
<p>A list of product codes.</p>
 */
  public let productCodes: [ProductCode]?
/**
<p>The ID of the EBS snapshot.</p>
 */
  public let snapshotId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if createVolumePermissions != nil { body["createVolumePermission"] = createVolumePermissions! }
    if productCodes != nil { body["productCodes"] = productCodes! }
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSnapshotAttributeResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSnapshotAttributeResult(
        createVolumePermissions: jsonDict["createVolumePermission"].flatMap { ($0 is NSNull) ? nil : [CreateVolumePermission].deserialize(response: response, body: .json($0)) },
      productCodes: jsonDict["productCodes"].flatMap { ($0 is NSNull) ? nil : [ProductCode].deserialize(response: response, body: .json($0)) },
      snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - createVolumePermissions: <p>A list of permissions for creating volumes from the snapshot.</p>
      - productCodes: <p>A list of product codes.</p>
      - snapshotId: <p>The ID of the EBS snapshot.</p>
 */
  public init(createVolumePermissions: [CreateVolumePermission]?, productCodes: [ProductCode]?, snapshotId: String?) {
self.createVolumePermissions = createVolumePermissions
self.productCodes = productCodes
self.snapshotId = snapshotId
  }
}

/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
public struct ProvisionedBandwidth: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public let provisioned: String?
/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public let status: String?
/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public let requestTime: Date?
/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public let provisionTime: Date?
/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public let requested: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if provisioned != nil { body["provisioned"] = provisioned! }
    if status != nil { body["status"] = status! }
    if requestTime != nil { body["requestTime"] = requestTime! }
    if provisionTime != nil { body["provisionTime"] = provisionTime! }
    if requested != nil { body["requested"] = requested! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ProvisionedBandwidth {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ProvisionedBandwidth(
        provisioned: jsonDict["provisioned"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      requestTime: jsonDict["requestTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      provisionTime: jsonDict["provisionTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      requested: jsonDict["requested"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - provisioned: <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
      - status: <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
      - requestTime: <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
      - provisionTime: <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
      - requested: <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public init(provisioned: String?, status: String?, requestTime: Date?, provisionTime: Date?, requested: String?) {
self.provisioned = provisioned
self.status = status
self.requestTime = requestTime
self.provisionTime = provisionTime
self.requested = requested
  }
}

/**
<p>Describes a recurring charge.</p>
 */
public struct RecurringCharge: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The frequency of the recurring charge.</p>
 */
  public let frequency: Recurringchargefrequency?
/**
<p>The amount of the recurring charge.</p>
 */
  public let amount: Double?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if frequency != nil { body["frequency"] = frequency! }
    if amount != nil { body["amount"] = amount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RecurringCharge {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RecurringCharge(
        frequency: jsonDict["frequency"].flatMap { ($0 is NSNull) ? nil : Recurringchargefrequency.deserialize(response: response, body: .json($0)) },
      amount: jsonDict["amount"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - frequency: <p>The frequency of the recurring charge.</p>
      - amount: <p>The amount of the recurring charge.</p>
 */
  public init(frequency: Recurringchargefrequency?, amount: Double?) {
self.frequency = frequency
self.amount = amount
  }
}

/**
<p>Contains the parameters for DeleteVpcPeeringConnection.</p>
 */
public struct DeleteVpcPeeringConnectionRequest: RestJsonSerializable {
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcPeeringConnectionId"] = vpcPeeringConnectionId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcPeeringConnectionId: String, dryRun: Bool?) {
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of AssociateRouteTable.</p>
 */
public struct AssociateRouteTableResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The route table association ID (needed to disassociate the route table).</p>
 */
  public let associationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if associationId != nil { body["associationId"] = associationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AssociateRouteTableResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AssociateRouteTableResult(
        associationId: jsonDict["associationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - associationId: <p>The route table association ID (needed to disassociate the route table).</p>
 */
  public init(associationId: String?) {
self.associationId = associationId
  }
}

/**
<p>Contains the parameters for DescribeAvailabilityZones.</p>
 */
public struct DescribeAvailabilityZonesRequest: RestJsonSerializable {
/**
<p>The names of one or more Availability Zones.</p>
 */
  public let zoneNames: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>message</code> - Information about the Availability Zone.</p> </li> <li> <p> <code>region-name</code> - The name of the region for the Availability Zone (for example, <code>us-east-1</code>).</p> </li> <li> <p> <code>state</code> - The state of the Availability Zone (<code>available</code> | <code>information</code> | <code>impaired</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>zone-name</code> - The name of the Availability Zone (for example, <code>us-east-1a</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if zoneNames != nil { body["ZoneName"] = zoneNames! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - zoneNames: <p>The names of one or more Availability Zones.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>message</code> - Information about the Availability Zone.</p> </li> <li> <p> <code>region-name</code> - The name of the region for the Availability Zone (for example, <code>us-east-1</code>).</p> </li> <li> <p> <code>state</code> - The state of the Availability Zone (<code>available</code> | <code>information</code> | <code>impaired</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>zone-name</code> - The name of the Availability Zone (for example, <code>us-east-1a</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(zoneNames: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.zoneNames = zoneNames
self.filters = filters
self.dryRun = dryRun
  }
}


/**
<p>Describes the ICMP type and code.</p>
 */
public struct IcmpTypeCode: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
 */
  public let ec2Type: Int?
/**
<p>The ICMP type. A value of -1 means all types.</p>
 */
  public let code: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Type != nil { body["type"] = ec2Type! }
    if code != nil { body["code"] = code! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> IcmpTypeCode {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return IcmpTypeCode(
        ec2Type: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Type: <p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
      - code: <p>The ICMP type. A value of -1 means all types.</p>
 */
  public init(ec2Type: Int?, code: Int?) {
self.ec2Type = ec2Type
self.code = code
  }
}

/**
<p>Contains the parameters for DeleteFlowLogs.</p>
 */
public struct DeleteFlowLogsRequest: RestJsonSerializable {
/**
<p>One or more flow log IDs.</p>
 */
  public let flowLogIds: [String]

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["FlowLogId"] = flowLogIds
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - flowLogIds: <p>One or more flow log IDs.</p>
 */
  public init(flowLogIds: [String]) {
self.flowLogIds = flowLogIds
  }
}

/**
<p>Contains the parameters for DescribeVpnConnections.</p>
 */
public struct DescribeVpnConnectionsRequest: RestJsonSerializable {
/**
<p>One or more VPN connection IDs.</p> <p>Default: Describes your VPN connections.</p>
 */
  public let vpnConnectionIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>customer-gateway-configuration</code> - The configuration information for the customer gateway.</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of a customer gateway associated with the VPN connection.</p> </li> <li> <p> <code>state</code> - The state of the VPN connection (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>option.static-routes-only</code> - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The destination CIDR block. This corresponds to the subnet used in a customer data center.</p> </li> <li> <p> <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with a BGP device.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>type</code> - The type of VPN connection. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-connection-id</code> - The ID of the VPN connection.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated with the VPN connection.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnConnectionIds != nil { body["VpnConnectionId"] = vpnConnectionIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpnConnectionIds: <p>One or more VPN connection IDs.</p> <p>Default: Describes your VPN connections.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>customer-gateway-configuration</code> - The configuration information for the customer gateway.</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of a customer gateway associated with the VPN connection.</p> </li> <li> <p> <code>state</code> - The state of the VPN connection (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>option.static-routes-only</code> - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The destination CIDR block. This corresponds to the subnet used in a customer data center.</p> </li> <li> <p> <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with a BGP device.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>type</code> - The type of VPN connection. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-connection-id</code> - The ID of the VPN connection.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated with the VPN connection.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpnConnectionIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.vpnConnectionIds = vpnConnectionIds
self.filters = filters
self.dryRun = dryRun
  }
}

/**
<p>Describes the limit price of a Reserved Instance offering.</p>
 */
public struct ReservedInstanceLimitPrice: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).</p>
 */
  public let amount: Double?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if amount != nil { body["amount"] = amount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstanceLimitPrice {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstanceLimitPrice(
        currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      amount: jsonDict["amount"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - currencyCode: <p>The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>.</p>
      - amount: <p>Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).</p>
 */
  public init(currencyCode: Currencycodevalues?, amount: Double?) {
self.currencyCode = currencyCode
self.amount = amount
  }
}

public struct NewDhcpConfiguration: RestJsonSerializable, RestJsonDeserializable {
/**

 */
  public let key: String?
/**

 */
  public let values: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if key != nil { body["key"] = key! }
    if values != nil { body["Value"] = values! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NewDhcpConfiguration {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NewDhcpConfiguration(
        key: jsonDict["key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      values: jsonDict["Value"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - key: 
      - values: 
 */
  public init(key: String?, values: [String]?) {
self.key = key
self.values = values
  }
}


/**
<p>Describes an entry in a network ACL.</p>
 */
public struct NetworkAclEntry: RestJsonSerializable, RestJsonDeserializable {
/**
<p>TCP or UDP protocols: The range of ports the rule applies to.</p>
 */
  public let portRange: PortRange?
/**
<p>ICMP protocol: The ICMP type and code.</p>
 */
  public let icmpTypeCode: IcmpTypeCode?
/**
<p>The rule number for the entry. ACL entries are processed in ascending order by rule number.</p>
 */
  public let ruleNumber: Int?
/**
<p>The protocol. A value of <code>-1</code> means all protocols.</p>
 */
  public let ec2Protocol: String?
/**
<p>Indicates whether to allow or deny the traffic that matches the rule.</p>
 */
  public let ruleAction: Ruleaction?
/**
<p>Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).</p>
 */
  public let egress: Bool?
/**
<p>The network range to allow or deny, in CIDR notation.</p>
 */
  public let cidrBlock: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if portRange != nil { body["portRange"] = portRange! }
    if icmpTypeCode != nil { body["icmpTypeCode"] = icmpTypeCode! }
    if ruleNumber != nil { body["ruleNumber"] = ruleNumber! }
    if ec2Protocol != nil { body["protocol"] = ec2Protocol! }
    if ruleAction != nil { body["ruleAction"] = ruleAction! }
    if egress != nil { body["egress"] = egress! }
    if cidrBlock != nil { body["cidrBlock"] = cidrBlock! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkAclEntry {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkAclEntry(
        portRange: jsonDict["portRange"].flatMap { ($0 is NSNull) ? nil : PortRange.deserialize(response: response, body: .json($0)) },
      icmpTypeCode: jsonDict["icmpTypeCode"].flatMap { ($0 is NSNull) ? nil : IcmpTypeCode.deserialize(response: response, body: .json($0)) },
      ruleNumber: jsonDict["ruleNumber"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      ec2Protocol: jsonDict["protocol"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ruleAction: jsonDict["ruleAction"].flatMap { ($0 is NSNull) ? nil : Ruleaction.deserialize(response: response, body: .json($0)) },
      egress: jsonDict["egress"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      cidrBlock: jsonDict["cidrBlock"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - portRange: <p>TCP or UDP protocols: The range of ports the rule applies to.</p>
      - icmpTypeCode: <p>ICMP protocol: The ICMP type and code.</p>
      - ruleNumber: <p>The rule number for the entry. ACL entries are processed in ascending order by rule number.</p>
      - ec2Protocol: <p>The protocol. A value of <code>-1</code> means all protocols.</p>
      - ruleAction: <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
      - egress: <p>Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).</p>
      - cidrBlock: <p>The network range to allow or deny, in CIDR notation.</p>
 */
  public init(portRange: PortRange?, icmpTypeCode: IcmpTypeCode?, ruleNumber: Int?, ec2Protocol: String?, ruleAction: Ruleaction?, egress: Bool?, cidrBlock: String?) {
self.portRange = portRange
self.icmpTypeCode = icmpTypeCode
self.ruleNumber = ruleNumber
self.ec2Protocol = ec2Protocol
self.ruleAction = ruleAction
self.egress = egress
self.cidrBlock = cidrBlock
  }
}

/**
<p>Describes a VPC.</p>
 */
public struct Vpc: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether the VPC is the default VPC.</p>
 */
  public let isDefault: Bool?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>Any tags assigned to the VPC.</p>
 */
  public let tags: [Tag]?
/**
<p>The ID of the set of DHCP options you've associated with the VPC (or <code>default</code> if the default options are associated with the VPC).</p>
 */
  public let dhcpOptionsId: String?
/**
<p>The allowed tenancy of instances launched into the VPC.</p>
 */
  public let instanceTenancy: Tenancy?
/**
<p>The current state of the VPC.</p>
 */
  public let state: Vpcstate?
/**
<p>The CIDR block for the VPC.</p>
 */
  public let cidrBlock: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if isDefault != nil { body["isDefault"] = isDefault! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if tags != nil { body["tagSet"] = tags! }
    if dhcpOptionsId != nil { body["dhcpOptionsId"] = dhcpOptionsId! }
    if instanceTenancy != nil { body["instanceTenancy"] = instanceTenancy! }
    if state != nil { body["state"] = state! }
    if cidrBlock != nil { body["cidrBlock"] = cidrBlock! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Vpc {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Vpc(
        isDefault: jsonDict["isDefault"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      dhcpOptionsId: jsonDict["dhcpOptionsId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceTenancy: jsonDict["instanceTenancy"].flatMap { ($0 is NSNull) ? nil : Tenancy.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Vpcstate.deserialize(response: response, body: .json($0)) },
      cidrBlock: jsonDict["cidrBlock"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - isDefault: <p>Indicates whether the VPC is the default VPC.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - tags: <p>Any tags assigned to the VPC.</p>
      - dhcpOptionsId: <p>The ID of the set of DHCP options you've associated with the VPC (or <code>default</code> if the default options are associated with the VPC).</p>
      - instanceTenancy: <p>The allowed tenancy of instances launched into the VPC.</p>
      - state: <p>The current state of the VPC.</p>
      - cidrBlock: <p>The CIDR block for the VPC.</p>
 */
  public init(isDefault: Bool?, vpcId: String?, tags: [Tag]?, dhcpOptionsId: String?, instanceTenancy: Tenancy?, state: Vpcstate?, cidrBlock: String?) {
self.isDefault = isDefault
self.vpcId = vpcId
self.tags = tags
self.dhcpOptionsId = dhcpOptionsId
self.instanceTenancy = instanceTenancy
self.state = state
self.cidrBlock = cidrBlock
  }
}

/**
<p>Describes a message about an Availability Zone.</p>
 */
public struct AvailabilityZoneMessage: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The message about the Availability Zone.</p>
 */
  public let message: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if message != nil { body["message"] = message! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AvailabilityZoneMessage {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AvailabilityZoneMessage(
        message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - message: <p>The message about the Availability Zone.</p>
 */
  public init(message: String?) {
self.message = message
  }
}

public struct DescribeStaleSecurityGroupsRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The token for the next set of items to return. (You received this token from a prior call.)</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["DryRun"] = dryRun! }
    body["VpcId"] = vpcId
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - nextToken: <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
      - maxResults: <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
 */
  public init(dryRun: Bool?, vpcId: String, nextToken: String?, maxResults: Int?) {
self.dryRun = dryRun
self.vpcId = vpcId
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for RestoreAddressToClassic.</p>
 */
public struct RestoreAddressToClassicRequest: RestJsonSerializable {
/**
<p>The Elastic IP address.</p>
 */
  public let publicIp: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["publicIp"] = publicIp
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - publicIp: <p>The Elastic IP address.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(publicIp: String, dryRun: Bool?) {
self.publicIp = publicIp
self.dryRun = dryRun
  }
}

/**
<p>Describes a route table.</p>
 */
public struct RouteTable: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The associations between the route table and one or more subnets.</p>
 */
  public let associations: [RouteTableAssociation]?
/**
<p>Any virtual private gateway (VGW) propagating routes.</p>
 */
  public let propagatingVgws: [PropagatingVgw]?
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>Any tags assigned to the route table.</p>
 */
  public let tags: [Tag]?
/**
<p>The routes in the route table.</p>
 */
  public let routes: [Route]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if associations != nil { body["associationSet"] = associations! }
    if propagatingVgws != nil { body["propagatingVgwSet"] = propagatingVgws! }
    if routeTableId != nil { body["routeTableId"] = routeTableId! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if tags != nil { body["tagSet"] = tags! }
    if routes != nil { body["routeSet"] = routes! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RouteTable {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RouteTable(
        associations: jsonDict["associationSet"].flatMap { ($0 is NSNull) ? nil : [RouteTableAssociation].deserialize(response: response, body: .json($0)) },
      propagatingVgws: jsonDict["propagatingVgwSet"].flatMap { ($0 is NSNull) ? nil : [PropagatingVgw].deserialize(response: response, body: .json($0)) },
      routeTableId: jsonDict["routeTableId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      routes: jsonDict["routeSet"].flatMap { ($0 is NSNull) ? nil : [Route].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - associations: <p>The associations between the route table and one or more subnets.</p>
      - propagatingVgws: <p>Any virtual private gateway (VGW) propagating routes.</p>
      - routeTableId: <p>The ID of the route table.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - tags: <p>Any tags assigned to the route table.</p>
      - routes: <p>The routes in the route table.</p>
 */
  public init(associations: [RouteTableAssociation]?, propagatingVgws: [PropagatingVgw]?, routeTableId: String?, vpcId: String?, tags: [Tag]?, routes: [Route]?) {
self.associations = associations
self.propagatingVgws = propagatingVgws
self.routeTableId = routeTableId
self.vpcId = vpcId
self.tags = tags
self.routes = routes
  }
}

enum Ruleaction: String, RestJsonDeserializable, RestJsonSerializable {
  case `allow` = "allow"
  case `deny` = "deny"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Ruleaction {
    guard case let .json(json) = body else { fatalError() }
    return Ruleaction(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes a volume status event.</p>
 */
public struct VolumeStatusEvent: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The earliest start time of the event.</p>
 */
  public let notBefore: Date?
/**
<p>The type of this event.</p>
 */
  public let eventType: String?
/**
<p>The latest end time of the event.</p>
 */
  public let notAfter: Date?
/**
<p>The ID of this event.</p>
 */
  public let eventId: String?
/**
<p>A description of the event.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if notBefore != nil { body["notBefore"] = notBefore! }
    if eventType != nil { body["eventType"] = eventType! }
    if notAfter != nil { body["notAfter"] = notAfter! }
    if eventId != nil { body["eventId"] = eventId! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeStatusEvent {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeStatusEvent(
        notBefore: jsonDict["notBefore"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      eventType: jsonDict["eventType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      notAfter: jsonDict["notAfter"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      eventId: jsonDict["eventId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - notBefore: <p>The earliest start time of the event.</p>
      - eventType: <p>The type of this event.</p>
      - notAfter: <p>The latest end time of the event.</p>
      - eventId: <p>The ID of this event.</p>
      - description: <p>A description of the event.</p>
 */
  public init(notBefore: Date?, eventType: String?, notAfter: Date?, eventId: String?, description: String?) {
self.notBefore = notBefore
self.eventType = eventType
self.notAfter = notAfter
self.eventId = eventId
self.description = description
  }
}

/**
<p>Contains the parameters for ModifyVpcEndpoint.</p>
 */
public struct ModifyVpcEndpointRequest: RestJsonSerializable {
/**
<p>One or more route tables IDs to associate with the endpoint.</p>
 */
  public let addRouteTableIds: [String]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the endpoint.</p>
 */
  public let vpcEndpointId: String
/**
<p>A policy document to attach to the endpoint. The policy must be in valid JSON format.</p>
 */
  public let policyDocument: String?
/**
<p>Specify <code>true</code> to reset the policy document to the default policy. The default policy allows access to the service.</p>
 */
  public let resetPolicy: Bool?
/**
<p>One or more route table IDs to disassociate from the endpoint.</p>
 */
  public let removeRouteTableIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if addRouteTableIds != nil { body["AddRouteTableId"] = addRouteTableIds! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    body["VpcEndpointId"] = vpcEndpointId
    if policyDocument != nil { body["PolicyDocument"] = policyDocument! }
    if resetPolicy != nil { body["ResetPolicy"] = resetPolicy! }
    if removeRouteTableIds != nil { body["RemoveRouteTableId"] = removeRouteTableIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - addRouteTableIds: <p>One or more route tables IDs to associate with the endpoint.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcEndpointId: <p>The ID of the endpoint.</p>
      - policyDocument: <p>A policy document to attach to the endpoint. The policy must be in valid JSON format.</p>
      - resetPolicy: <p>Specify <code>true</code> to reset the policy document to the default policy. The default policy allows access to the service.</p>
      - removeRouteTableIds: <p>One or more route table IDs to disassociate from the endpoint.</p>
 */
  public init(addRouteTableIds: [String]?, dryRun: Bool?, vpcEndpointId: String, policyDocument: String?, resetPolicy: Bool?, removeRouteTableIds: [String]?) {
self.addRouteTableIds = addRouteTableIds
self.dryRun = dryRun
self.vpcEndpointId = vpcEndpointId
self.policyDocument = policyDocument
self.resetPolicy = resetPolicy
self.removeRouteTableIds = removeRouteTableIds
  }
}

/**
<p>Describes whether a VPC is enabled for ClassicLink.</p>
 */
public struct VpcClassicLink: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>Any tags assigned to the VPC.</p>
 */
  public let tags: [Tag]?
/**
<p>Indicates whether the VPC is enabled for ClassicLink.</p>
 */
  public let classicLinkEnabled: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["vpcId"] = vpcId! }
    if tags != nil { body["tagSet"] = tags! }
    if classicLinkEnabled != nil { body["classicLinkEnabled"] = classicLinkEnabled! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcClassicLink {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcClassicLink(
        vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      classicLinkEnabled: jsonDict["classicLinkEnabled"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - tags: <p>Any tags assigned to the VPC.</p>
      - classicLinkEnabled: <p>Indicates whether the VPC is enabled for ClassicLink.</p>
 */
  public init(vpcId: String?, tags: [Tag]?, classicLinkEnabled: Bool?) {
self.vpcId = vpcId
self.tags = tags
self.classicLinkEnabled = classicLinkEnabled
  }
}

enum Instancetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `t1micro` = "t1.micro"
  case `t2nano` = "t2.nano"
  case `t2micro` = "t2.micro"
  case `t2small` = "t2.small"
  case `t2medium` = "t2.medium"
  case `t2large` = "t2.large"
  case `m1small` = "m1.small"
  case `m1medium` = "m1.medium"
  case `m1large` = "m1.large"
  case `m1xlarge` = "m1.xlarge"
  case `m3medium` = "m3.medium"
  case `m3large` = "m3.large"
  case `m3xlarge` = "m3.xlarge"
  case `m32xlarge` = "m3.2xlarge"
  case `m4large` = "m4.large"
  case `m4xlarge` = "m4.xlarge"
  case `m42xlarge` = "m4.2xlarge"
  case `m44xlarge` = "m4.4xlarge"
  case `m410xlarge` = "m4.10xlarge"
  case `m416xlarge` = "m4.16xlarge"
  case `m2xlarge` = "m2.xlarge"
  case `m22xlarge` = "m2.2xlarge"
  case `m24xlarge` = "m2.4xlarge"
  case `cr18xlarge` = "cr1.8xlarge"
  case `r3large` = "r3.large"
  case `r3xlarge` = "r3.xlarge"
  case `r32xlarge` = "r3.2xlarge"
  case `r34xlarge` = "r3.4xlarge"
  case `r38xlarge` = "r3.8xlarge"
  case `x116xlarge` = "x1.16xlarge"
  case `x132xlarge` = "x1.32xlarge"
  case `i2xlarge` = "i2.xlarge"
  case `i22xlarge` = "i2.2xlarge"
  case `i24xlarge` = "i2.4xlarge"
  case `i28xlarge` = "i2.8xlarge"
  case `hi14xlarge` = "hi1.4xlarge"
  case `hs18xlarge` = "hs1.8xlarge"
  case `c1medium` = "c1.medium"
  case `c1xlarge` = "c1.xlarge"
  case `c3large` = "c3.large"
  case `c3xlarge` = "c3.xlarge"
  case `c32xlarge` = "c3.2xlarge"
  case `c34xlarge` = "c3.4xlarge"
  case `c38xlarge` = "c3.8xlarge"
  case `c4large` = "c4.large"
  case `c4xlarge` = "c4.xlarge"
  case `c42xlarge` = "c4.2xlarge"
  case `c44xlarge` = "c4.4xlarge"
  case `c48xlarge` = "c4.8xlarge"
  case `cc14xlarge` = "cc1.4xlarge"
  case `cc28xlarge` = "cc2.8xlarge"
  case `g22xlarge` = "g2.2xlarge"
  case `g28xlarge` = "g2.8xlarge"
  case `cg14xlarge` = "cg1.4xlarge"
  case `p2xlarge` = "p2.xlarge"
  case `p28xlarge` = "p2.8xlarge"
  case `p216xlarge` = "p2.16xlarge"
  case `d2xlarge` = "d2.xlarge"
  case `d22xlarge` = "d2.2xlarge"
  case `d24xlarge` = "d2.4xlarge"
  case `d28xlarge` = "d2.8xlarge"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Instancetype {
    guard case let .json(json) = body else { fatalError() }
    return Instancetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

public struct DescribeHostReservationOfferingsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the offerings.</p>
 */
  public let offeringSet: [HostOffering]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if offeringSet != nil { body["offeringSet"] = offeringSet! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeHostReservationOfferingsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeHostReservationOfferingsResult(
        offeringSet: jsonDict["offeringSet"].flatMap { ($0 is NSNull) ? nil : [HostOffering].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - offeringSet: <p>Information about the offerings.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(offeringSet: [HostOffering]?, nextToken: String?) {
self.offeringSet = offeringSet
self.nextToken = nextToken
  }
}


/**
<p>Describes an association between a network ACL and a subnet.</p>
 */
public struct NetworkAclAssociation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String?
/**
<p>The ID of the association between a network ACL and a subnet.</p>
 */
  public let networkAclAssociationId: String?
/**
<p>The ID of the network ACL.</p>
 */
  public let networkAclId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnetId != nil { body["subnetId"] = subnetId! }
    if networkAclAssociationId != nil { body["networkAclAssociationId"] = networkAclAssociationId! }
    if networkAclId != nil { body["networkAclId"] = networkAclId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkAclAssociation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkAclAssociation(
        subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkAclAssociationId: jsonDict["networkAclAssociationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkAclId: jsonDict["networkAclId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnetId: <p>The ID of the subnet.</p>
      - networkAclAssociationId: <p>The ID of the association between a network ACL and a subnet.</p>
      - networkAclId: <p>The ID of the network ACL.</p>
 */
  public init(subnetId: String?, networkAclAssociationId: String?, networkAclId: String?) {
self.subnetId = subnetId
self.networkAclAssociationId = networkAclAssociationId
self.networkAclId = networkAclId
  }
}

enum Offeringclasstype: String, RestJsonDeserializable, RestJsonSerializable {
  case `standard` = "standard"
  case `convertible` = "convertible"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Offeringclasstype {
    guard case let .json(json) = body else { fatalError() }
    return Offeringclasstype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DeleteNatGateway.</p>
 */
public struct DeleteNatGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the NAT gateway.</p>
 */
  public let natGatewayId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["NatGatewayId"] = natGatewayId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - natGatewayId: <p>The ID of the NAT gateway.</p>
 */
  public init(natGatewayId: String) {
self.natGatewayId = natGatewayId
  }
}

/**
<p>Contains the output of PurchaseScheduledInstances.</p>
 */
public struct PurchaseScheduledInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the Scheduled Instances.</p>
 */
  public let scheduledInstanceSet: [ScheduledInstance]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if scheduledInstanceSet != nil { body["scheduledInstanceSet"] = scheduledInstanceSet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PurchaseScheduledInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PurchaseScheduledInstancesResult(
        scheduledInstanceSet: jsonDict["scheduledInstanceSet"].flatMap { ($0 is NSNull) ? nil : [ScheduledInstance].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - scheduledInstanceSet: <p>Information about the Scheduled Instances.</p>
 */
  public init(scheduledInstanceSet: [ScheduledInstance]?) {
self.scheduledInstanceSet = scheduledInstanceSet
  }
}

/**
<p>Contains the output of DescribeVolumeStatus.</p>
 */
public struct DescribeVolumeStatusResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>A list of volumes.</p>
 */
  public let volumeStatuses: [VolumeStatusItem]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if volumeStatuses != nil { body["volumeStatusSet"] = volumeStatuses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVolumeStatusResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVolumeStatusResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      volumeStatuses: jsonDict["volumeStatusSet"].flatMap { ($0 is NSNull) ? nil : [VolumeStatusItem].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - volumeStatuses: <p>A list of volumes.</p>
 */
  public init(nextToken: String?, volumeStatuses: [VolumeStatusItem]?) {
self.nextToken = nextToken
self.volumeStatuses = volumeStatuses
  }
}

/**
<p>The capacity information for instances launched onto the Dedicated Host.</p>
 */
public struct AvailableCapacity: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The total number of instances that the Dedicated Host supports.</p>
 */
  public let availableInstanceCapacity: [InstanceCapacity]?
/**
<p>The number of vCPUs available on the Dedicated Host.</p>
 */
  public let availableVCpus: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if availableInstanceCapacity != nil { body["availableInstanceCapacity"] = availableInstanceCapacity! }
    if availableVCpus != nil { body["availableVCpus"] = availableVCpus! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AvailableCapacity {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AvailableCapacity(
        availableInstanceCapacity: jsonDict["availableInstanceCapacity"].flatMap { ($0 is NSNull) ? nil : [InstanceCapacity].deserialize(response: response, body: .json($0)) },
      availableVCpus: jsonDict["availableVCpus"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - availableInstanceCapacity: <p>The total number of instances that the Dedicated Host supports.</p>
      - availableVCpus: <p>The number of vCPUs available on the Dedicated Host.</p>
 */
  public init(availableInstanceCapacity: [InstanceCapacity]?, availableVCpus: Int?) {
self.availableInstanceCapacity = availableInstanceCapacity
self.availableVCpus = availableVCpus
  }
}

/**
<p>Describes the maximum hourly price (bid) for any Spot instance launched to fulfill the request.</p>
 */
public struct SpotPrice: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The date and time the request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let timestamp: Date?
/**
<p>The instance type.</p>
 */
  public let instanceType: Instancetype?
/**
<p>The Availability Zone.</p>
 */
  public let availabilityZone: String?
/**
<p>The maximum price (bid) that you are willing to pay for a Spot instance.</p>
 */
  public let spotPrice: String?
/**
<p>A general description of the AMI.</p>
 */
  public let productDescription: Riproductdescription?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if timestamp != nil { body["timestamp"] = timestamp! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if spotPrice != nil { body["spotPrice"] = spotPrice! }
    if productDescription != nil { body["productDescription"] = productDescription! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotPrice {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotPrice(
        timestamp: jsonDict["timestamp"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotPrice: jsonDict["spotPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      productDescription: jsonDict["productDescription"].flatMap { ($0 is NSNull) ? nil : Riproductdescription.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - timestamp: <p>The date and time the request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - instanceType: <p>The instance type.</p>
      - availabilityZone: <p>The Availability Zone.</p>
      - spotPrice: <p>The maximum price (bid) that you are willing to pay for a Spot instance.</p>
      - productDescription: <p>A general description of the AMI.</p>
 */
  public init(timestamp: Date?, instanceType: Instancetype?, availabilityZone: String?, spotPrice: String?, productDescription: Riproductdescription?) {
self.timestamp = timestamp
self.instanceType = instanceType
self.availabilityZone = availabilityZone
self.spotPrice = spotPrice
self.productDescription = productDescription
  }
}


/**
<p>Describes the configuration settings for the modified Reserved Instances.</p>
 */
public struct ReservedInstancesConfiguration: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.</p>
 */
  public let platform: String?
/**
<p>The number of modified Reserved Instances.</p>
 */
  public let instanceCount: Int?
/**
<p>The instance type for the modified Reserved Instances.</p>
 */
  public let instanceType: Instancetype?
/**
<p>The Availability Zone for the modified Reserved Instances.</p>
 */
  public let availabilityZone: String?
/**
<p>Whether the Reserved Instance is <code>standard</code> or <code>convertible</code>.</p>
 */
  public let scope: Scope?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if platform != nil { body["platform"] = platform! }
    if instanceCount != nil { body["instanceCount"] = instanceCount! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if scope != nil { body["scope"] = scope! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstancesConfiguration {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstancesConfiguration(
        platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceCount: jsonDict["instanceCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      scope: jsonDict["scope"].flatMap { ($0 is NSNull) ? nil : Scope.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - platform: <p>The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.</p>
      - instanceCount: <p>The number of modified Reserved Instances.</p>
      - instanceType: <p>The instance type for the modified Reserved Instances.</p>
      - availabilityZone: <p>The Availability Zone for the modified Reserved Instances.</p>
      - scope: <p>Whether the Reserved Instance is <code>standard</code> or <code>convertible</code>.</p>
 */
  public init(platform: String?, instanceCount: Int?, instanceType: Instancetype?, availabilityZone: String?, scope: Scope?) {
self.platform = platform
self.instanceCount = instanceCount
self.instanceType = instanceType
self.availabilityZone = availabilityZone
self.scope = scope
  }
}

/**
<p>Contains the parameters for CreatePlacementGroup.</p>
 */
public struct CreatePlacementGroupRequest: RestJsonSerializable {
/**
<p>A name for the placement group.</p> <p>Constraints: Up to 255 ASCII characters</p>
 */
  public let groupName: String
/**
<p>The placement strategy.</p>
 */
  public let strategy: Placementstrategy
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["groupName"] = groupName
    body["strategy"] = strategy
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - groupName: <p>A name for the placement group.</p> <p>Constraints: Up to 255 ASCII characters</p>
      - strategy: <p>The placement strategy.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(groupName: String, strategy: Placementstrategy, dryRun: Bool?) {
self.groupName = groupName
self.strategy = strategy
self.dryRun = dryRun
  }
}

public struct DescribeSecurityGroupReferencesRequest: RestJsonSerializable {
/**
<p>One or more security group IDs in your account.</p>
 */
  public let groupId: [String]
/**
<p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["GroupId"] = groupId
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - groupId: <p>One or more security group IDs in your account.</p>
      - dryRun: <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.</p>
 */
  public init(groupId: [String], dryRun: Bool?) {
self.groupId = groupId
self.dryRun = dryRun
  }
}



enum Cancelbatcherrorcode: String, RestJsonDeserializable, RestJsonSerializable {
  case `fleetRequestIdDoesNotExist` = "fleetRequestIdDoesNotExist"
  case `fleetRequestIdMalformed` = "fleetRequestIdMalformed"
  case `fleetRequestNotInCancellableState` = "fleetRequestNotInCancellableState"
  case `unexpectedError` = "unexpectedError"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Cancelbatcherrorcode {
    guard case let .json(json) = body else { fatalError() }
    return Cancelbatcherrorcode(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Describes an image attribute.</p>
 */
public struct ImageAttribute: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more block device mapping entries.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>One or more product codes.</p>
 */
  public let productCodes: [ProductCode]?
/**
<p>One or more launch permissions.</p>
 */
  public let launchPermissions: [LaunchPermission]?
/**
<p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
 */
  public let sriovNetSupport: AttributeValue?
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String?
/**
<p>The kernel ID.</p>
 */
  public let kernelId: AttributeValue?
/**
<p>The RAM disk ID.</p>
 */
  public let ramdiskId: AttributeValue?
/**
<p>A description for the AMI.</p>
 */
  public let description: AttributeValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if productCodes != nil { body["productCodes"] = productCodes! }
    if launchPermissions != nil { body["launchPermission"] = launchPermissions! }
    if sriovNetSupport != nil { body["sriovNetSupport"] = sriovNetSupport! }
    if imageId != nil { body["imageId"] = imageId! }
    if kernelId != nil { body["kernel"] = kernelId! }
    if ramdiskId != nil { body["ramdisk"] = ramdiskId! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImageAttribute {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImageAttribute(
        blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [BlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      productCodes: jsonDict["productCodes"].flatMap { ($0 is NSNull) ? nil : [ProductCode].deserialize(response: response, body: .json($0)) },
      launchPermissions: jsonDict["launchPermission"].flatMap { ($0 is NSNull) ? nil : [LaunchPermission].deserialize(response: response, body: .json($0)) },
      sriovNetSupport: jsonDict["sriovNetSupport"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernel"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdisk"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>One or more block device mapping entries.</p>
      - productCodes: <p>One or more product codes.</p>
      - launchPermissions: <p>One or more launch permissions.</p>
      - sriovNetSupport: <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
      - imageId: <p>The ID of the AMI.</p>
      - kernelId: <p>The kernel ID.</p>
      - ramdiskId: <p>The RAM disk ID.</p>
      - description: <p>A description for the AMI.</p>
 */
  public init(blockDeviceMappings: [BlockDeviceMapping]?, productCodes: [ProductCode]?, launchPermissions: [LaunchPermission]?, sriovNetSupport: AttributeValue?, imageId: String?, kernelId: AttributeValue?, ramdiskId: AttributeValue?, description: AttributeValue?) {
self.blockDeviceMappings = blockDeviceMappings
self.productCodes = productCodes
self.launchPermissions = launchPermissions
self.sriovNetSupport = sriovNetSupport
self.imageId = imageId
self.kernelId = kernelId
self.ramdiskId = ramdiskId
self.description = description
  }
}

/**
<p>Contains the parameters for CreateInstanceExportTask.</p>
 */
public struct CreateInstanceExportTaskRequest: RestJsonSerializable {
/**
<p>A description for the conversion task or the resource being exported. The maximum length is 255 bytes.</p>
 */
  public let description: String?
/**
<p>The format and location for an instance export task.</p>
 */
  public let exportToS3Task: ExportToS3TaskSpecification?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>The target virtualization environment.</p>
 */
  public let targetEnvironment: Exportenvironment?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if description != nil { body["description"] = description! }
    if exportToS3Task != nil { body["exportToS3"] = exportToS3Task! }
    body["instanceId"] = instanceId
    if targetEnvironment != nil { body["targetEnvironment"] = targetEnvironment! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - description: <p>A description for the conversion task or the resource being exported. The maximum length is 255 bytes.</p>
      - exportToS3Task: <p>The format and location for an instance export task.</p>
      - instanceId: <p>The ID of the instance.</p>
      - targetEnvironment: <p>The target virtualization environment.</p>
 */
  public init(description: String?, exportToS3Task: ExportToS3TaskSpecification?, instanceId: String, targetEnvironment: Exportenvironment?) {
self.description = description
self.exportToS3Task = exportToS3Task
self.instanceId = instanceId
self.targetEnvironment = targetEnvironment
  }
}

/**
<p>Contains the parameters for CreateFlowLogs.</p>
 */
public struct CreateFlowLogsRequest: RestJsonSerializable {
/**
<p>The type of traffic to log.</p>
 */
  public let trafficType: Traffictype
/**
<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>One or more subnet, network interface, or VPC IDs.</p> <p>Constraints: Maximum of 1000 resources</p>
 */
  public let resourceIds: [String]
/**
<p>The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group.</p>
 */
  public let deliverLogsPermissionArn: String
/**
<p>The type of resource on which to create the flow log.</p>
 */
  public let resourceType: Flowlogsresourcetype
/**
<p>The name of the CloudWatch log group.</p>
 */
  public let logGroupName: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["TrafficType"] = trafficType
    if clientToken != nil { body["ClientToken"] = clientToken! }
    body["ResourceId"] = resourceIds
    body["DeliverLogsPermissionArn"] = deliverLogsPermissionArn
    body["ResourceType"] = resourceType
    body["LogGroupName"] = logGroupName
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - trafficType: <p>The type of traffic to log.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
      - resourceIds: <p>One or more subnet, network interface, or VPC IDs.</p> <p>Constraints: Maximum of 1000 resources</p>
      - deliverLogsPermissionArn: <p>The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group.</p>
      - resourceType: <p>The type of resource on which to create the flow log.</p>
      - logGroupName: <p>The name of the CloudWatch log group.</p>
 */
  public init(trafficType: Traffictype, clientToken: String?, resourceIds: [String], deliverLogsPermissionArn: String, resourceType: Flowlogsresourcetype, logGroupName: String) {
self.trafficType = trafficType
self.clientToken = clientToken
self.resourceIds = resourceIds
self.deliverLogsPermissionArn = deliverLogsPermissionArn
self.resourceType = resourceType
self.logGroupName = logGroupName
  }
}



/**
<p>Describes an import image task.</p>
 */
public struct ImportImageTask: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The license type of the virtual machine.</p>
 */
  public let licenseType: String?
/**
<p>A brief status for the import image task.</p>
 */
  public let status: String?
/**
<p>The description string for the import image task.</p>
 */
  public let platform: String?
/**
<p>The percentage of progress of the import image task.</p>
 */
  public let progress: String?
/**
<p>The target hypervisor for the import task.</p> <p>Valid values: <code>xen</code> </p>
 */
  public let hypervisor: String?
/**
<p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
 */
  public let architecture: String?
/**
<p>The ID of the Amazon Machine Image (AMI) of the imported virtual machine.</p>
 */
  public let imageId: String?
/**
<p>The ID of the import image task.</p>
 */
  public let importTaskId: String?
/**
<p>A descriptive status message for the import image task.</p>
 */
  public let statusMessage: String?
/**
<p>Information about the snapshots.</p>
 */
  public let snapshotDetails: [SnapshotDetail]?
/**
<p>A description of the import task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if licenseType != nil { body["licenseType"] = licenseType! }
    if status != nil { body["status"] = status! }
    if platform != nil { body["platform"] = platform! }
    if progress != nil { body["progress"] = progress! }
    if hypervisor != nil { body["hypervisor"] = hypervisor! }
    if architecture != nil { body["architecture"] = architecture! }
    if imageId != nil { body["imageId"] = imageId! }
    if importTaskId != nil { body["importTaskId"] = importTaskId! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if snapshotDetails != nil { body["snapshotDetailSet"] = snapshotDetails! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportImageTask {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportImageTask(
        licenseType: jsonDict["licenseType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      progress: jsonDict["progress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      hypervisor: jsonDict["hypervisor"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      architecture: jsonDict["architecture"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      importTaskId: jsonDict["importTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotDetails: jsonDict["snapshotDetailSet"].flatMap { ($0 is NSNull) ? nil : [SnapshotDetail].deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - licenseType: <p>The license type of the virtual machine.</p>
      - status: <p>A brief status for the import image task.</p>
      - platform: <p>The description string for the import image task.</p>
      - progress: <p>The percentage of progress of the import image task.</p>
      - hypervisor: <p>The target hypervisor for the import task.</p> <p>Valid values: <code>xen</code> </p>
      - architecture: <p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
      - imageId: <p>The ID of the Amazon Machine Image (AMI) of the imported virtual machine.</p>
      - importTaskId: <p>The ID of the import image task.</p>
      - statusMessage: <p>A descriptive status message for the import image task.</p>
      - snapshotDetails: <p>Information about the snapshots.</p>
      - description: <p>A description of the import task.</p>
 */
  public init(licenseType: String?, status: String?, platform: String?, progress: String?, hypervisor: String?, architecture: String?, imageId: String?, importTaskId: String?, statusMessage: String?, snapshotDetails: [SnapshotDetail]?, description: String?) {
self.licenseType = licenseType
self.status = status
self.platform = platform
self.progress = progress
self.hypervisor = hypervisor
self.architecture = architecture
self.imageId = imageId
self.importTaskId = importTaskId
self.statusMessage = statusMessage
self.snapshotDetails = snapshotDetails
self.description = description
  }
}

/**
<p>Contains the output of DescribeVolumes.</p>
 */
public struct DescribeVolumesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the volumes.</p>
 */
  public let volumes: [Volume]?
/**
<p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if volumes != nil { body["volumeSet"] = volumes! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVolumesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVolumesResult(
        volumes: jsonDict["volumeSet"].flatMap { ($0 is NSNull) ? nil : [Volume].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - volumes: <p>Information about the volumes.</p>
      - nextToken: <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(volumes: [Volume]?, nextToken: String?) {
self.volumes = volumes
self.nextToken = nextToken
  }
}

/**
<p>Contains the parameters for ModifyInstancePlacement.</p>
 */
public struct ModifyInstancePlacementRequest: RestJsonSerializable {
/**
<p>The new affinity setting for the instance.</p>
 */
  public let affinity: Affinity?
/**
<p>The ID of the Dedicated Host that the instance will have affinity with.</p>
 */
  public let hostId: String?
/**
<p>The ID of the instance that you are modifying.</p>
 */
  public let instanceId: String
/**
<p>The tenancy of the instance that you are modifying.</p>
 */
  public let tenancy: Hosttenancy?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if affinity != nil { body["affinity"] = affinity! }
    if hostId != nil { body["hostId"] = hostId! }
    body["instanceId"] = instanceId
    if tenancy != nil { body["tenancy"] = tenancy! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - affinity: <p>The new affinity setting for the instance.</p>
      - hostId: <p>The ID of the Dedicated Host that the instance will have affinity with.</p>
      - instanceId: <p>The ID of the instance that you are modifying.</p>
      - tenancy: <p>The tenancy of the instance that you are modifying.</p>
 */
  public init(affinity: Affinity?, hostId: String?, instanceId: String, tenancy: Hosttenancy?) {
self.affinity = affinity
self.hostId = hostId
self.instanceId = instanceId
self.tenancy = tenancy
  }
}


/**
<p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
 */
public struct ScheduledInstancesLaunchSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more block device mapping entries.</p>
 */
  public let blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]?
/**
<p>The ID of the subnet in which to launch the instances.</p>
 */
  public let subnetId: String?
/**
<p>The base64-encoded MIME user data.</p>
 */
  public let userData: String?
/**
<p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
 */
  public let ebsOptimized: Bool?
/**
<p>The IDs of one or more security groups.</p>
 */
  public let securityGroupIds: [String]?
/**
<p>The ID of the kernel.</p>
 */
  public let kernelId: String?
/**
<p>Enable or disable monitoring for the instances.</p>
 */
  public let monitoring: ScheduledInstancesMonitoring?
/**
<p>The instance type.</p>
 */
  public let instanceType: String?
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String?
/**
<p>The IAM instance profile.</p>
 */
  public let iamInstanceProfile: ScheduledInstancesIamInstanceProfile?
/**
<p>The ID of the Amazon Machine Image (AMI).</p>
 */
  public let imageId: String
/**
<p>One or more network interfaces.</p>
 */
  public let networkInterfaces: [ScheduledInstancesNetworkInterface]?
/**
<p>The placement information.</p>
 */
  public let placement: ScheduledInstancesPlacement?
/**
<p>The ID of the RAM disk.</p>
 */
  public let ramdiskId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["BlockDeviceMapping"] = blockDeviceMappings! }
    if subnetId != nil { body["SubnetId"] = subnetId! }
    if userData != nil { body["UserData"] = userData! }
    if ebsOptimized != nil { body["EbsOptimized"] = ebsOptimized! }
    if securityGroupIds != nil { body["SecurityGroupId"] = securityGroupIds! }
    if kernelId != nil { body["KernelId"] = kernelId! }
    if monitoring != nil { body["Monitoring"] = monitoring! }
    if instanceType != nil { body["InstanceType"] = instanceType! }
    if keyName != nil { body["KeyName"] = keyName! }
    if iamInstanceProfile != nil { body["IamInstanceProfile"] = iamInstanceProfile! }
    body["ImageId"] = imageId
    if networkInterfaces != nil { body["NetworkInterface"] = networkInterfaces! }
    if placement != nil { body["Placement"] = placement! }
    if ramdiskId != nil { body["RamdiskId"] = ramdiskId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesLaunchSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesLaunchSpecification(
        blockDeviceMappings: jsonDict["BlockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [ScheduledInstancesBlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["SubnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userData: jsonDict["UserData"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebsOptimized: jsonDict["EbsOptimized"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      securityGroupIds: jsonDict["SecurityGroupId"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["KernelId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      monitoring: jsonDict["Monitoring"].flatMap { ($0 is NSNull) ? nil : ScheduledInstancesMonitoring.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["InstanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      keyName: jsonDict["KeyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      iamInstanceProfile: jsonDict["IamInstanceProfile"].flatMap { ($0 is NSNull) ? nil : ScheduledInstancesIamInstanceProfile.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["ImageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      networkInterfaces: jsonDict["NetworkInterface"].flatMap { ($0 is NSNull) ? nil : [ScheduledInstancesNetworkInterface].deserialize(response: response, body: .json($0)) },
      placement: jsonDict["Placement"].flatMap { ($0 is NSNull) ? nil : ScheduledInstancesPlacement.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["RamdiskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>One or more block device mapping entries.</p>
      - subnetId: <p>The ID of the subnet in which to launch the instances.</p>
      - userData: <p>The base64-encoded MIME user data.</p>
      - ebsOptimized: <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
      - securityGroupIds: <p>The IDs of one or more security groups.</p>
      - kernelId: <p>The ID of the kernel.</p>
      - monitoring: <p>Enable or disable monitoring for the instances.</p>
      - instanceType: <p>The instance type.</p>
      - keyName: <p>The name of the key pair.</p>
      - iamInstanceProfile: <p>The IAM instance profile.</p>
      - imageId: <p>The ID of the Amazon Machine Image (AMI).</p>
      - networkInterfaces: <p>One or more network interfaces.</p>
      - placement: <p>The placement information.</p>
      - ramdiskId: <p>The ID of the RAM disk.</p>
 */
  public init(blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]?, subnetId: String?, userData: String?, ebsOptimized: Bool?, securityGroupIds: [String]?, kernelId: String?, monitoring: ScheduledInstancesMonitoring?, instanceType: String?, keyName: String?, iamInstanceProfile: ScheduledInstancesIamInstanceProfile?, imageId: String, networkInterfaces: [ScheduledInstancesNetworkInterface]?, placement: ScheduledInstancesPlacement?, ramdiskId: String?) {
self.blockDeviceMappings = blockDeviceMappings
self.subnetId = subnetId
self.userData = userData
self.ebsOptimized = ebsOptimized
self.securityGroupIds = securityGroupIds
self.kernelId = kernelId
self.monitoring = monitoring
self.instanceType = instanceType
self.keyName = keyName
self.iamInstanceProfile = iamInstanceProfile
self.imageId = imageId
self.networkInterfaces = networkInterfaces
self.placement = placement
self.ramdiskId = ramdiskId
  }
}

/**
<p>Contains the parameters for DisableVpcClassicLink.</p>
 */
public struct DisableVpcClassicLinkRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of MoveAddressToVpc.</p>
 */
public struct MoveAddressToVpcResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The status of the move of the IP address.</p>
 */
  public let status: Status?
/**
<p>The allocation ID for the Elastic IP address.</p>
 */
  public let allocationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if status != nil { body["status"] = status! }
    if allocationId != nil { body["allocationId"] = allocationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> MoveAddressToVpcResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return MoveAddressToVpcResult(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Status.deserialize(response: response, body: .json($0)) },
      allocationId: jsonDict["allocationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>The status of the move of the IP address.</p>
      - allocationId: <p>The allocation ID for the Elastic IP address.</p>
 */
  public init(status: Status?, allocationId: String?) {
self.status = status
self.allocationId = allocationId
  }
}

/**
<p>Describes the user or group to be added or removed from the permissions for a volume.</p>
 */
public struct CreateVolumePermission: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The specific AWS account ID that is to be added or removed from a volume's list of create volume permissions.</p>
 */
  public let userId: String?
/**
<p>The specific group that is to be added or removed from a volume's list of create volume permissions.</p>
 */
  public let group: Permissiongroup?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if userId != nil { body["userId"] = userId! }
    if group != nil { body["group"] = group! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVolumePermission {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVolumePermission(
        userId: jsonDict["userId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      group: jsonDict["group"].flatMap { ($0 is NSNull) ? nil : Permissiongroup.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - userId: <p>The specific AWS account ID that is to be added or removed from a volume's list of create volume permissions.</p>
      - group: <p>The specific group that is to be added or removed from a volume's list of create volume permissions.</p>
 */
  public init(userId: String?, group: Permissiongroup?) {
self.userId = userId
self.group = group
  }
}

/**
<p>Contains the parameters for DeleteVpnConnection.</p>
 */
public struct DeleteVpnConnectionRequest: RestJsonSerializable {
/**
<p>The ID of the VPN connection.</p>
 */
  public let vpnConnectionId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpnConnectionId"] = vpnConnectionId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpnConnectionId: <p>The ID of the VPN connection.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpnConnectionId: String, dryRun: Bool?) {
self.vpnConnectionId = vpnConnectionId
self.dryRun = dryRun
  }
}



/**
<p>Describes a customer gateway.</p>
 */
public struct CustomerGateway: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the customer gateway.</p>
 */
  public let customerGatewayId: String?
/**
<p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
 */
  public let bgpAsn: String?
/**
<p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
 */
  public let ec2Type: String?
/**
<p>Any tags assigned to the customer gateway.</p>
 */
  public let tags: [Tag]?
/**
<p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
 */
  public let state: String?
/**
<p>The Internet-routable IP address of the customer gateway's outside interface.</p>
 */
  public let ipAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if customerGatewayId != nil { body["customerGatewayId"] = customerGatewayId! }
    if bgpAsn != nil { body["bgpAsn"] = bgpAsn! }
    if ec2Type != nil { body["type"] = ec2Type! }
    if tags != nil { body["tagSet"] = tags! }
    if state != nil { body["state"] = state! }
    if ipAddress != nil { body["ipAddress"] = ipAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CustomerGateway {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CustomerGateway(
        customerGatewayId: jsonDict["customerGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      bgpAsn: jsonDict["bgpAsn"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ec2Type: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ipAddress: jsonDict["ipAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - customerGatewayId: <p>The ID of the customer gateway.</p>
      - bgpAsn: <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
      - ec2Type: <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
      - tags: <p>Any tags assigned to the customer gateway.</p>
      - state: <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
      - ipAddress: <p>The Internet-routable IP address of the customer gateway's outside interface.</p>
 */
  public init(customerGatewayId: String?, bgpAsn: String?, ec2Type: String?, tags: [Tag]?, state: String?, ipAddress: String?) {
self.customerGatewayId = customerGatewayId
self.bgpAsn = bgpAsn
self.ec2Type = ec2Type
self.tags = tags
self.state = state
self.ipAddress = ipAddress
  }
}

/**
<p>Contains the parameters for DescribeAccountAttributes.</p>
 */
public struct DescribeAccountAttributesRequest: RestJsonSerializable {
/**
<p>One or more account attribute names.</p>
 */
  public let attributeNames: [Accountattributename]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attributeNames != nil { body["attributeName"] = attributeNames! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attributeNames: <p>One or more account attribute names.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attributeNames: [Accountattributename]?, dryRun: Bool?) {
self.attributeNames = attributeNames
self.dryRun = dryRun
  }
}





/**
<p>Contains the parameters for CreateVpnGateway.</p>
 */
public struct CreateVpnGatewayRequest: RestJsonSerializable {
/**
<p>The type of VPN connection this virtual private gateway supports.</p>
 */
  public let ec2Type: Gatewaytype
/**
<p>The Availability Zone for the virtual private gateway.</p>
 */
  public let availabilityZone: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["Type"] = ec2Type
    if availabilityZone != nil { body["AvailabilityZone"] = availabilityZone! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - ec2Type: <p>The type of VPN connection this virtual private gateway supports.</p>
      - availabilityZone: <p>The Availability Zone for the virtual private gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(ec2Type: Gatewaytype, availabilityZone: String?, dryRun: Bool?) {
self.ec2Type = ec2Type
self.availabilityZone = availabilityZone
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DeleteSpotDatafeedSubscription.</p>
 */
public struct DeleteSpotDatafeedSubscriptionRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(dryRun: Bool?) {
self.dryRun = dryRun
  }
}

/**
<p>Describes a route in a route table.</p>
 */
public struct Route: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of a NAT gateway.</p>
 */
  public let natGatewayId: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>Describes how the route was created.</p> <ul> <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li> <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li> <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li> </ul>
 */
  public let origin: Routeorigin?
/**
<p>The ID of a NAT instance in your VPC.</p>
 */
  public let instanceId: String?
/**
<p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
 */
  public let state: Routestate?
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String?
/**
<p>The prefix of the AWS service.</p>
 */
  public let destinationPrefixListId: String?
/**
<p>The AWS account ID of the owner of the instance.</p>
 */
  public let instanceOwnerId: String?
/**
<p>The ID of a gateway attached to your VPC.</p>
 */
  public let gatewayId: String?
/**
<p>The CIDR block used for the destination match.</p>
 */
  public let destinationCidrBlock: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if natGatewayId != nil { body["natGatewayId"] = natGatewayId! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if origin != nil { body["origin"] = origin! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if state != nil { body["state"] = state! }
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
    if destinationPrefixListId != nil { body["destinationPrefixListId"] = destinationPrefixListId! }
    if instanceOwnerId != nil { body["instanceOwnerId"] = instanceOwnerId! }
    if gatewayId != nil { body["gatewayId"] = gatewayId! }
    if destinationCidrBlock != nil { body["destinationCidrBlock"] = destinationCidrBlock! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Route {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Route(
        natGatewayId: jsonDict["natGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      origin: jsonDict["origin"].flatMap { ($0 is NSNull) ? nil : Routeorigin.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Routestate.deserialize(response: response, body: .json($0)) },
      vpcPeeringConnectionId: jsonDict["vpcPeeringConnectionId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      destinationPrefixListId: jsonDict["destinationPrefixListId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceOwnerId: jsonDict["instanceOwnerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      gatewayId: jsonDict["gatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      destinationCidrBlock: jsonDict["destinationCidrBlock"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - natGatewayId: <p>The ID of a NAT gateway.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - origin: <p>Describes how the route was created.</p> <ul> <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li> <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li> <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li> </ul>
      - instanceId: <p>The ID of a NAT instance in your VPC.</p>
      - state: <p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
      - destinationPrefixListId: <p>The prefix of the AWS service.</p>
      - instanceOwnerId: <p>The AWS account ID of the owner of the instance.</p>
      - gatewayId: <p>The ID of a gateway attached to your VPC.</p>
      - destinationCidrBlock: <p>The CIDR block used for the destination match.</p>
 */
  public init(natGatewayId: String?, networkInterfaceId: String?, origin: Routeorigin?, instanceId: String?, state: Routestate?, vpcPeeringConnectionId: String?, destinationPrefixListId: String?, instanceOwnerId: String?, gatewayId: String?, destinationCidrBlock: String?) {
self.natGatewayId = natGatewayId
self.networkInterfaceId = networkInterfaceId
self.origin = origin
self.instanceId = instanceId
self.state = state
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.destinationPrefixListId = destinationPrefixListId
self.instanceOwnerId = instanceOwnerId
self.gatewayId = gatewayId
self.destinationCidrBlock = destinationCidrBlock
  }
}

/**
<p>Contains the output of CancelSpotFleetRequests.</p>
 */
public struct CancelSpotFleetRequestsResponse: RestJsonDeserializable {
/**
<p>Information about the Spot fleet requests that are successfully canceled.</p>
 */
  public let successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]?
/**
<p>Information about the Spot fleet requests that are not successfully canceled.</p>
 */
  public let unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]?


  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelSpotFleetRequestsResponse {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelSpotFleetRequestsResponse(
        successfulFleetRequests: jsonDict["successfulFleetRequestSet"].flatMap { ($0 is NSNull) ? nil : [CancelSpotFleetRequestsSuccessItem].deserialize(response: response, body: .json($0)) },
      unsuccessfulFleetRequests: jsonDict["unsuccessfulFleetRequestSet"].flatMap { ($0 is NSNull) ? nil : [CancelSpotFleetRequestsErrorItem].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - successfulFleetRequests: <p>Information about the Spot fleet requests that are successfully canceled.</p>
      - unsuccessfulFleetRequests: <p>Information about the Spot fleet requests that are not successfully canceled.</p>
 */
  public init(successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]?, unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]?) {
self.successfulFleetRequests = successfulFleetRequests
self.unsuccessfulFleetRequests = unsuccessfulFleetRequests
  }
}


/**
<p>Contains the parameters for DeleteSecurityGroup.</p>
 */
public struct DeleteSecurityGroupRequest: RestJsonSerializable {
/**
<p>[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.</p>
 */
  public let groupName: String?
/**
<p>The ID of the security group. Required for a nondefault VPC.</p>
 */
  public let groupId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if groupName != nil { body["GroupName"] = groupName! }
    if groupId != nil { body["GroupId"] = groupId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - groupName: <p>[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.</p>
      - groupId: <p>The ID of the security group. Required for a nondefault VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(groupName: String?, groupId: String?, dryRun: Bool?) {
self.groupName = groupName
self.groupId = groupId
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for DescribeInstances.</p>
 */
public struct DescribeInstancesRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name for the EBS volume (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is an opaque internal value and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> <li> <p> <code>ip-address</code> - The public IP address of the instance.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> <li> <p> <code>launch-time</code> - The time when the instance was launched.</p> </li> <li> <p> <code>monitoring-state</code> - Indicates whether monitoring is enabled for the instance (<code>disabled</code> | <code>enabled</code>).</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the instance owner.</p> </li> <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> <li> <p> <code>platform</code> - The platform. Use <code>windows</code> if you have Windows instances; otherwise, leave blank.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the instance.</p> </li> <li> <p> <code>private-ip-address</code> - The private IP address of the instance.</p> </li> <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you'll get one reservation ID. If you launch ten instances using the same launch request, you'll also get one reservation ID.</p> </li> <li> <p> <code>root-device-name</code> - The name of the root device for the instance (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of root device that the instance uses (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot instance request.</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource, where <code>tag</code>:<i>key</i> is the tag's key. </p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by AWS.</p> </li> <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IP address associated with the network interface.</p> </li> <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IP address of the network interface is the primary private IP address.</p> </li> <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address with a network interface.</p> </li> <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IP address associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address bound to the network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address associated with the network interface.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address for your network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IP address.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>One or more instance IDs.</p> <p>Default: Describes all your instances.</p>
 */
  public let instanceIds: [String]?
/**
<p>The token to request the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter or tag filters in the same call.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if instanceIds != nil { body["InstanceId"] = instanceIds! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name for the EBS volume (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is an opaque internal value and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> <li> <p> <code>ip-address</code> - The public IP address of the instance.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> <li> <p> <code>launch-time</code> - The time when the instance was launched.</p> </li> <li> <p> <code>monitoring-state</code> - Indicates whether monitoring is enabled for the instance (<code>disabled</code> | <code>enabled</code>).</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the instance owner.</p> </li> <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> <li> <p> <code>platform</code> - The platform. Use <code>windows</code> if you have Windows instances; otherwise, leave blank.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the instance.</p> </li> <li> <p> <code>private-ip-address</code> - The private IP address of the instance.</p> </li> <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you'll get one reservation ID. If you launch ten instances using the same launch request, you'll also get one reservation ID.</p> </li> <li> <p> <code>root-device-name</code> - The name of the root device for the instance (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of root device that the instance uses (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot instance request.</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource, where <code>tag</code>:<i>key</i> is the tag's key. </p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by AWS.</p> </li> <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IP address associated with the network interface.</p> </li> <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IP address of the network interface is the primary private IP address.</p> </li> <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address with a network interface.</p> </li> <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IP address associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address bound to the network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address associated with the network interface.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address for your network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IP address.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceIds: <p>One or more instance IDs.</p> <p>Default: Describes all your instances.</p>
      - nextToken: <p>The token to request the next page of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter or tag filters in the same call.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, instanceIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.instanceIds = instanceIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the output of DescribeScheduledInstances.</p>
 */
public struct DescribeScheduledInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>Information about the Scheduled Instances.</p>
 */
  public let scheduledInstanceSet: [ScheduledInstance]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if scheduledInstanceSet != nil { body["scheduledInstanceSet"] = scheduledInstanceSet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeScheduledInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeScheduledInstancesResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      scheduledInstanceSet: jsonDict["scheduledInstanceSet"].flatMap { ($0 is NSNull) ? nil : [ScheduledInstance].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
      - scheduledInstanceSet: <p>Information about the Scheduled Instances.</p>
 */
  public init(nextToken: String?, scheduledInstanceSet: [ScheduledInstance]?) {
self.nextToken = nextToken
self.scheduledInstanceSet = scheduledInstanceSet
  }
}

/**
<p>Contains the output of CreateVpc.</p>
 */
public struct CreateVpcResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPC.</p>
 */
  public let vpc: Vpc?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpc != nil { body["vpc"] = vpc! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVpcResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVpcResult(
        vpc: jsonDict["vpc"].flatMap { ($0 is NSNull) ? nil : Vpc.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpc: <p>Information about the VPC.</p>
 */
  public init(vpc: Vpc?) {
self.vpc = vpc
  }
}

/**
<p>Contains the parameters for DeleteNetworkAclEntry.</p>
 */
public struct DeleteNetworkAclEntryRequest: RestJsonSerializable {
/**
<p>Indicates whether the rule is an egress rule.</p>
 */
  public let egress: Bool
/**
<p>The rule number of the entry to delete.</p>
 */
  public let ruleNumber: Int
/**
<p>The ID of the network ACL.</p>
 */
  public let networkAclId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["egress"] = egress
    body["ruleNumber"] = ruleNumber
    body["networkAclId"] = networkAclId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - egress: <p>Indicates whether the rule is an egress rule.</p>
      - ruleNumber: <p>The rule number of the entry to delete.</p>
      - networkAclId: <p>The ID of the network ACL.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(egress: Bool, ruleNumber: Int, networkAclId: String, dryRun: Bool?) {
self.egress = egress
self.ruleNumber = ruleNumber
self.networkAclId = networkAclId
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for ResetSnapshotAttribute.</p>
 */
public struct ResetSnapshotAttributeRequest: RestJsonSerializable {
/**
<p>The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.</p>
 */
  public let attribute: Snapshotattributename
/**
<p>The ID of the snapshot.</p>
 */
  public let snapshotId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["Attribute"] = attribute
    body["SnapshotId"] = snapshotId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attribute: <p>The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.</p>
      - snapshotId: <p>The ID of the snapshot.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attribute: Snapshotattributename, snapshotId: String, dryRun: Bool?) {
self.attribute = attribute
self.snapshotId = snapshotId
self.dryRun = dryRun
  }
}

/**
<p>Describes a virtual private gateway.</p>
 */
public struct VpnGateway: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
 */
  public let availabilityZone: String?
/**
<p>Any VPCs attached to the virtual private gateway.</p>
 */
  public let vpcAttachments: [VpcAttachment]?
/**
<p>The type of VPN connection the virtual private gateway supports.</p>
 */
  public let ec2Type: Gatewaytype?
/**
<p>Any tags assigned to the virtual private gateway.</p>
 */
  public let tags: [Tag]?
/**
<p>The current state of the virtual private gateway.</p>
 */
  public let state: Vpnstate?
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let vpnGatewayId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if vpcAttachments != nil { body["attachments"] = vpcAttachments! }
    if ec2Type != nil { body["type"] = ec2Type! }
    if tags != nil { body["tagSet"] = tags! }
    if state != nil { body["state"] = state! }
    if vpnGatewayId != nil { body["vpnGatewayId"] = vpnGatewayId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpnGateway {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpnGateway(
        availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcAttachments: jsonDict["attachments"].flatMap { ($0 is NSNull) ? nil : [VpcAttachment].deserialize(response: response, body: .json($0)) },
      ec2Type: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : Gatewaytype.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Vpnstate.deserialize(response: response, body: .json($0)) },
      vpnGatewayId: jsonDict["vpnGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - availabilityZone: <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
      - vpcAttachments: <p>Any VPCs attached to the virtual private gateway.</p>
      - ec2Type: <p>The type of VPN connection the virtual private gateway supports.</p>
      - tags: <p>Any tags assigned to the virtual private gateway.</p>
      - state: <p>The current state of the virtual private gateway.</p>
      - vpnGatewayId: <p>The ID of the virtual private gateway.</p>
 */
  public init(availabilityZone: String?, vpcAttachments: [VpcAttachment]?, ec2Type: Gatewaytype?, tags: [Tag]?, state: Vpnstate?, vpnGatewayId: String?) {
self.availabilityZone = availabilityZone
self.vpcAttachments = vpcAttachments
self.ec2Type = ec2Type
self.tags = tags
self.state = state
self.vpnGatewayId = vpnGatewayId
  }
}

/**
<p>Contains the parameters for CancelSpotFleetRequests.</p>
 */
public struct CancelSpotFleetRequestsRequest: RestJsonSerializable {
/**
<p>The IDs of the Spot fleet requests.</p>
 */
  public let spotFleetRequestIds: [String]
/**
<p>Indicates whether to terminate instances for a Spot fleet request if it is canceled successfully.</p>
 */
  public let terminateInstances: Bool
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["spotFleetRequestId"] = spotFleetRequestIds
    body["terminateInstances"] = terminateInstances
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - spotFleetRequestIds: <p>The IDs of the Spot fleet requests.</p>
      - terminateInstances: <p>Indicates whether to terminate instances for a Spot fleet request if it is canceled successfully.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(spotFleetRequestIds: [String], terminateInstances: Bool, dryRun: Bool?) {
self.spotFleetRequestIds = spotFleetRequestIds
self.terminateInstances = terminateInstances
self.dryRun = dryRun
  }
}



/**
<p>Contains the parameters for DescribeSecurityGroups.</p>
 */
public struct DescribeSecurityGroupsRequest: RestJsonSerializable {
/**
<p>One or more security group IDs. Required for security groups in a nondefault VPC.</p> <p>Default: Describes all your security groups.</p>
 */
  public let groupIds: [String]?
/**
<p>One or more filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p> <ul> <li> <p> <code>description</code> - The description of the security group.</p> </li> <li> <p> <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service to which the security group allows access.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group. </p> </li> <li> <p> <code>group-name</code> - The name of the security group.</p> </li> <li> <p> <code>ip-permission.cidr</code> - A CIDR range that has been granted permission.</p> </li> <li> <p> <code>ip-permission.from-port</code> - The start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>ip-permission.group-id</code> - The ID of a security group that has been granted permission.</p> </li> <li> <p> <code>ip-permission.group-name</code> - The name of a security group that has been granted permission.</p> </li> <li> <p> <code>ip-permission.protocol</code> - The IP protocol for the permission (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>ip-permission.to-port</code> - The end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>ip-permission.user-id</code> - The ID of an AWS account that has been granted permission.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the owner of the security group.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the security group.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the security group.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>[EC2-Classic and default VPC only] One or more security group names. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the <code>group-name</code> filter to describe security groups by name.</p> <p>Default: Describes all your security groups.</p>
 */
  public let groupNames: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if groupIds != nil { body["GroupId"] = groupIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if groupNames != nil { body["GroupName"] = groupNames! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - groupIds: <p>One or more security group IDs. Required for security groups in a nondefault VPC.</p> <p>Default: Describes all your security groups.</p>
      - filters: <p>One or more filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p> <ul> <li> <p> <code>description</code> - The description of the security group.</p> </li> <li> <p> <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service to which the security group allows access.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group. </p> </li> <li> <p> <code>group-name</code> - The name of the security group.</p> </li> <li> <p> <code>ip-permission.cidr</code> - A CIDR range that has been granted permission.</p> </li> <li> <p> <code>ip-permission.from-port</code> - The start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>ip-permission.group-id</code> - The ID of a security group that has been granted permission.</p> </li> <li> <p> <code>ip-permission.group-name</code> - The name of a security group that has been granted permission.</p> </li> <li> <p> <code>ip-permission.protocol</code> - The IP protocol for the permission (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>ip-permission.to-port</code> - The end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>ip-permission.user-id</code> - The ID of an AWS account that has been granted permission.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the owner of the security group.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the security group.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the security group.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - groupNames: <p>[EC2-Classic and default VPC only] One or more security group names. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the <code>group-name</code> filter to describe security groups by name.</p> <p>Default: Describes all your security groups.</p>
 */
  public init(groupIds: [String]?, filters: [Filter]?, dryRun: Bool?, groupNames: [String]?) {
self.groupIds = groupIds
self.filters = filters
self.dryRun = dryRun
self.groupNames = groupNames
  }
}


/**
<p>Contains the parameters for DescribeVolumeStatus.</p>
 */
public struct DescribeVolumeStatusRequest: RestJsonSerializable {
/**
<p>One or more volume IDs.</p> <p>Default: Describes all your volumes.</p>
 */
  public let volumeIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li> <li> <p> <code>action.description</code> - A description of the action.</p> </li> <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.event-id</code> - The event ID.</p> </li> <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li> <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li> <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li> <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if volumeIds != nil { body["VolumeId"] = volumeIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - volumeIds: <p>One or more volume IDs.</p> <p>Default: Describes all your volumes.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li> <li> <p> <code>action.description</code> - A description of the action.</p> </li> <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.event-id</code> - The event ID.</p> </li> <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li> <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li> <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li> <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - maxResults: <p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
 */
  public init(volumeIds: [String]?, filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.volumeIds = volumeIds
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes a snapshot.</p>
 */
public struct Snapshot: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by the <a>DescribeSnapshots</a> API operation.</p>
 */
  public let stateMessage: String?
/**
<p>The snapshot state.</p>
 */
  public let state: Snapshotstate?
/**
<p>Indicates whether the snapshot is encrypted.</p>
 */
  public let encrypted: Bool?
/**
<p>Any tags assigned to the snapshot.</p>
 */
  public let tags: [Tag]?
/**
<p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action have an arbitrary volume ID that should not be used for any purpose.</p>
 */
  public let volumeId: String?
/**
<p>The AWS account ID of the EBS snapshot owner.</p>
 */
  public let ownerId: String?
/**
<p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by the <a>DescribeSnapshots</a> API operation.</p>
 */
  public let dataEncryptionKeyId: String?
/**
<p>The time stamp when the snapshot was initiated.</p>
 */
  public let startTime: Date?
/**
<p>The description for the snapshot.</p>
 */
  public let description: String?
/**
<p>The progress of the snapshot, as a percentage.</p>
 */
  public let progress: String?
/**
<p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
 */
  public let snapshotId: String?
/**
<p>The size of the volume, in GiB.</p>
 */
  public let volumeSize: Int?
/**
<p> Value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console. </p>
 */
  public let ownerAlias: String?
/**
<p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.</p>
 */
  public let kmsKeyId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if stateMessage != nil { body["statusMessage"] = stateMessage! }
    if state != nil { body["status"] = state! }
    if encrypted != nil { body["encrypted"] = encrypted! }
    if tags != nil { body["tagSet"] = tags! }
    if volumeId != nil { body["volumeId"] = volumeId! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if dataEncryptionKeyId != nil { body["dataEncryptionKeyId"] = dataEncryptionKeyId! }
    if startTime != nil { body["startTime"] = startTime! }
    if description != nil { body["description"] = description! }
    if progress != nil { body["progress"] = progress! }
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
    if volumeSize != nil { body["volumeSize"] = volumeSize! }
    if ownerAlias != nil { body["ownerAlias"] = ownerAlias! }
    if kmsKeyId != nil { body["kmsKeyId"] = kmsKeyId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Snapshot {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Snapshot(
        stateMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Snapshotstate.deserialize(response: response, body: .json($0)) },
      encrypted: jsonDict["encrypted"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      dataEncryptionKeyId: jsonDict["dataEncryptionKeyId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      startTime: jsonDict["startTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      progress: jsonDict["progress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      volumeSize: jsonDict["volumeSize"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      ownerAlias: jsonDict["ownerAlias"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      kmsKeyId: jsonDict["kmsKeyId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - stateMessage: <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by the <a>DescribeSnapshots</a> API operation.</p>
      - state: <p>The snapshot state.</p>
      - encrypted: <p>Indicates whether the snapshot is encrypted.</p>
      - tags: <p>Any tags assigned to the snapshot.</p>
      - volumeId: <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action have an arbitrary volume ID that should not be used for any purpose.</p>
      - ownerId: <p>The AWS account ID of the EBS snapshot owner.</p>
      - dataEncryptionKeyId: <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by the <a>DescribeSnapshots</a> API operation.</p>
      - startTime: <p>The time stamp when the snapshot was initiated.</p>
      - description: <p>The description for the snapshot.</p>
      - progress: <p>The progress of the snapshot, as a percentage.</p>
      - snapshotId: <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
      - volumeSize: <p>The size of the volume, in GiB.</p>
      - ownerAlias: <p> Value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console. </p>
      - kmsKeyId: <p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.</p>
 */
  public init(stateMessage: String?, state: Snapshotstate?, encrypted: Bool?, tags: [Tag]?, volumeId: String?, ownerId: String?, dataEncryptionKeyId: String?, startTime: Date?, description: String?, progress: String?, snapshotId: String?, volumeSize: Int?, ownerAlias: String?, kmsKeyId: String?) {
self.stateMessage = stateMessage
self.state = state
self.encrypted = encrypted
self.tags = tags
self.volumeId = volumeId
self.ownerId = ownerId
self.dataEncryptionKeyId = dataEncryptionKeyId
self.startTime = startTime
self.description = description
self.progress = progress
self.snapshotId = snapshotId
self.volumeSize = volumeSize
self.ownerAlias = ownerAlias
self.kmsKeyId = kmsKeyId
  }
}

/**
<p>Contains the parameters for DescribeVpcs.</p>
 */
public struct DescribeVpcsRequest: RestJsonSerializable {
/**
<p>One or more VPC IDs.</p> <p>Default: Describes all your VPCs.</p>
 */
  public let vpcIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>cidr</code> - The CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, <code>/28</code>).</p> </li> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>isDefault</code> - Indicates whether the VPC is the default VPC.</p> </li> <li> <p> <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcIds != nil { body["VpcId"] = vpcIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcIds: <p>One or more VPC IDs.</p> <p>Default: Describes all your VPCs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>cidr</code> - The CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, <code>/28</code>).</p> </li> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>isDefault</code> - Indicates whether the VPC is the default VPC.</p> </li> <li> <p> <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.vpcIds = vpcIds
self.filters = filters
self.dryRun = dryRun
  }
}


/**
<p>Contains the output of DescribeIdFormat.</p>
 */
public struct DescribeIdFormatResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the ID format for the resource.</p>
 */
  public let statuses: [IdFormat]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if statuses != nil { body["statusSet"] = statuses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeIdFormatResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeIdFormatResult(
        statuses: jsonDict["statusSet"].flatMap { ($0 is NSNull) ? nil : [IdFormat].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - statuses: <p>Information about the ID format for the resource.</p>
 */
  public init(statuses: [IdFormat]?) {
self.statuses = statuses
  }
}

/**
<p>Contains the parameters for RegisterImage.</p>
 */
public struct RegisterImageRequest: RestJsonSerializable {
/**
<p>The type of virtualization.</p> <p>Default: <code>paravirtual</code> </p>
 */
  public let virtualizationType: String?
/**
<p>The full path to your AMI manifest in Amazon S3 storage.</p>
 */
  public let imageLocation: String?
/**
<p>One or more block device mapping entries.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p> <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
 */
  public let sriovNetSupport: String?
/**
<p>The name of the root device (for example, <code>/dev/sda1</code>, or <code>/dev/xvda</code>).</p>
 */
  public let rootDeviceName: String?
/**
<p>A name for your AMI.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
 */
  public let name: String
/**
<p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
 */
  public let enaSupport: Bool?
/**
<p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>
 */
  public let architecture: Architecturevalues?
/**
<p>The ID of the kernel.</p>
 */
  public let kernelId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the RAM disk.</p>
 */
  public let ramdiskId: String?
/**
<p>A description for your AMI.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if virtualizationType != nil { body["virtualizationType"] = virtualizationType! }
    if imageLocation != nil { body["ImageLocation"] = imageLocation! }
    if blockDeviceMappings != nil { body["BlockDeviceMapping"] = blockDeviceMappings! }
    if sriovNetSupport != nil { body["sriovNetSupport"] = sriovNetSupport! }
    if rootDeviceName != nil { body["rootDeviceName"] = rootDeviceName! }
    body["name"] = name
    if enaSupport != nil { body["enaSupport"] = enaSupport! }
    if architecture != nil { body["architecture"] = architecture! }
    if kernelId != nil { body["kernelId"] = kernelId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if ramdiskId != nil { body["ramdiskId"] = ramdiskId! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - virtualizationType: <p>The type of virtualization.</p> <p>Default: <code>paravirtual</code> </p>
      - imageLocation: <p>The full path to your AMI manifest in Amazon S3 storage.</p>
      - blockDeviceMappings: <p>One or more block device mapping entries.</p>
      - sriovNetSupport: <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p> <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
      - rootDeviceName: <p>The name of the root device (for example, <code>/dev/sda1</code>, or <code>/dev/xvda</code>).</p>
      - name: <p>A name for your AMI.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
      - enaSupport: <p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
      - architecture: <p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>
      - kernelId: <p>The ID of the kernel.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - ramdiskId: <p>The ID of the RAM disk.</p>
      - description: <p>A description for your AMI.</p>
 */
  public init(virtualizationType: String?, imageLocation: String?, blockDeviceMappings: [BlockDeviceMapping]?, sriovNetSupport: String?, rootDeviceName: String?, name: String, enaSupport: Bool?, architecture: Architecturevalues?, kernelId: String?, dryRun: Bool?, ramdiskId: String?, description: String?) {
self.virtualizationType = virtualizationType
self.imageLocation = imageLocation
self.blockDeviceMappings = blockDeviceMappings
self.sriovNetSupport = sriovNetSupport
self.rootDeviceName = rootDeviceName
self.name = name
self.enaSupport = enaSupport
self.architecture = architecture
self.kernelId = kernelId
self.dryRun = dryRun
self.ramdiskId = ramdiskId
self.description = description
  }
}

/**
<p>Contains the parameters for DescribeMovingAddresses.</p>
 */
public struct DescribeMovingAddressesRequest: RestJsonSerializable {
/**
<p>One or more Elastic IP addresses.</p>
 */
  public let publicIps: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>moving-status</code> - The status of the Elastic IP address (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The token to use to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value outside of this range, an error is returned.</p> <p>Default: If no value is provided, the default is 1000.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if publicIps != nil { body["publicIp"] = publicIps! }
    if filters != nil { body["filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - publicIps: <p>One or more Elastic IP addresses.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>moving-status</code> - The status of the Elastic IP address (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The token to use to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value outside of this range, an error is returned.</p> <p>Default: If no value is provided, the default is 1000.</p>
 */
  public init(publicIps: [String]?, filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.publicIps = publicIps
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the output of MonitorInstances.</p>
 */
public struct MonitorInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Monitoring information for one or more instances.</p>
 */
  public let instanceMonitorings: [InstanceMonitoring]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceMonitorings != nil { body["instancesSet"] = instanceMonitorings! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> MonitorInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return MonitorInstancesResult(
        instanceMonitorings: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [InstanceMonitoring].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceMonitorings: <p>Monitoring information for one or more instances.</p>
 */
  public init(instanceMonitorings: [InstanceMonitoring]?) {
self.instanceMonitorings = instanceMonitorings
  }
}

/**
<p>Contains the parameters for AssignPrivateIpAddresses.</p>
 */
public struct AssignPrivateIpAddressesRequest: RestJsonSerializable {
/**
<p>Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.</p>
 */
  public let allowReassignment: Bool?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.</p>
 */
  public let secondaryPrivateIpAddressCount: Int?
/**
<p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
 */
  public let privateIpAddresses: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if allowReassignment != nil { body["allowReassignment"] = allowReassignment! }
    body["networkInterfaceId"] = networkInterfaceId
    if secondaryPrivateIpAddressCount != nil { body["secondaryPrivateIpAddressCount"] = secondaryPrivateIpAddressCount! }
    if privateIpAddresses != nil { body["privateIpAddress"] = privateIpAddresses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - allowReassignment: <p>Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - secondaryPrivateIpAddressCount: <p>The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.</p>
      - privateIpAddresses: <p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
 */
  public init(allowReassignment: Bool?, networkInterfaceId: String, secondaryPrivateIpAddressCount: Int?, privateIpAddresses: [String]?) {
self.allowReassignment = allowReassignment
self.networkInterfaceId = networkInterfaceId
self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
self.privateIpAddresses = privateIpAddresses
  }
}

enum Imagetypevalues: String, RestJsonDeserializable, RestJsonSerializable {
  case `machine` = "machine"
  case `kernel` = "kernel"
  case `ramdisk` = "ramdisk"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Imagetypevalues {
    guard case let .json(json) = body else { fatalError() }
    return Imagetypevalues(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for RunInstances.</p>
 */
public struct RunInstancesRequest: RestJsonSerializable {
/**
<p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>[EC2-VPC] The ID of the subnet to launch the instance into.</p>
 */
  public let subnetId: String?
/**
<p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. If you set this parameter to <code>true</code> and then later want to be able to terminate the instance, you must first change the value of the <code>disableApiTermination</code> attribute to <code>false</code> using <a>ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> <p>Default: <code>false</code> </p>
 */
  public let disableApiTermination: Bool?
/**
<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p>
 */
  public let clientToken: String?
/**
<p>The user data to make available to the instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href="http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding User Data</a> (Windows). If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let userData: String?
/**
<p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
 */
  public let ebsOptimized: Bool?
/**
<p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
 */
  public let kernelId: String?
/**
<p>One or more security group IDs. You can create a security group using <a>CreateSecurityGroup</a>.</p> <p>Default: Amazon EC2 uses the default security group.</p>
 */
  public let securityGroupIds: [String]?
/**
<p>The monitoring for the instance.</p>
 */
  public let monitoring: RunInstancesMonitoringEnabled?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The instance type. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>m1.small</code> </p>
 */
  public let instanceType: Instancetype?
/**
<p>[EC2-VPC] The primary IP address. You must specify a value from the IP address range of the subnet.</p> <p>Only one private IP address can be designated as primary. Therefore, you can't specify this parameter if <code>PrivateIpAddresses.n.Primary</code> is set to <code>true</code> and <code>PrivateIpAddresses.n.PrivateIpAddress</code> is set to an IP address. </p> <p>You cannot specify this option if you're launching more than one instance in the request.</p> <p>Default: We select an IP address from the IP address range of the subnet.</p>
 */
  public let privateIpAddress: String?
/**
<p>[EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead.</p> <p>Default: Amazon EC2 uses the default security group.</p>
 */
  public let securityGroups: [String]?
/**
<p>The name of the key pair. You can create a key pair using <a>CreateKeyPair</a> or <a>ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
 */
  public let keyName: String?
/**
<p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
 */
  public let maxCount: Int
/**
<p>Reserved.</p>
 */
  public let additionalInfo: String?
/**
<p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
 */
  public let instanceInitiatedShutdownBehavior: Shutdownbehavior?
/**
<p>The placement for the instance.</p>
 */
  public let placement: Placement?
/**
<p>The IAM instance profile.</p>
 */
  public let iamInstanceProfile: IamInstanceProfileSpecification?
/**
<p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
 */
  public let minCount: Int
/**
<p>One or more network interfaces.</p>
 */
  public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
/**
<p>The ID of the AMI, which you can get by calling <a>DescribeImages</a>.</p>
 */
  public let imageId: String
/**
<p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
 */
  public let ramdiskId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["BlockDeviceMapping"] = blockDeviceMappings! }
    if subnetId != nil { body["SubnetId"] = subnetId! }
    if disableApiTermination != nil { body["disableApiTermination"] = disableApiTermination! }
    if clientToken != nil { body["clientToken"] = clientToken! }
    if userData != nil { body["UserData"] = userData! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if kernelId != nil { body["KernelId"] = kernelId! }
    if securityGroupIds != nil { body["SecurityGroupId"] = securityGroupIds! }
    if monitoring != nil { body["Monitoring"] = monitoring! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if instanceType != nil { body["InstanceType"] = instanceType! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
    if securityGroups != nil { body["SecurityGroup"] = securityGroups! }
    if keyName != nil { body["KeyName"] = keyName! }
    body["MaxCount"] = maxCount
    if additionalInfo != nil { body["additionalInfo"] = additionalInfo! }
    if instanceInitiatedShutdownBehavior != nil { body["instanceInitiatedShutdownBehavior"] = instanceInitiatedShutdownBehavior! }
    if placement != nil { body["Placement"] = placement! }
    if iamInstanceProfile != nil { body["iamInstanceProfile"] = iamInstanceProfile! }
    body["MinCount"] = minCount
    if networkInterfaces != nil { body["networkInterface"] = networkInterfaces! }
    body["ImageId"] = imageId
    if ramdiskId != nil { body["RamdiskId"] = ramdiskId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - blockDeviceMappings: <p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important>
      - subnetId: <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p>
      - disableApiTermination: <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. If you set this parameter to <code>true</code> and then later want to be able to terminate the instance, you must first change the value of the <code>disableApiTermination</code> attribute to <code>false</code> using <a>ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> <p>Default: <code>false</code> </p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p>
      - userData: <p>The user data to make available to the instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href="http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding User Data</a> (Windows). If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
      - ebsOptimized: <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
      - kernelId: <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      - securityGroupIds: <p>One or more security group IDs. You can create a security group using <a>CreateSecurityGroup</a>.</p> <p>Default: Amazon EC2 uses the default security group.</p>
      - monitoring: <p>The monitoring for the instance.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceType: <p>The instance type. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>m1.small</code> </p>
      - privateIpAddress: <p>[EC2-VPC] The primary IP address. You must specify a value from the IP address range of the subnet.</p> <p>Only one private IP address can be designated as primary. Therefore, you can't specify this parameter if <code>PrivateIpAddresses.n.Primary</code> is set to <code>true</code> and <code>PrivateIpAddresses.n.PrivateIpAddress</code> is set to an IP address. </p> <p>You cannot specify this option if you're launching more than one instance in the request.</p> <p>Default: We select an IP address from the IP address range of the subnet.</p>
      - securityGroups: <p>[EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead.</p> <p>Default: Amazon EC2 uses the default security group.</p>
      - keyName: <p>The name of the key pair. You can create a key pair using <a>CreateKeyPair</a> or <a>ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      - maxCount: <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
      - additionalInfo: <p>Reserved.</p>
      - instanceInitiatedShutdownBehavior: <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      - placement: <p>The placement for the instance.</p>
      - iamInstanceProfile: <p>The IAM instance profile.</p>
      - minCount: <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
      - networkInterfaces: <p>One or more network interfaces.</p>
      - imageId: <p>The ID of the AMI, which you can get by calling <a>DescribeImages</a>.</p>
      - ramdiskId: <p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
 */
  public init(blockDeviceMappings: [BlockDeviceMapping]?, subnetId: String?, disableApiTermination: Bool?, clientToken: String?, userData: String?, ebsOptimized: Bool?, kernelId: String?, securityGroupIds: [String]?, monitoring: RunInstancesMonitoringEnabled?, dryRun: Bool?, instanceType: Instancetype?, privateIpAddress: String?, securityGroups: [String]?, keyName: String?, maxCount: Int, additionalInfo: String?, instanceInitiatedShutdownBehavior: Shutdownbehavior?, placement: Placement?, iamInstanceProfile: IamInstanceProfileSpecification?, minCount: Int, networkInterfaces: [InstanceNetworkInterfaceSpecification]?, imageId: String, ramdiskId: String?) {
self.blockDeviceMappings = blockDeviceMappings
self.subnetId = subnetId
self.disableApiTermination = disableApiTermination
self.clientToken = clientToken
self.userData = userData
self.ebsOptimized = ebsOptimized
self.kernelId = kernelId
self.securityGroupIds = securityGroupIds
self.monitoring = monitoring
self.dryRun = dryRun
self.instanceType = instanceType
self.privateIpAddress = privateIpAddress
self.securityGroups = securityGroups
self.keyName = keyName
self.maxCount = maxCount
self.additionalInfo = additionalInfo
self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
self.placement = placement
self.iamInstanceProfile = iamInstanceProfile
self.minCount = minCount
self.networkInterfaces = networkInterfaces
self.imageId = imageId
self.ramdiskId = ramdiskId
  }
}

/**
<p>Describes a Spot instance request.</p>
 */
public struct SpotInstanceRequest: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Availability Zone in which the bid is launched.</p>
 */
  public let launchedAvailabilityZone: String?
/**
<p>The ID of the Spot instance request.</p>
 */
  public let spotInstanceRequestId: String?
/**
<p>The state of the Spot instance request. Spot bid status information can help you track your Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Bid Status</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let state: Spotinstancestate?
/**
<p>The maximum hourly price (bid) for the Spot instance launched to fulfill the request.</p>
 */
  public let spotPrice: String?
/**
<p>Any tags assigned to the resource.</p>
 */
  public let tags: [Tag]?
/**
<p>The end date of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached.</p>
 */
  public let validUntil: Date?
/**
<p>The fault codes for the Spot instance request, if any.</p>
 */
  public let fault: SpotInstanceStateFault?
/**
<p>The product description associated with the Spot instance.</p>
 */
  public let productDescription: Riproductdescription?
/**
<p>The Availability Zone group. If you specify the same Availability Zone group for all Spot instance requests, all Spot instances are launched in the same Availability Zone.</p>
 */
  public let availabilityZoneGroup: String?
/**
<p>The status code and status message describing the Spot instance request.</p>
 */
  public let status: SpotInstanceStatus?
/**
<p>The start date of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The request becomes active at this date and time.</p>
 */
  public let validFrom: Date?
/**
<p>The instance ID, if an instance has been launched to fulfill the Spot instance request.</p>
 */
  public let instanceId: String?
/**
<p>If you specified a duration and your Spot instance request was fulfilled, this is the fixed hourly price in effect for the Spot instance while it runs.</p>
 */
  public let actualBlockHourlyPrice: String?
/**
<p>The duration for the Spot instance, in minutes.</p>
 */
  public let blockDurationMinutes: Int?
/**
<p>Additional information for launching instances.</p>
 */
  public let launchSpecification: LaunchSpecification?
/**
<p>The Spot instance request type.</p>
 */
  public let ec2Type: Spotinstancetype?
/**
<p>The instance launch group. Launch groups are Spot instances that launch together and terminate together.</p>
 */
  public let launchGroup: String?
/**
<p>The date and time when the Spot instance request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let createTime: Date?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if launchedAvailabilityZone != nil { body["launchedAvailabilityZone"] = launchedAvailabilityZone! }
    if spotInstanceRequestId != nil { body["spotInstanceRequestId"] = spotInstanceRequestId! }
    if state != nil { body["state"] = state! }
    if spotPrice != nil { body["spotPrice"] = spotPrice! }
    if tags != nil { body["tagSet"] = tags! }
    if validUntil != nil { body["validUntil"] = validUntil! }
    if fault != nil { body["fault"] = fault! }
    if productDescription != nil { body["productDescription"] = productDescription! }
    if availabilityZoneGroup != nil { body["availabilityZoneGroup"] = availabilityZoneGroup! }
    if status != nil { body["status"] = status! }
    if validFrom != nil { body["validFrom"] = validFrom! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if actualBlockHourlyPrice != nil { body["actualBlockHourlyPrice"] = actualBlockHourlyPrice! }
    if blockDurationMinutes != nil { body["blockDurationMinutes"] = blockDurationMinutes! }
    if launchSpecification != nil { body["launchSpecification"] = launchSpecification! }
    if ec2Type != nil { body["type"] = ec2Type! }
    if launchGroup != nil { body["launchGroup"] = launchGroup! }
    if createTime != nil { body["createTime"] = createTime! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotInstanceRequest {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotInstanceRequest(
        launchedAvailabilityZone: jsonDict["launchedAvailabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotInstanceRequestId: jsonDict["spotInstanceRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Spotinstancestate.deserialize(response: response, body: .json($0)) },
      spotPrice: jsonDict["spotPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      validUntil: jsonDict["validUntil"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      fault: jsonDict["fault"].flatMap { ($0 is NSNull) ? nil : SpotInstanceStateFault.deserialize(response: response, body: .json($0)) },
      productDescription: jsonDict["productDescription"].flatMap { ($0 is NSNull) ? nil : Riproductdescription.deserialize(response: response, body: .json($0)) },
      availabilityZoneGroup: jsonDict["availabilityZoneGroup"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : SpotInstanceStatus.deserialize(response: response, body: .json($0)) },
      validFrom: jsonDict["validFrom"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      actualBlockHourlyPrice: jsonDict["actualBlockHourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      blockDurationMinutes: jsonDict["blockDurationMinutes"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      launchSpecification: jsonDict["launchSpecification"].flatMap { ($0 is NSNull) ? nil : LaunchSpecification.deserialize(response: response, body: .json($0)) },
      ec2Type: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : Spotinstancetype.deserialize(response: response, body: .json($0)) },
      launchGroup: jsonDict["launchGroup"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      createTime: jsonDict["createTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - launchedAvailabilityZone: <p>The Availability Zone in which the bid is launched.</p>
      - spotInstanceRequestId: <p>The ID of the Spot instance request.</p>
      - state: <p>The state of the Spot instance request. Spot bid status information can help you track your Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Bid Status</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - spotPrice: <p>The maximum hourly price (bid) for the Spot instance launched to fulfill the request.</p>
      - tags: <p>Any tags assigned to the resource.</p>
      - validUntil: <p>The end date of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached.</p>
      - fault: <p>The fault codes for the Spot instance request, if any.</p>
      - productDescription: <p>The product description associated with the Spot instance.</p>
      - availabilityZoneGroup: <p>The Availability Zone group. If you specify the same Availability Zone group for all Spot instance requests, all Spot instances are launched in the same Availability Zone.</p>
      - status: <p>The status code and status message describing the Spot instance request.</p>
      - validFrom: <p>The start date of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The request becomes active at this date and time.</p>
      - instanceId: <p>The instance ID, if an instance has been launched to fulfill the Spot instance request.</p>
      - actualBlockHourlyPrice: <p>If you specified a duration and your Spot instance request was fulfilled, this is the fixed hourly price in effect for the Spot instance while it runs.</p>
      - blockDurationMinutes: <p>The duration for the Spot instance, in minutes.</p>
      - launchSpecification: <p>Additional information for launching instances.</p>
      - ec2Type: <p>The Spot instance request type.</p>
      - launchGroup: <p>The instance launch group. Launch groups are Spot instances that launch together and terminate together.</p>
      - createTime: <p>The date and time when the Spot instance request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public init(launchedAvailabilityZone: String?, spotInstanceRequestId: String?, state: Spotinstancestate?, spotPrice: String?, tags: [Tag]?, validUntil: Date?, fault: SpotInstanceStateFault?, productDescription: Riproductdescription?, availabilityZoneGroup: String?, status: SpotInstanceStatus?, validFrom: Date?, instanceId: String?, actualBlockHourlyPrice: String?, blockDurationMinutes: Int?, launchSpecification: LaunchSpecification?, ec2Type: Spotinstancetype?, launchGroup: String?, createTime: Date?) {
self.launchedAvailabilityZone = launchedAvailabilityZone
self.spotInstanceRequestId = spotInstanceRequestId
self.state = state
self.spotPrice = spotPrice
self.tags = tags
self.validUntil = validUntil
self.fault = fault
self.productDescription = productDescription
self.availabilityZoneGroup = availabilityZoneGroup
self.status = status
self.validFrom = validFrom
self.instanceId = instanceId
self.actualBlockHourlyPrice = actualBlockHourlyPrice
self.blockDurationMinutes = blockDurationMinutes
self.launchSpecification = launchSpecification
self.ec2Type = ec2Type
self.launchGroup = launchGroup
self.createTime = createTime
  }
}

/**
<p>Contains the parameters for RebootInstances.</p>
 */
public struct RebootInstancesRequest: RestJsonSerializable {
/**
<p>One or more instance IDs.</p>
 */
  public let instanceIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceIds: <p>One or more instance IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceIds: [String], dryRun: Bool?) {
self.instanceIds = instanceIds
self.dryRun = dryRun
  }
}

/**
<p>Describes the status of a VPC peering connection.</p>
 */
public struct VpcPeeringConnectionStateReason: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The status of the VPC peering connection.</p>
 */
  public let code: Vpcpeeringconnectionstatereasoncode?
/**
<p>A message that provides more information about the status, if applicable.</p>
 */
  public let message: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if code != nil { body["code"] = code! }
    if message != nil { body["message"] = message! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcPeeringConnectionStateReason {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcPeeringConnectionStateReason(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : Vpcpeeringconnectionstatereasoncode.deserialize(response: response, body: .json($0)) },
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - code: <p>The status of the VPC peering connection.</p>
      - message: <p>A message that provides more information about the status, if applicable.</p>
 */
  public init(code: Vpcpeeringconnectionstatereasoncode?, message: String?) {
self.code = code
self.message = message
  }
}

enum Exporttaskstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `active` = "active"
  case `cancelling` = "cancelling"
  case `cancelled` = "cancelled"
  case `completed` = "completed"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Exporttaskstate {
    guard case let .json(json) = body else { fatalError() }
    return Exporttaskstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes a Scheduled Instance.</p>
 */
public struct ScheduledInstance: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
 */
  public let platform: String?
/**
<p>The time that the previous schedule ended or will end.</p>
 */
  public let previousSlotEndTime: Date?
/**
<p>The total number of hours for a single instance for the entire term.</p>
 */
  public let totalScheduledInstanceHours: Int?
/**
<p>The date when the Scheduled Instance was purchased.</p>
 */
  public let createDate: Date?
/**
<p>The hourly price for a single instance.</p>
 */
  public let hourlyPrice: String?
/**
<p>The instance type.</p>
 */
  public let instanceType: String?
/**
<p>The number of hours in the schedule.</p>
 */
  public let slotDurationInHours: Int?
/**
<p>The Scheduled Instance ID.</p>
 */
  public let scheduledInstanceId: String?
/**
<p>The Availability Zone.</p>
 */
  public let availabilityZone: String?
/**
<p>The start date for the Scheduled Instance.</p>
 */
  public let termStartDate: Date?
/**
<p>The end date for the Scheduled Instance.</p>
 */
  public let termEndDate: Date?
/**
<p>The time for the next schedule to start.</p>
 */
  public let nextSlotStartTime: Date?
/**
<p>The number of instances.</p>
 */
  public let instanceCount: Int?
/**
<p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
 */
  public let networkPlatform: String?
/**
<p>The schedule recurrence.</p>
 */
  public let recurrence: ScheduledInstanceRecurrence?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if platform != nil { body["platform"] = platform! }
    if previousSlotEndTime != nil { body["previousSlotEndTime"] = previousSlotEndTime! }
    if totalScheduledInstanceHours != nil { body["totalScheduledInstanceHours"] = totalScheduledInstanceHours! }
    if createDate != nil { body["createDate"] = createDate! }
    if hourlyPrice != nil { body["hourlyPrice"] = hourlyPrice! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if slotDurationInHours != nil { body["slotDurationInHours"] = slotDurationInHours! }
    if scheduledInstanceId != nil { body["scheduledInstanceId"] = scheduledInstanceId! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if termStartDate != nil { body["termStartDate"] = termStartDate! }
    if termEndDate != nil { body["termEndDate"] = termEndDate! }
    if nextSlotStartTime != nil { body["nextSlotStartTime"] = nextSlotStartTime! }
    if instanceCount != nil { body["instanceCount"] = instanceCount! }
    if networkPlatform != nil { body["networkPlatform"] = networkPlatform! }
    if recurrence != nil { body["recurrence"] = recurrence! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstance {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstance(
        platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      previousSlotEndTime: jsonDict["previousSlotEndTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      totalScheduledInstanceHours: jsonDict["totalScheduledInstanceHours"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      createDate: jsonDict["createDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      hourlyPrice: jsonDict["hourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      slotDurationInHours: jsonDict["slotDurationInHours"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      scheduledInstanceId: jsonDict["scheduledInstanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      termStartDate: jsonDict["termStartDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      termEndDate: jsonDict["termEndDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      nextSlotStartTime: jsonDict["nextSlotStartTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      instanceCount: jsonDict["instanceCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      networkPlatform: jsonDict["networkPlatform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      recurrence: jsonDict["recurrence"].flatMap { ($0 is NSNull) ? nil : ScheduledInstanceRecurrence.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - platform: <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
      - previousSlotEndTime: <p>The time that the previous schedule ended or will end.</p>
      - totalScheduledInstanceHours: <p>The total number of hours for a single instance for the entire term.</p>
      - createDate: <p>The date when the Scheduled Instance was purchased.</p>
      - hourlyPrice: <p>The hourly price for a single instance.</p>
      - instanceType: <p>The instance type.</p>
      - slotDurationInHours: <p>The number of hours in the schedule.</p>
      - scheduledInstanceId: <p>The Scheduled Instance ID.</p>
      - availabilityZone: <p>The Availability Zone.</p>
      - termStartDate: <p>The start date for the Scheduled Instance.</p>
      - termEndDate: <p>The end date for the Scheduled Instance.</p>
      - nextSlotStartTime: <p>The time for the next schedule to start.</p>
      - instanceCount: <p>The number of instances.</p>
      - networkPlatform: <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
      - recurrence: <p>The schedule recurrence.</p>
 */
  public init(platform: String?, previousSlotEndTime: Date?, totalScheduledInstanceHours: Int?, createDate: Date?, hourlyPrice: String?, instanceType: String?, slotDurationInHours: Int?, scheduledInstanceId: String?, availabilityZone: String?, termStartDate: Date?, termEndDate: Date?, nextSlotStartTime: Date?, instanceCount: Int?, networkPlatform: String?, recurrence: ScheduledInstanceRecurrence?) {
self.platform = platform
self.previousSlotEndTime = previousSlotEndTime
self.totalScheduledInstanceHours = totalScheduledInstanceHours
self.createDate = createDate
self.hourlyPrice = hourlyPrice
self.instanceType = instanceType
self.slotDurationInHours = slotDurationInHours
self.scheduledInstanceId = scheduledInstanceId
self.availabilityZone = availabilityZone
self.termStartDate = termStartDate
self.termEndDate = termEndDate
self.nextSlotStartTime = nextSlotStartTime
self.instanceCount = instanceCount
self.networkPlatform = networkPlatform
self.recurrence = recurrence
  }
}

/**
<p>Contains the output of DescribeSpotFleetInstances.</p>
 */
public struct DescribeSpotFleetInstancesResponse: RestJsonDeserializable {
/**
<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String
/**
<p>The running instances. Note that this list is refreshed periodically and might be out of date.</p>
 */
  public let activeInstances: [ActiveInstance]


  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSpotFleetInstancesResponse {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSpotFleetInstancesResponse(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotFleetRequestId: jsonDict["spotFleetRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      activeInstances: jsonDict["activeInstanceSet"].flatMap { ($0 is NSNull) ? nil : [ActiveInstance].deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - nextToken: <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
      - activeInstances: <p>The running instances. Note that this list is refreshed periodically and might be out of date.</p>
 */
  public init(nextToken: String?, spotFleetRequestId: String, activeInstances: [ActiveInstance]) {
self.nextToken = nextToken
self.spotFleetRequestId = spotFleetRequestId
self.activeInstances = activeInstances
  }
}

/**
<p>Describes a product code.</p>
 */
public struct ProductCode: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The type of product code.</p>
 */
  public let productCodeType: Productcodevalues?
/**
<p>The product code.</p>
 */
  public let productCodeId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if productCodeType != nil { body["type"] = productCodeType! }
    if productCodeId != nil { body["productCode"] = productCodeId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ProductCode {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ProductCode(
        productCodeType: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : Productcodevalues.deserialize(response: response, body: .json($0)) },
      productCodeId: jsonDict["productCode"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - productCodeType: <p>The type of product code.</p>
      - productCodeId: <p>The product code.</p>
 */
  public init(productCodeType: Productcodevalues?, productCodeId: String?) {
self.productCodeType = productCodeType
self.productCodeId = productCodeId
  }
}

/**
<p>Describes a scheduled event for an instance.</p>
 */
public struct InstanceStatusEvent: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The event code.</p>
 */
  public let code: Eventcode?
/**
<p>The earliest scheduled start time for the event.</p>
 */
  public let notBefore: Date?
/**
<p>The latest scheduled end time for the event.</p>
 */
  public let notAfter: Date?
/**
<p>A description of the event.</p> <p>After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if code != nil { body["code"] = code! }
    if notBefore != nil { body["notBefore"] = notBefore! }
    if notAfter != nil { body["notAfter"] = notAfter! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceStatusEvent {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceStatusEvent(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : Eventcode.deserialize(response: response, body: .json($0)) },
      notBefore: jsonDict["notBefore"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      notAfter: jsonDict["notAfter"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - code: <p>The event code.</p>
      - notBefore: <p>The earliest scheduled start time for the event.</p>
      - notAfter: <p>The latest scheduled end time for the event.</p>
      - description: <p>A description of the event.</p> <p>After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].</p>
 */
  public init(code: Eventcode?, notBefore: Date?, notAfter: Date?, description: String?) {
self.code = code
self.notBefore = notBefore
self.notAfter = notAfter
self.description = description
  }
}

/**
<p>Contains the output of DescribeVolumeAttribute.</p>
 */
public struct DescribeVolumeAttributeResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A list of product codes.</p>
 */
  public let productCodes: [ProductCode]?
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String?
/**
<p>The state of <code>autoEnableIO</code> attribute.</p>
 */
  public let autoEnableIO: AttributeBooleanValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if productCodes != nil { body["productCodes"] = productCodes! }
    if volumeId != nil { body["volumeId"] = volumeId! }
    if autoEnableIO != nil { body["autoEnableIO"] = autoEnableIO! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVolumeAttributeResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVolumeAttributeResult(
        productCodes: jsonDict["productCodes"].flatMap { ($0 is NSNull) ? nil : [ProductCode].deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      autoEnableIO: jsonDict["autoEnableIO"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - productCodes: <p>A list of product codes.</p>
      - volumeId: <p>The ID of the volume.</p>
      - autoEnableIO: <p>The state of <code>autoEnableIO</code> attribute.</p>
 */
  public init(productCodes: [ProductCode]?, volumeId: String?, autoEnableIO: AttributeBooleanValue?) {
self.productCodes = productCodes
self.volumeId = volumeId
self.autoEnableIO = autoEnableIO
  }
}

/**
<p>Contains the parameters for DeleteNetworkInterface.</p>
 */
public struct DeleteNetworkInterfaceRequest: RestJsonSerializable {
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["networkInterfaceId"] = networkInterfaceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(networkInterfaceId: String, dryRun: Bool?) {
self.networkInterfaceId = networkInterfaceId
self.dryRun = dryRun
  }
}

/**
<p>Describes the data feed for a Spot instance.</p>
 */
public struct SpotDatafeedSubscription: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Amazon S3 bucket where the Spot instance data feed is located.</p>
 */
  public let bucket: String?
/**
<p>The AWS account ID of the account.</p>
 */
  public let ownerId: String?
/**
<p>The state of the Spot instance data feed subscription.</p>
 */
  public let state: Datafeedsubscriptionstate?
/**
<p>The fault codes for the Spot instance request, if any.</p>
 */
  public let fault: SpotInstanceStateFault?
/**
<p>The prefix that is prepended to data feed files.</p>
 */
  public let prefix: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if bucket != nil { body["bucket"] = bucket! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if state != nil { body["state"] = state! }
    if fault != nil { body["fault"] = fault! }
    if prefix != nil { body["prefix"] = prefix! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotDatafeedSubscription {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotDatafeedSubscription(
        bucket: jsonDict["bucket"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Datafeedsubscriptionstate.deserialize(response: response, body: .json($0)) },
      fault: jsonDict["fault"].flatMap { ($0 is NSNull) ? nil : SpotInstanceStateFault.deserialize(response: response, body: .json($0)) },
      prefix: jsonDict["prefix"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - bucket: <p>The Amazon S3 bucket where the Spot instance data feed is located.</p>
      - ownerId: <p>The AWS account ID of the account.</p>
      - state: <p>The state of the Spot instance data feed subscription.</p>
      - fault: <p>The fault codes for the Spot instance request, if any.</p>
      - prefix: <p>The prefix that is prepended to data feed files.</p>
 */
  public init(bucket: String?, ownerId: String?, state: Datafeedsubscriptionstate?, fault: SpotInstanceStateFault?, prefix: String?) {
self.bucket = bucket
self.ownerId = ownerId
self.state = state
self.fault = fault
self.prefix = prefix
  }
}


/**
<p>Describes an import volume task.</p>
 */
public struct ImportInstanceVolumeDetailItem: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The status of the import of this particular disk image.</p>
 */
  public let status: String
/**
<p>The number of bytes converted so far.</p>
 */
  public let bytesConverted: Int
/**
<p>The volume.</p>
 */
  public let volume: DiskImageVolumeDescription
/**
<p>The image.</p>
 */
  public let image: DiskImageDescription
/**
<p>The status information or errors related to the disk image.</p>
 */
  public let statusMessage: String?
/**
<p>The Availability Zone where the resulting instance will reside.</p>
 */
  public let availabilityZone: String
/**
<p>A description of the task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["status"] = status
    body["bytesConverted"] = bytesConverted
    body["volume"] = volume
    body["image"] = image
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    body["availabilityZone"] = availabilityZone
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportInstanceVolumeDetailItem {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportInstanceVolumeDetailItem(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      bytesConverted: jsonDict["bytesConverted"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }!,
      volume: jsonDict["volume"].flatMap { ($0 is NSNull) ? nil : DiskImageVolumeDescription.deserialize(response: response, body: .json($0)) }!,
      image: jsonDict["image"].flatMap { ($0 is NSNull) ? nil : DiskImageDescription.deserialize(response: response, body: .json($0)) }!,
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>The status of the import of this particular disk image.</p>
      - bytesConverted: <p>The number of bytes converted so far.</p>
      - volume: <p>The volume.</p>
      - image: <p>The image.</p>
      - statusMessage: <p>The status information or errors related to the disk image.</p>
      - availabilityZone: <p>The Availability Zone where the resulting instance will reside.</p>
      - description: <p>A description of the task.</p>
 */
  public init(status: String, bytesConverted: Int, volume: DiskImageVolumeDescription, image: DiskImageDescription, statusMessage: String?, availabilityZone: String, description: String?) {
self.status = status
self.bytesConverted = bytesConverted
self.volume = volume
self.image = image
self.statusMessage = statusMessage
self.availabilityZone = availabilityZone
self.description = description
  }
}

/**
<p>Contains the parameters for ImportImage.</p>
 */
public struct ImportImageRequest: RestJsonSerializable {
/**
<p>Information about the disk containers.</p>
 */
  public let diskContainers: [ImageDiskContainer]?
/**
<p>The operating system of the virtual machine.</p> <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
 */
  public let platform: String?
/**
<p>The token to enable idempotency for VM import requests.</p>
 */
  public let clientToken: String?
/**
<p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p> <p> <b>Note:</b> You may only use BYOL if you have existing licenses with rights to use these licenses in a third party cloud like AWS. For more information, see <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p> <p>Valid values: <code>AWS</code> | <code>BYOL</code> </p>
 */
  public let licenseType: String?
/**
<p>The target hypervisor platform.</p> <p>Valid values: <code>xen</code> </p>
 */
  public let hypervisor: String?
/**
<p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
 */
  public let architecture: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The name of the role to use when not using the default role, 'vmimport'.</p>
 */
  public let roleName: String?
/**
<p>The client-specific data.</p>
 */
  public let clientData: ClientData?
/**
<p>A description string for the import image task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if diskContainers != nil { body["DiskContainer"] = diskContainers! }
    if platform != nil { body["Platform"] = platform! }
    if clientToken != nil { body["ClientToken"] = clientToken! }
    if licenseType != nil { body["LicenseType"] = licenseType! }
    if hypervisor != nil { body["Hypervisor"] = hypervisor! }
    if architecture != nil { body["Architecture"] = architecture! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if roleName != nil { body["RoleName"] = roleName! }
    if clientData != nil { body["ClientData"] = clientData! }
    if description != nil { body["Description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - diskContainers: <p>Information about the disk containers.</p>
      - platform: <p>The operating system of the virtual machine.</p> <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
      - clientToken: <p>The token to enable idempotency for VM import requests.</p>
      - licenseType: <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p> <p> <b>Note:</b> You may only use BYOL if you have existing licenses with rights to use these licenses in a third party cloud like AWS. For more information, see <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p> <p>Valid values: <code>AWS</code> | <code>BYOL</code> </p>
      - hypervisor: <p>The target hypervisor platform.</p> <p>Valid values: <code>xen</code> </p>
      - architecture: <p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - roleName: <p>The name of the role to use when not using the default role, 'vmimport'.</p>
      - clientData: <p>The client-specific data.</p>
      - description: <p>A description string for the import image task.</p>
 */
  public init(diskContainers: [ImageDiskContainer]?, platform: String?, clientToken: String?, licenseType: String?, hypervisor: String?, architecture: String?, dryRun: Bool?, roleName: String?, clientData: ClientData?, description: String?) {
self.diskContainers = diskContainers
self.platform = platform
self.clientToken = clientToken
self.licenseType = licenseType
self.hypervisor = hypervisor
self.architecture = architecture
self.dryRun = dryRun
self.roleName = roleName
self.clientData = clientData
self.description = description
  }
}


/**
<p>Information about items that were not successfully processed in a batch call.</p>
 */
public struct UnsuccessfulItem: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the resource.</p>
 */
  public let resourceId: String?
/**
<p>Information about the error.</p>
 */
  public let ec2Error: UnsuccessfulItemError

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if resourceId != nil { body["resourceId"] = resourceId! }
    body["error"] = ec2Error
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UnsuccessfulItem {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UnsuccessfulItem(
        resourceId: jsonDict["resourceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ec2Error: jsonDict["error"].flatMap { ($0 is NSNull) ? nil : UnsuccessfulItemError.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - resourceId: <p>The ID of the resource.</p>
      - ec2Error: <p>Information about the error.</p>
 */
  public init(resourceId: String?, ec2Error: UnsuccessfulItemError) {
self.resourceId = resourceId
self.ec2Error = ec2Error
  }
}

/**
<p>Contains the output of ModifySpotFleetRequest.</p>
 */
public struct ModifySpotFleetRequestResponse: RestJsonDeserializable {
/**
<p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
 */
  public let ec2Return: Bool?


  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ModifySpotFleetRequestResponse {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ModifySpotFleetRequestResponse(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}


enum Volumetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `standard` = "standard"
  case `io1` = "io1"
  case `gp2` = "gp2"
  case `sc1` = "sc1"
  case `st1` = "st1"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volumetype {
    guard case let .json(json) = body else { fatalError() }
    return Volumetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes a volume.</p>
 */
public struct Volume: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
 */
  public let volumeType: Volumetype?
/**
<p>The volume state.</p>
 */
  public let state: Volumestate?
/**
<p>Any tags assigned to the volume.</p>
 */
  public let tags: [Tag]?
/**
<p>The size of the volume, in GiBs.</p>
 */
  public let size: Int?
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String?
/**
<p>The snapshot from which the volume was created, if applicable.</p>
 */
  public let snapshotId: String?
/**
<p>Indicates whether the volume will be encrypted.</p>
 */
  public let encrypted: Bool?
/**
<p>The time stamp when volume creation was initiated.</p>
 */
  public let createTime: Date?
/**
<p>The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information on General Purpose SSD baseline performance, I/O credits, and bursting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code> volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
 */
  public let iops: Int?
/**
<p>The Availability Zone for the volume.</p>
 */
  public let availabilityZone: String?
/**
<p>Information about the volume attachments.</p>
 */
  public let attachments: [VolumeAttachment]?
/**
<p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.</p>
 */
  public let kmsKeyId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if volumeType != nil { body["volumeType"] = volumeType! }
    if state != nil { body["status"] = state! }
    if tags != nil { body["tagSet"] = tags! }
    if size != nil { body["size"] = size! }
    if volumeId != nil { body["volumeId"] = volumeId! }
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
    if encrypted != nil { body["encrypted"] = encrypted! }
    if createTime != nil { body["createTime"] = createTime! }
    if iops != nil { body["iops"] = iops! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if attachments != nil { body["attachmentSet"] = attachments! }
    if kmsKeyId != nil { body["kmsKeyId"] = kmsKeyId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volume {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Volume(
        volumeType: jsonDict["volumeType"].flatMap { ($0 is NSNull) ? nil : Volumetype.deserialize(response: response, body: .json($0)) },
      state: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Volumestate.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      size: jsonDict["size"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      encrypted: jsonDict["encrypted"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      createTime: jsonDict["createTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      iops: jsonDict["iops"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      attachments: jsonDict["attachmentSet"].flatMap { ($0 is NSNull) ? nil : [VolumeAttachment].deserialize(response: response, body: .json($0)) },
      kmsKeyId: jsonDict["kmsKeyId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - volumeType: <p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
      - state: <p>The volume state.</p>
      - tags: <p>Any tags assigned to the volume.</p>
      - size: <p>The size of the volume, in GiBs.</p>
      - volumeId: <p>The ID of the volume.</p>
      - snapshotId: <p>The snapshot from which the volume was created, if applicable.</p>
      - encrypted: <p>Indicates whether the volume will be encrypted.</p>
      - createTime: <p>The time stamp when volume creation was initiated.</p>
      - iops: <p>The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information on General Purpose SSD baseline performance, I/O credits, and bursting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code> volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
      - availabilityZone: <p>The Availability Zone for the volume.</p>
      - attachments: <p>Information about the volume attachments.</p>
      - kmsKeyId: <p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.</p>
 */
  public init(volumeType: Volumetype?, state: Volumestate?, tags: [Tag]?, size: Int?, volumeId: String?, snapshotId: String?, encrypted: Bool?, createTime: Date?, iops: Int?, availabilityZone: String?, attachments: [VolumeAttachment]?, kmsKeyId: String?) {
self.volumeType = volumeType
self.state = state
self.tags = tags
self.size = size
self.volumeId = volumeId
self.snapshotId = snapshotId
self.encrypted = encrypted
self.createTime = createTime
self.iops = iops
self.availabilityZone = availabilityZone
self.attachments = attachments
self.kmsKeyId = kmsKeyId
  }
}

public struct PurchaseHostReservationRequest: RestJsonSerializable {
/**
<p>The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let clientToken: String?
/**
<p>The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request will fail. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is <code>USD</code>. For example, to indicate a limit price of USD 100, specify 100.00.</p>
 */
  public let limitPrice: String?
/**
<p>The ID of the offering.</p>
 */
  public let offeringId: String
/**
<p>The ID/s of the Dedicated Host/s that the reservation will be associated with.</p>
 */
  public let hostIdSet: [String]

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if currencyCode != nil { body["CurrencyCode"] = currencyCode! }
    if clientToken != nil { body["ClientToken"] = clientToken! }
    if limitPrice != nil { body["LimitPrice"] = limitPrice! }
    body["OfferingId"] = offeringId
    body["HostIdSet"] = hostIdSet
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - currencyCode: <p>The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - limitPrice: <p>The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request will fail. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is <code>USD</code>. For example, to indicate a limit price of USD 100, specify 100.00.</p>
      - offeringId: <p>The ID of the offering.</p>
      - hostIdSet: <p>The ID/s of the Dedicated Host/s that the reservation will be associated with.</p>
 */
  public init(currencyCode: Currencycodevalues?, clientToken: String?, limitPrice: String?, offeringId: String, hostIdSet: [String]) {
self.currencyCode = currencyCode
self.clientToken = clientToken
self.limitPrice = limitPrice
self.offeringId = offeringId
self.hostIdSet = hostIdSet
  }
}

/**
<p>Describes an instance attribute.</p>
 */
public struct InstanceAttribute: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The block device mapping of the instance.</p>
 */
  public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
/**
<p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
 */
  public let disableApiTermination: AttributeBooleanValue?
/**
<p>The user data.</p>
 */
  public let userData: AttributeValue?
/**
<p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
 */
  public let sriovNetSupport: AttributeValue?
/**
<p>The name of the root device (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p>
 */
  public let rootDeviceName: AttributeValue?
/**
<p>Indicates whether the instance is optimized for EBS I/O.</p>
 */
  public let ebsOptimized: AttributeBooleanValue?
/**
<p>Indicates whether source/destination checking is enabled. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</p>
 */
  public let sourceDestCheck: AttributeBooleanValue?
/**
<p>The kernel ID.</p>
 */
  public let kernelId: AttributeValue?
/**
<p>The instance type.</p>
 */
  public let instanceType: AttributeValue?
/**
<p>A list of product codes.</p>
 */
  public let productCodes: [ProductCode]?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>Indicates whether enhanced networking with ENA is enabled.</p>
 */
  public let enaSupport: AttributeBooleanValue?
/**
<p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
 */
  public let instanceInitiatedShutdownBehavior: AttributeValue?
/**
<p>The RAM disk ID.</p>
 */
  public let ramdiskId: AttributeValue?
/**
<p>The security groups associated with the instance.</p>
 */
  public let groups: [GroupIdentifier]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if disableApiTermination != nil { body["disableApiTermination"] = disableApiTermination! }
    if userData != nil { body["userData"] = userData! }
    if sriovNetSupport != nil { body["sriovNetSupport"] = sriovNetSupport! }
    if rootDeviceName != nil { body["rootDeviceName"] = rootDeviceName! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    if kernelId != nil { body["kernel"] = kernelId! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if productCodes != nil { body["productCodes"] = productCodes! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if enaSupport != nil { body["enaSupport"] = enaSupport! }
    if instanceInitiatedShutdownBehavior != nil { body["instanceInitiatedShutdownBehavior"] = instanceInitiatedShutdownBehavior! }
    if ramdiskId != nil { body["ramdisk"] = ramdiskId! }
    if groups != nil { body["groupSet"] = groups! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceAttribute {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceAttribute(
        blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [InstanceBlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      disableApiTermination: jsonDict["disableApiTermination"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) },
      userData: jsonDict["userData"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      sriovNetSupport: jsonDict["sriovNetSupport"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      rootDeviceName: jsonDict["rootDeviceName"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      ebsOptimized: jsonDict["ebsOptimized"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) },
      sourceDestCheck: jsonDict["sourceDestCheck"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernel"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      productCodes: jsonDict["productCodes"].flatMap { ($0 is NSNull) ? nil : [ProductCode].deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      enaSupport: jsonDict["enaSupport"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) },
      instanceInitiatedShutdownBehavior: jsonDict["instanceInitiatedShutdownBehavior"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdisk"].flatMap { ($0 is NSNull) ? nil : AttributeValue.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>The block device mapping of the instance.</p>
      - disableApiTermination: <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
      - userData: <p>The user data.</p>
      - sriovNetSupport: <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
      - rootDeviceName: <p>The name of the root device (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p>
      - ebsOptimized: <p>Indicates whether the instance is optimized for EBS I/O.</p>
      - sourceDestCheck: <p>Indicates whether source/destination checking is enabled. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</p>
      - kernelId: <p>The kernel ID.</p>
      - instanceType: <p>The instance type.</p>
      - productCodes: <p>A list of product codes.</p>
      - instanceId: <p>The ID of the instance.</p>
      - enaSupport: <p>Indicates whether enhanced networking with ENA is enabled.</p>
      - instanceInitiatedShutdownBehavior: <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
      - ramdiskId: <p>The RAM disk ID.</p>
      - groups: <p>The security groups associated with the instance.</p>
 */
  public init(blockDeviceMappings: [InstanceBlockDeviceMapping]?, disableApiTermination: AttributeBooleanValue?, userData: AttributeValue?, sriovNetSupport: AttributeValue?, rootDeviceName: AttributeValue?, ebsOptimized: AttributeBooleanValue?, sourceDestCheck: AttributeBooleanValue?, kernelId: AttributeValue?, instanceType: AttributeValue?, productCodes: [ProductCode]?, instanceId: String?, enaSupport: AttributeBooleanValue?, instanceInitiatedShutdownBehavior: AttributeValue?, ramdiskId: AttributeValue?, groups: [GroupIdentifier]?) {
self.blockDeviceMappings = blockDeviceMappings
self.disableApiTermination = disableApiTermination
self.userData = userData
self.sriovNetSupport = sriovNetSupport
self.rootDeviceName = rootDeviceName
self.ebsOptimized = ebsOptimized
self.sourceDestCheck = sourceDestCheck
self.kernelId = kernelId
self.instanceType = instanceType
self.productCodes = productCodes
self.instanceId = instanceId
self.enaSupport = enaSupport
self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
self.ramdiskId = ramdiskId
self.groups = groups
  }
}

/**
<p>Contains the parameters for ModifySnapshotAttribute.</p>
 */
public struct ModifySnapshotAttributeRequest: RestJsonSerializable {
/**
<p>The account ID to modify for the snapshot.</p>
 */
  public let userIds: [String]?
/**
<p>The ID of the snapshot.</p>
 */
  public let snapshotId: String
/**
<p>A JSON representation of the snapshot attribute modification.</p>
 */
  public let createVolumePermission: CreateVolumePermissionModifications?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The snapshot attribute to modify.</p> <note> <p>Only volume creation permissions may be modified at the customer level.</p> </note>
 */
  public let attribute: Snapshotattributename?
/**
<p>The type of operation to perform to the attribute.</p>
 */
  public let operationType: Operationtype?
/**
<p>The group to modify for the snapshot.</p>
 */
  public let groupNames: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if userIds != nil { body["UserId"] = userIds! }
    body["SnapshotId"] = snapshotId
    if createVolumePermission != nil { body["CreateVolumePermission"] = createVolumePermission! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if attribute != nil { body["Attribute"] = attribute! }
    if operationType != nil { body["OperationType"] = operationType! }
    if groupNames != nil { body["UserGroup"] = groupNames! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - userIds: <p>The account ID to modify for the snapshot.</p>
      - snapshotId: <p>The ID of the snapshot.</p>
      - createVolumePermission: <p>A JSON representation of the snapshot attribute modification.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - attribute: <p>The snapshot attribute to modify.</p> <note> <p>Only volume creation permissions may be modified at the customer level.</p> </note>
      - operationType: <p>The type of operation to perform to the attribute.</p>
      - groupNames: <p>The group to modify for the snapshot.</p>
 */
  public init(userIds: [String]?, snapshotId: String, createVolumePermission: CreateVolumePermissionModifications?, dryRun: Bool?, attribute: Snapshotattributename?, operationType: Operationtype?, groupNames: [String]?) {
self.userIds = userIds
self.snapshotId = snapshotId
self.createVolumePermission = createVolumePermission
self.dryRun = dryRun
self.attribute = attribute
self.operationType = operationType
self.groupNames = groupNames
  }
}

/**
<p>Contains the output for DescribeConversionTasks.</p>
 */
public struct DescribeConversionTasksResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the conversion tasks.</p>
 */
  public let conversionTasks: [ConversionTask]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if conversionTasks != nil { body["conversionTasks"] = conversionTasks! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeConversionTasksResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeConversionTasksResult(
        conversionTasks: jsonDict["conversionTasks"].flatMap { ($0 is NSNull) ? nil : [ConversionTask].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - conversionTasks: <p>Information about the conversion tasks.</p>
 */
  public init(conversionTasks: [ConversionTask]?) {
self.conversionTasks = conversionTasks
  }
}

/**
<p>Contains the output of AttachClassicLinkVpc.</p>
 */
public struct AttachClassicLinkVpcResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AttachClassicLinkVpcResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AttachClassicLinkVpcResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}


/**
<p>Contains the parameters for ModifySpotFleetRequest.</p>
 */
public struct ModifySpotFleetRequestRequest: RestJsonSerializable {
/**
<p>The size of the fleet.</p>
 */
  public let targetCapacity: Int?
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String
/**
<p>Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet.</p>
 */
  public let excessCapacityTerminationPolicy: Excesscapacityterminationpolicy?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if targetCapacity != nil { body["targetCapacity"] = targetCapacity! }
    body["spotFleetRequestId"] = spotFleetRequestId
    if excessCapacityTerminationPolicy != nil { body["excessCapacityTerminationPolicy"] = excessCapacityTerminationPolicy! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - targetCapacity: <p>The size of the fleet.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
      - excessCapacityTerminationPolicy: <p>Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet.</p>
 */
  public init(targetCapacity: Int?, spotFleetRequestId: String, excessCapacityTerminationPolicy: Excesscapacityterminationpolicy?) {
self.targetCapacity = targetCapacity
self.spotFleetRequestId = spotFleetRequestId
self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
  }
}


/**
<p>Details about the Dedicated Host Reservation and associated Dedicated Hosts.</p>
 */
public struct HostReservation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The upfront price of the reservation.</p>
 */
  public let upfrontPrice: String?
/**
<p>The state of the reservation.</p>
 */
  public let state: Reservationstate?
/**
<p>The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.</p>
 */
  public let offeringId: String?
/**
<p>The number of Dedicated Hosts the reservation is associated with.</p>
 */
  public let count: Int?
/**
<p>The payment option selected for this reservation.</p>
 */
  public let paymentOption: Paymentoption?
/**
<p>The ID of the reservation that specifies the associated Dedicated Hosts.</p>
 */
  public let hostReservationId: String?
/**
<p>The hourly price of the reservation.</p>
 */
  public let hourlyPrice: String?
/**
<p>The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.</p>
 */
  public let instanceFamily: String?
/**
<p>The date and time that the reservation started.</p>
 */
  public let start: Date?
/**
<p>The date and time that the reservation ends.</p>
 */
  public let end: Date?
/**
<p>The IDs of the Dedicated Hosts associated with the reservation.</p>
 */
  public let hostIdSet: [String]?
/**
<p>The currency in which the <code>upfrontPrice</code> and <code>hourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The length of the reservation's term, specified in seconds. Can be <code>31536000 (1 year)</code> | <code>94608000 (3 years)</code>.</p>
 */
  public let duration: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if upfrontPrice != nil { body["upfrontPrice"] = upfrontPrice! }
    if state != nil { body["state"] = state! }
    if offeringId != nil { body["offeringId"] = offeringId! }
    if count != nil { body["count"] = count! }
    if paymentOption != nil { body["paymentOption"] = paymentOption! }
    if hostReservationId != nil { body["hostReservationId"] = hostReservationId! }
    if hourlyPrice != nil { body["hourlyPrice"] = hourlyPrice! }
    if instanceFamily != nil { body["instanceFamily"] = instanceFamily! }
    if start != nil { body["start"] = start! }
    if end != nil { body["end"] = end! }
    if hostIdSet != nil { body["hostIdSet"] = hostIdSet! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if duration != nil { body["duration"] = duration! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> HostReservation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return HostReservation(
        upfrontPrice: jsonDict["upfrontPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Reservationstate.deserialize(response: response, body: .json($0)) },
      offeringId: jsonDict["offeringId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      count: jsonDict["count"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      paymentOption: jsonDict["paymentOption"].flatMap { ($0 is NSNull) ? nil : Paymentoption.deserialize(response: response, body: .json($0)) },
      hostReservationId: jsonDict["hostReservationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      hourlyPrice: jsonDict["hourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceFamily: jsonDict["instanceFamily"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      start: jsonDict["start"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      end: jsonDict["end"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      hostIdSet: jsonDict["hostIdSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      duration: jsonDict["duration"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - upfrontPrice: <p>The upfront price of the reservation.</p>
      - state: <p>The state of the reservation.</p>
      - offeringId: <p>The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.</p>
      - count: <p>The number of Dedicated Hosts the reservation is associated with.</p>
      - paymentOption: <p>The payment option selected for this reservation.</p>
      - hostReservationId: <p>The ID of the reservation that specifies the associated Dedicated Hosts.</p>
      - hourlyPrice: <p>The hourly price of the reservation.</p>
      - instanceFamily: <p>The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.</p>
      - start: <p>The date and time that the reservation started.</p>
      - end: <p>The date and time that the reservation ends.</p>
      - hostIdSet: <p>The IDs of the Dedicated Hosts associated with the reservation.</p>
      - currencyCode: <p>The currency in which the <code>upfrontPrice</code> and <code>hourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
      - duration: <p>The length of the reservation's term, specified in seconds. Can be <code>31536000 (1 year)</code> | <code>94608000 (3 years)</code>.</p>
 */
  public init(upfrontPrice: String?, state: Reservationstate?, offeringId: String?, count: Int?, paymentOption: Paymentoption?, hostReservationId: String?, hourlyPrice: String?, instanceFamily: String?, start: Date?, end: Date?, hostIdSet: [String]?, currencyCode: Currencycodevalues?, duration: Int?) {
self.upfrontPrice = upfrontPrice
self.state = state
self.offeringId = offeringId
self.count = count
self.paymentOption = paymentOption
self.hostReservationId = hostReservationId
self.hourlyPrice = hourlyPrice
self.instanceFamily = instanceFamily
self.start = start
self.end = end
self.hostIdSet = hostIdSet
self.currencyCode = currencyCode
self.duration = duration
  }
}

/**
<p>Contains the output of CreateReservedInstancesListing.</p>
 */
public struct CreateReservedInstancesListingResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the Standard Reserved Instance listing.</p>
 */
  public let reservedInstancesListings: [ReservedInstancesListing]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesListings != nil { body["reservedInstancesListingsSet"] = reservedInstancesListings! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateReservedInstancesListingResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateReservedInstancesListingResult(
        reservedInstancesListings: jsonDict["reservedInstancesListingsSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesListing].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesListings: <p>Information about the Standard Reserved Instance listing.</p>
 */
  public init(reservedInstancesListings: [ReservedInstancesListing]?) {
self.reservedInstancesListings = reservedInstancesListings
  }
}

/**
<p>Contains the parameters for DescribeHosts.</p>
 */
public struct DescribeHostsRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>instance-type</code> - The instance type size that the Dedicated Host is configured to support.</p> </li> <li> <p> <code>auto-placement</code> - Whether auto-placement is enabled or disabled (<code>on</code> | <code>off</code>).</p> </li> <li> <p> <code>host-reservation-id</code> - The ID of the reservation assigned to this host.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance</p> </li> <li> <p> <code>state</code>- The allocation state of the Dedicated Host (<code>available</code> | <code>under-assessment</code> | <code>permanent-failure</code> | <code>released</code> | <code>released-permanent-failure</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the host.</p> </li> </ul>
 */
  public let filter: [Filter]?
/**
<p>The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.</p>
 */
  public let hostIds: [String]?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500; if <code>maxResults</code> is given a larger value than 500, you will receive an error. You cannot specify this parameter and the host IDs parameter in the same request.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filter != nil { body["filter"] = filter! }
    if hostIds != nil { body["hostId"] = hostIds! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filter: <p>One or more filters.</p> <ul> <li> <p> <code>instance-type</code> - The instance type size that the Dedicated Host is configured to support.</p> </li> <li> <p> <code>auto-placement</code> - Whether auto-placement is enabled or disabled (<code>on</code> | <code>off</code>).</p> </li> <li> <p> <code>host-reservation-id</code> - The ID of the reservation assigned to this host.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance</p> </li> <li> <p> <code>state</code>- The allocation state of the Dedicated Host (<code>available</code> | <code>under-assessment</code> | <code>permanent-failure</code> | <code>released</code> | <code>released-permanent-failure</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the host.</p> </li> </ul>
      - hostIds: <p>The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.</p>
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500; if <code>maxResults</code> is given a larger value than 500, you will receive an error. You cannot specify this parameter and the host IDs parameter in the same request.</p>
 */
  public init(filter: [Filter]?, hostIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filter = filter
self.hostIds = hostIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}


/**
<p>Contains the parameters for AllocateAddress.</p>
 */
public struct AllocateAddressRequest: RestJsonSerializable {
/**
<p>Set to <code>vpc</code> to allocate the address for use with instances in a VPC.</p> <p>Default: The address is for use with instances in EC2-Classic.</p>
 */
  public let domain: Domaintype?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if domain != nil { body["Domain"] = domain! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - domain: <p>Set to <code>vpc</code> to allocate the address for use with instances in a VPC.</p> <p>Default: The address is for use with instances in EC2-Classic.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(domain: Domaintype?, dryRun: Bool?) {
self.domain = domain
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeBundleTasks.</p>
 */
public struct DescribeBundleTasksRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li> <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li> <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li> <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li> <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li> <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>One or more bundle task IDs.</p> <p>Default: Describes all your bundle tasks.</p>
 */
  public let bundleIds: [String]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if bundleIds != nil { body["BundleId"] = bundleIds! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li> <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li> <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li> <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li> <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li> <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li> </ul>
      - bundleIds: <p>One or more bundle task IDs.</p> <p>Default: Describes all your bundle tasks.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(filters: [Filter]?, bundleIds: [String]?, dryRun: Bool?) {
self.filters = filters
self.bundleIds = bundleIds
self.dryRun = dryRun
  }
}


/**
<p>Contains the output of RunScheduledInstances.</p>
 */
public struct RunScheduledInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IDs of the newly launched instances.</p>
 */
  public let instanceIdSet: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceIdSet != nil { body["instanceIdSet"] = instanceIdSet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RunScheduledInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RunScheduledInstancesResult(
        instanceIdSet: jsonDict["instanceIdSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceIdSet: <p>The IDs of the newly launched instances.</p>
 */
  public init(instanceIdSet: [String]?) {
self.instanceIdSet = instanceIdSet
  }
}


/**
<p>Contains the output of DescribeVpcEndpointServices.</p>
 */
public struct DescribeVpcEndpointServicesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A list of supported AWS services.</p>
 */
  public let serviceNames: [String]?
/**
<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if serviceNames != nil { body["serviceNameSet"] = serviceNames! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcEndpointServicesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcEndpointServicesResult(
        serviceNames: jsonDict["serviceNameSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - serviceNames: <p>A list of supported AWS services.</p>
      - nextToken: <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
 */
  public init(serviceNames: [String]?, nextToken: String?) {
self.serviceNames = serviceNames
self.nextToken = nextToken
  }
}

enum Activitystatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `error` = "error"
  case `pending_fulfillment` = "pending_fulfillment"
  case `pending_termination` = "pending_termination"
  case `fulfilled` = "fulfilled"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Activitystatus {
    guard case let .json(json) = body else { fatalError() }
    return Activitystatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for AssociateAddress.</p>
 */
public struct AssociateAddressRequest: RestJsonSerializable {
/**
<p>[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.</p>
 */
  public let allowReassociation: Bool?
/**
<p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
 */
  public let instanceId: String?
/**
<p>[EC2-VPC] The allocation ID. This is required for EC2-VPC.</p>
 */
  public let allocationId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The Elastic IP address. This is required for EC2-Classic.</p>
 */
  public let publicIp: String?
/**
<p>[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.</p>
 */
  public let privateIpAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if allowReassociation != nil { body["allowReassociation"] = allowReassociation! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if instanceId != nil { body["InstanceId"] = instanceId! }
    if allocationId != nil { body["AllocationId"] = allocationId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if publicIp != nil { body["PublicIp"] = publicIp! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - allowReassociation: <p>[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.</p>
      - networkInterfaceId: <p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p>
      - instanceId: <p>The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
      - allocationId: <p>[EC2-VPC] The allocation ID. This is required for EC2-VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - publicIp: <p>The Elastic IP address. This is required for EC2-Classic.</p>
      - privateIpAddress: <p>[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.</p>
 */
  public init(allowReassociation: Bool?, networkInterfaceId: String?, instanceId: String?, allocationId: String?, dryRun: Bool?, publicIp: String?, privateIpAddress: String?) {
self.allowReassociation = allowReassociation
self.networkInterfaceId = networkInterfaceId
self.instanceId = instanceId
self.allocationId = allocationId
self.dryRun = dryRun
self.publicIp = publicIp
self.privateIpAddress = privateIpAddress
  }
}

/**
<p>Describes the user data for an instance.</p>
 */
public struct UserData: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let data: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if data != nil { body["data"] = data! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UserData {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UserData(
        data: jsonDict["data"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - data: <p>The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public init(data: String?) {
self.data = data
  }
}

enum Hypervisortype: String, RestJsonDeserializable, RestJsonSerializable {
  case `ovm` = "ovm"
  case `xen` = "xen"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Hypervisortype {
    guard case let .json(json) = body else { fatalError() }
    return Hypervisortype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Affinity: String, RestJsonDeserializable, RestJsonSerializable {
  case `default` = "default"
  case `host` = "host"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Affinity {
    guard case let .json(json) = body else { fatalError() }
    return Affinity(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for AuthorizeSecurityGroupEgress.</p>
 */
public struct AuthorizeSecurityGroupEgressRequest: RestJsonSerializable {
/**
<p>The IP protocol name or number. We recommend that you specify the protocol in a set of IP permissions instead.</p>
 */
  public let ipProtocol: String?
/**
<p>A set of IP permissions. You can't specify a destination security group and a CIDR IP address range.</p>
 */
  public let ipPermissions: [IpPermission]?
/**
<p>The CIDR IP address range. We recommend that you specify the CIDR range in a set of IP permissions instead.</p>
 */
  public let cidrIp: String?
/**
<p>The name of a destination security group. To authorize outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupName: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The start of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
 */
  public let fromPort: Int?
/**
<p>The end of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
 */
  public let toPort: Int?
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String
/**
<p>The AWS account number for a destination security group. To authorize outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupOwnerId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ipProtocol != nil { body["ipProtocol"] = ipProtocol! }
    if ipPermissions != nil { body["ipPermissions"] = ipPermissions! }
    if cidrIp != nil { body["cidrIp"] = cidrIp! }
    if sourceSecurityGroupName != nil { body["sourceSecurityGroupName"] = sourceSecurityGroupName! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if fromPort != nil { body["fromPort"] = fromPort! }
    if toPort != nil { body["toPort"] = toPort! }
    body["groupId"] = groupId
    if sourceSecurityGroupOwnerId != nil { body["sourceSecurityGroupOwnerId"] = sourceSecurityGroupOwnerId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - ipProtocol: <p>The IP protocol name or number. We recommend that you specify the protocol in a set of IP permissions instead.</p>
      - ipPermissions: <p>A set of IP permissions. You can't specify a destination security group and a CIDR IP address range.</p>
      - cidrIp: <p>The CIDR IP address range. We recommend that you specify the CIDR range in a set of IP permissions instead.</p>
      - sourceSecurityGroupName: <p>The name of a destination security group. To authorize outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - fromPort: <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
      - toPort: <p>The end of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
      - groupId: <p>The ID of the security group.</p>
      - sourceSecurityGroupOwnerId: <p>The AWS account number for a destination security group. To authorize outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
 */
  public init(ipProtocol: String?, ipPermissions: [IpPermission]?, cidrIp: String?, sourceSecurityGroupName: String?, dryRun: Bool?, fromPort: Int?, toPort: Int?, groupId: String, sourceSecurityGroupOwnerId: String?) {
self.ipProtocol = ipProtocol
self.ipPermissions = ipPermissions
self.cidrIp = cidrIp
self.sourceSecurityGroupName = sourceSecurityGroupName
self.dryRun = dryRun
self.fromPort = fromPort
self.toPort = toPort
self.groupId = groupId
self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
  }
}


/**
<p>Describes a flow log.</p>
 */
public struct FlowLog: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the error that occurred. <code>Rate limited</code> indicates that CloudWatch logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of CloudWatch Logs log groups that you can create. <code>Access error</code> indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. <code>Unknown error</code> indicates an internal error.</p>
 */
  public let deliverLogsErrorMessage: String?
/**
<p>The status of the flow log (<code>ACTIVE</code>).</p>
 */
  public let flowLogStatus: String?
/**
<p>The flow log ID.</p>
 */
  public let flowLogId: String?
/**
<p>The date and time the flow log was created.</p>
 */
  public let creationTime: Date?
/**
<p>The type of traffic captured for the flow log.</p>
 */
  public let trafficType: Traffictype?
/**
<p>The ARN of the IAM role that posts logs to CloudWatch Logs.</p>
 */
  public let deliverLogsPermissionArn: String?
/**
<p>The ID of the resource on which the flow log was created.</p>
 */
  public let resourceId: String?
/**
<p>The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p>
 */
  public let deliverLogsStatus: String?
/**
<p>The name of the flow log group.</p>
 */
  public let logGroupName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deliverLogsErrorMessage != nil { body["deliverLogsErrorMessage"] = deliverLogsErrorMessage! }
    if flowLogStatus != nil { body["flowLogStatus"] = flowLogStatus! }
    if flowLogId != nil { body["flowLogId"] = flowLogId! }
    if creationTime != nil { body["creationTime"] = creationTime! }
    if trafficType != nil { body["trafficType"] = trafficType! }
    if deliverLogsPermissionArn != nil { body["deliverLogsPermissionArn"] = deliverLogsPermissionArn! }
    if resourceId != nil { body["resourceId"] = resourceId! }
    if deliverLogsStatus != nil { body["deliverLogsStatus"] = deliverLogsStatus! }
    if logGroupName != nil { body["logGroupName"] = logGroupName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> FlowLog {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return FlowLog(
        deliverLogsErrorMessage: jsonDict["deliverLogsErrorMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      flowLogStatus: jsonDict["flowLogStatus"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      flowLogId: jsonDict["flowLogId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      creationTime: jsonDict["creationTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      trafficType: jsonDict["trafficType"].flatMap { ($0 is NSNull) ? nil : Traffictype.deserialize(response: response, body: .json($0)) },
      deliverLogsPermissionArn: jsonDict["deliverLogsPermissionArn"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      resourceId: jsonDict["resourceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deliverLogsStatus: jsonDict["deliverLogsStatus"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      logGroupName: jsonDict["logGroupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deliverLogsErrorMessage: <p>Information about the error that occurred. <code>Rate limited</code> indicates that CloudWatch logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of CloudWatch Logs log groups that you can create. <code>Access error</code> indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. <code>Unknown error</code> indicates an internal error.</p>
      - flowLogStatus: <p>The status of the flow log (<code>ACTIVE</code>).</p>
      - flowLogId: <p>The flow log ID.</p>
      - creationTime: <p>The date and time the flow log was created.</p>
      - trafficType: <p>The type of traffic captured for the flow log.</p>
      - deliverLogsPermissionArn: <p>The ARN of the IAM role that posts logs to CloudWatch Logs.</p>
      - resourceId: <p>The ID of the resource on which the flow log was created.</p>
      - deliverLogsStatus: <p>The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p>
      - logGroupName: <p>The name of the flow log group.</p>
 */
  public init(deliverLogsErrorMessage: String?, flowLogStatus: String?, flowLogId: String?, creationTime: Date?, trafficType: Traffictype?, deliverLogsPermissionArn: String?, resourceId: String?, deliverLogsStatus: String?, logGroupName: String?) {
self.deliverLogsErrorMessage = deliverLogsErrorMessage
self.flowLogStatus = flowLogStatus
self.flowLogId = flowLogId
self.creationTime = creationTime
self.trafficType = trafficType
self.deliverLogsPermissionArn = deliverLogsPermissionArn
self.resourceId = resourceId
self.deliverLogsStatus = deliverLogsStatus
self.logGroupName = logGroupName
  }
}

/**
<p>Contains the output of AttachNetworkInterface.</p>
 */
public struct AttachNetworkInterfaceResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the network interface attachment.</p>
 */
  public let attachmentId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attachmentId != nil { body["attachmentId"] = attachmentId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AttachNetworkInterfaceResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AttachNetworkInterfaceResult(
        attachmentId: jsonDict["attachmentId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - attachmentId: <p>The ID of the network interface attachment.</p>
 */
  public init(attachmentId: String?) {
self.attachmentId = attachmentId
  }
}

/**
<p>Contains the output of CreateVpcEndpoint.</p>
 */
public struct CreateVpcEndpointResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
 */
  public let clientToken: String?
/**
<p>Information about the endpoint.</p>
 */
  public let vpcEndpoint: VpcEndpoint?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["clientToken"] = clientToken! }
    if vpcEndpoint != nil { body["vpcEndpoint"] = vpcEndpoint! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVpcEndpointResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVpcEndpointResult(
        clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcEndpoint: jsonDict["vpcEndpoint"].flatMap { ($0 is NSNull) ? nil : VpcEndpoint.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
      - vpcEndpoint: <p>Information about the endpoint.</p>
 */
  public init(clientToken: String?, vpcEndpoint: VpcEndpoint?) {
self.clientToken = clientToken
self.vpcEndpoint = vpcEndpoint
  }
}

/**
<p>Contains the output of DescribeVpcEndpoints.</p>
 */
public struct DescribeVpcEndpointsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
 */
  public let nextToken: String?
/**
<p>Information about the endpoints.</p>
 */
  public let vpcEndpoints: [VpcEndpoint]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if vpcEndpoints != nil { body["vpcEndpointSet"] = vpcEndpoints! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcEndpointsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcEndpointsResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcEndpoints: jsonDict["vpcEndpointSet"].flatMap { ($0 is NSNull) ? nil : [VpcEndpoint].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
      - vpcEndpoints: <p>Information about the endpoints.</p>
 */
  public init(nextToken: String?, vpcEndpoints: [VpcEndpoint]?) {
self.nextToken = nextToken
self.vpcEndpoints = vpcEndpoints
  }
}


/**
<p>Contains the parameters for CreateKeyPair.</p>
 */
public struct CreateKeyPairRequest: RestJsonSerializable {
/**
<p>A unique name for the key pair.</p> <p>Constraints: Up to 255 ASCII characters</p>
 */
  public let keyName: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["KeyName"] = keyName
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - keyName: <p>A unique name for the key pair.</p> <p>Constraints: Up to 255 ASCII characters</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(keyName: String, dryRun: Bool?) {
self.keyName = keyName
self.dryRun = dryRun
  }
}

/**
<p>Describes a stale security group (a security group that contains stale rules).</p>
 */
public struct StaleSecurityGroup: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the stale inbound rules in the security group.</p>
 */
  public let staleIpPermissions: [StaleIpPermission]?
/**
<p>Information about the stale outbound rules in the security group.</p>
 */
  public let staleIpPermissionsEgress: [StaleIpPermission]?
/**
<p>The name of the security group.</p>
 */
  public let groupName: String?
/**
<p>The ID of the VPC for the security group.</p>
 */
  public let vpcId: String?
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String
/**
<p>The description of the security group.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if staleIpPermissions != nil { body["staleIpPermissions"] = staleIpPermissions! }
    if staleIpPermissionsEgress != nil { body["staleIpPermissionsEgress"] = staleIpPermissionsEgress! }
    if groupName != nil { body["groupName"] = groupName! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    body["groupId"] = groupId
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> StaleSecurityGroup {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return StaleSecurityGroup(
        staleIpPermissions: jsonDict["staleIpPermissions"].flatMap { ($0 is NSNull) ? nil : [StaleIpPermission].deserialize(response: response, body: .json($0)) },
      staleIpPermissionsEgress: jsonDict["staleIpPermissionsEgress"].flatMap { ($0 is NSNull) ? nil : [StaleIpPermission].deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupId: jsonDict["groupId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - staleIpPermissions: <p>Information about the stale inbound rules in the security group.</p>
      - staleIpPermissionsEgress: <p>Information about the stale outbound rules in the security group.</p>
      - groupName: <p>The name of the security group.</p>
      - vpcId: <p>The ID of the VPC for the security group.</p>
      - groupId: <p>The ID of the security group.</p>
      - description: <p>The description of the security group.</p>
 */
  public init(staleIpPermissions: [StaleIpPermission]?, staleIpPermissionsEgress: [StaleIpPermission]?, groupName: String?, vpcId: String?, groupId: String, description: String?) {
self.staleIpPermissions = staleIpPermissions
self.staleIpPermissionsEgress = staleIpPermissionsEgress
self.groupName = groupName
self.vpcId = vpcId
self.groupId = groupId
self.description = description
  }
}

/**
<p>Contains the output of ConfirmProductInstance.</p>
 */
public struct ConfirmProductInstanceResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
 */
  public let ownerId: String?
/**
<p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ownerId != nil { body["ownerId"] = ownerId! }
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ConfirmProductInstanceResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ConfirmProductInstanceResult(
        ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ownerId: <p>The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
      - ec2Return: <p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
 */
  public init(ownerId: String?, ec2Return: Bool?) {
self.ownerId = ownerId
self.ec2Return = ec2Return
  }
}

enum Snapshotstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `completed` = "completed"
  case `error` = "error"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Snapshotstate {
    guard case let .json(json) = body else { fatalError() }
    return Snapshotstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for ImportKeyPair.</p>
 */
public struct ImportKeyPairRequest: RestJsonSerializable {
/**
<p>A unique name for the key pair.</p>
 */
  public let keyName: String
/**
<p>The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.</p>
 */
  public let publicKeyMaterial: Data
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["keyName"] = keyName
    body["publicKeyMaterial"] = publicKeyMaterial
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - keyName: <p>A unique name for the key pair.</p>
      - publicKeyMaterial: <p>The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(keyName: String, publicKeyMaterial: Data, dryRun: Bool?) {
self.keyName = keyName
self.publicKeyMaterial = publicKeyMaterial
self.dryRun = dryRun
  }
}




/**
<p>Describes the monitoring for the instance.</p>
 */
public struct RunInstancesMonitoringEnabled: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether monitoring is enabled for the instance.</p>
 */
  public let enabled: Bool

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["enabled"] = enabled
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RunInstancesMonitoringEnabled {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RunInstancesMonitoringEnabled(
        enabled: jsonDict["enabled"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - enabled: <p>Indicates whether monitoring is enabled for the instance.</p>
 */
  public init(enabled: Bool) {
self.enabled = enabled
  }
}

/**
<p>Contains the output of GetPasswordData.</p>
 */
public struct GetPasswordDataResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The time the data was last updated.</p>
 */
  public let timestamp: Date?
/**
<p>The password of the instance.</p>
 */
  public let passwordData: String?
/**
<p>The ID of the Windows instance.</p>
 */
  public let instanceId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if timestamp != nil { body["timestamp"] = timestamp! }
    if passwordData != nil { body["passwordData"] = passwordData! }
    if instanceId != nil { body["instanceId"] = instanceId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> GetPasswordDataResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return GetPasswordDataResult(
        timestamp: jsonDict["timestamp"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      passwordData: jsonDict["passwordData"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - timestamp: <p>The time the data was last updated.</p>
      - passwordData: <p>The password of the instance.</p>
      - instanceId: <p>The ID of the Windows instance.</p>
 */
  public init(timestamp: Date?, passwordData: String?, instanceId: String?) {
self.timestamp = timestamp
self.passwordData = passwordData
self.instanceId = instanceId
  }
}


enum Platformvalues: String, RestJsonDeserializable, RestJsonSerializable {
  case `windows` = "Windows"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Platformvalues {
    guard case let .json(json) = body else { fatalError() }
    return Platformvalues(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes the ID format for a resource.</p>
 */
public struct IdFormat: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.</p>
 */
  public let deadline: Date?
/**
<p>The type of resource.</p>
 */
  public let resource: String?
/**
<p>Indicates whether longer IDs (17-character IDs) are enabled for the resource.</p>
 */
  public let useLongIds: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deadline != nil { body["deadline"] = deadline! }
    if resource != nil { body["resource"] = resource! }
    if useLongIds != nil { body["useLongIds"] = useLongIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> IdFormat {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return IdFormat(
        deadline: jsonDict["deadline"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      resource: jsonDict["resource"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      useLongIds: jsonDict["useLongIds"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deadline: <p>The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.</p>
      - resource: <p>The type of resource.</p>
      - useLongIds: <p>Indicates whether longer IDs (17-character IDs) are enabled for the resource.</p>
 */
  public init(deadline: Date?, resource: String?, useLongIds: Bool?) {
self.deadline = deadline
self.resource = resource
self.useLongIds = useLongIds
  }
}

/**
<p>Contains the parameters for DescribeClassicLinkInstances.</p>
 */
public struct DescribeClassicLinkInstancesRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>One or more instance IDs. Must be instances linked to a VPC through ClassicLink.</p>
 */
  public let instanceIds: [String]?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the instance IDs parameter in the same request.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if instanceIds != nil { body["InstanceId"] = instanceIds! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceIds: <p>One or more instance IDs. Must be instances linked to a VPC through ClassicLink.</p>
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the instance IDs parameter in the same request.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, instanceIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.instanceIds = instanceIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes a block device mapping.</p>
 */
public struct BlockDeviceMapping: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Suppresses the specified device included in the block device mapping of the AMI.</p>
 */
  public let noDevice: String?
/**
<p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>.The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p> <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
 */
  public let virtualName: String?
/**
<p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
 */
  public let deviceName: String?
/**
<p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
 */
  public let ebs: EbsBlockDevice?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if noDevice != nil { body["noDevice"] = noDevice! }
    if virtualName != nil { body["virtualName"] = virtualName! }
    if deviceName != nil { body["deviceName"] = deviceName! }
    if ebs != nil { body["ebs"] = ebs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> BlockDeviceMapping {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return BlockDeviceMapping(
        noDevice: jsonDict["noDevice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      virtualName: jsonDict["virtualName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deviceName: jsonDict["deviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebs: jsonDict["ebs"].flatMap { ($0 is NSNull) ? nil : EbsBlockDevice.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - noDevice: <p>Suppresses the specified device included in the block device mapping of the AMI.</p>
      - virtualName: <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>.The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p> <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
      - deviceName: <p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
      - ebs: <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
 */
  public init(noDevice: String?, virtualName: String?, deviceName: String?, ebs: EbsBlockDevice?) {
self.noDevice = noDevice
self.virtualName = virtualName
self.deviceName = deviceName
self.ebs = ebs
  }
}

/**
<p>Contains the parameters for RunScheduledInstances.</p>
 */
public struct RunScheduledInstancesRequest: RestJsonSerializable {
/**
<p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
 */
  public let launchSpecification: ScheduledInstancesLaunchSpecification
/**
<p>The number of instances.</p> <p>Default: 1</p>
 */
  public let instanceCount: Int?
/**
<p>The Scheduled Instance ID.</p>
 */
  public let scheduledInstanceId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["ClientToken"] = clientToken! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    body["LaunchSpecification"] = launchSpecification
    if instanceCount != nil { body["InstanceCount"] = instanceCount! }
    body["ScheduledInstanceId"] = scheduledInstanceId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - clientToken: <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - launchSpecification: <p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
      - instanceCount: <p>The number of instances.</p> <p>Default: 1</p>
      - scheduledInstanceId: <p>The Scheduled Instance ID.</p>
 */
  public init(clientToken: String?, dryRun: Bool?, launchSpecification: ScheduledInstancesLaunchSpecification, instanceCount: Int?, scheduledInstanceId: String) {
self.clientToken = clientToken
self.dryRun = dryRun
self.launchSpecification = launchSpecification
self.instanceCount = instanceCount
self.scheduledInstanceId = scheduledInstanceId
  }
}

enum Instancestatename: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `running` = "running"
  case `shuttingdown` = "shutting-down"
  case `terminated` = "terminated"
  case `stopping` = "stopping"
  case `stopped` = "stopped"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Instancestatename {
    guard case let .json(json) = body else { fatalError() }
    return Instancestatename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


enum Productcodevalues: String, RestJsonDeserializable, RestJsonSerializable {
  case `devpay` = "devpay"
  case `marketplace` = "marketplace"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Productcodevalues {
    guard case let .json(json) = body else { fatalError() }
    return Productcodevalues(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Spotinstancetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `onetime` = "one-time"
  case `persistent` = "persistent"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Spotinstancetype {
    guard case let .json(json) = body else { fatalError() }
    return Spotinstancetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DescribeSpotFleetRequestHistory.</p>
 */
public struct DescribeSpotFleetRequestHistoryRequest: RestJsonSerializable {
/**
<p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let startTime: Date
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The type of events to describe. By default, all events are described.</p>
 */
  public let eventType: Eventtype?
/**
<p>The token for the next set of results.</p>
 */
  public let nextToken: String?
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String
/**
<p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["startTime"] = startTime
    if dryRun != nil { body["dryRun"] = dryRun! }
    if eventType != nil { body["eventType"] = eventType! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    body["spotFleetRequestId"] = spotFleetRequestId
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - startTime: <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - eventType: <p>The type of events to describe. By default, all events are described.</p>
      - nextToken: <p>The token for the next set of results.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
      - maxResults: <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(startTime: Date, dryRun: Bool?, eventType: Eventtype?, nextToken: String?, spotFleetRequestId: String, maxResults: Int?) {
self.startTime = startTime
self.dryRun = dryRun
self.eventType = eventType
self.nextToken = nextToken
self.spotFleetRequestId = spotFleetRequestId
self.maxResults = maxResults
  }
}


/**
<p>Describes a schedule that is available for your Scheduled Instances.</p>
 */
public struct ScheduledInstanceAvailability: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
 */
  public let platform: String?
/**
<p>The total number of hours for a single instance for the entire term.</p>
 */
  public let totalScheduledInstanceHours: Int?
/**
<p>The minimum term. The only possible value is 365 days.</p>
 */
  public let minTermDurationInDays: Int?
/**
<p>The maximum term. The only possible value is 365 days.</p>
 */
  public let maxTermDurationInDays: Int?
/**
<p>The hourly price for a single instance.</p>
 */
  public let hourlyPrice: String?
/**
<p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
 */
  public let instanceType: String?
/**
<p>The number of hours in the schedule.</p>
 */
  public let slotDurationInHours: Int?
/**
<p>The Availability Zone.</p>
 */
  public let availabilityZone: String?
/**
<p>The number of available instances.</p>
 */
  public let availableInstanceCount: Int?
/**
<p>The time period for the first schedule to start.</p>
 */
  public let firstSlotStartTime: Date?
/**
<p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
 */
  public let networkPlatform: String?
/**
<p>The purchase token. This token expires in two hours.</p>
 */
  public let purchaseToken: String?
/**
<p>The schedule recurrence.</p>
 */
  public let recurrence: ScheduledInstanceRecurrence?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if platform != nil { body["platform"] = platform! }
    if totalScheduledInstanceHours != nil { body["totalScheduledInstanceHours"] = totalScheduledInstanceHours! }
    if minTermDurationInDays != nil { body["minTermDurationInDays"] = minTermDurationInDays! }
    if maxTermDurationInDays != nil { body["maxTermDurationInDays"] = maxTermDurationInDays! }
    if hourlyPrice != nil { body["hourlyPrice"] = hourlyPrice! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if slotDurationInHours != nil { body["slotDurationInHours"] = slotDurationInHours! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if availableInstanceCount != nil { body["availableInstanceCount"] = availableInstanceCount! }
    if firstSlotStartTime != nil { body["firstSlotStartTime"] = firstSlotStartTime! }
    if networkPlatform != nil { body["networkPlatform"] = networkPlatform! }
    if purchaseToken != nil { body["purchaseToken"] = purchaseToken! }
    if recurrence != nil { body["recurrence"] = recurrence! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstanceAvailability {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstanceAvailability(
        platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      totalScheduledInstanceHours: jsonDict["totalScheduledInstanceHours"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      minTermDurationInDays: jsonDict["minTermDurationInDays"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      maxTermDurationInDays: jsonDict["maxTermDurationInDays"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      hourlyPrice: jsonDict["hourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      slotDurationInHours: jsonDict["slotDurationInHours"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      availableInstanceCount: jsonDict["availableInstanceCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      firstSlotStartTime: jsonDict["firstSlotStartTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      networkPlatform: jsonDict["networkPlatform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      purchaseToken: jsonDict["purchaseToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      recurrence: jsonDict["recurrence"].flatMap { ($0 is NSNull) ? nil : ScheduledInstanceRecurrence.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - platform: <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
      - totalScheduledInstanceHours: <p>The total number of hours for a single instance for the entire term.</p>
      - minTermDurationInDays: <p>The minimum term. The only possible value is 365 days.</p>
      - maxTermDurationInDays: <p>The maximum term. The only possible value is 365 days.</p>
      - hourlyPrice: <p>The hourly price for a single instance.</p>
      - instanceType: <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
      - slotDurationInHours: <p>The number of hours in the schedule.</p>
      - availabilityZone: <p>The Availability Zone.</p>
      - availableInstanceCount: <p>The number of available instances.</p>
      - firstSlotStartTime: <p>The time period for the first schedule to start.</p>
      - networkPlatform: <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
      - purchaseToken: <p>The purchase token. This token expires in two hours.</p>
      - recurrence: <p>The schedule recurrence.</p>
 */
  public init(platform: String?, totalScheduledInstanceHours: Int?, minTermDurationInDays: Int?, maxTermDurationInDays: Int?, hourlyPrice: String?, instanceType: String?, slotDurationInHours: Int?, availabilityZone: String?, availableInstanceCount: Int?, firstSlotStartTime: Date?, networkPlatform: String?, purchaseToken: String?, recurrence: ScheduledInstanceRecurrence?) {
self.platform = platform
self.totalScheduledInstanceHours = totalScheduledInstanceHours
self.minTermDurationInDays = minTermDurationInDays
self.maxTermDurationInDays = maxTermDurationInDays
self.hourlyPrice = hourlyPrice
self.instanceType = instanceType
self.slotDurationInHours = slotDurationInHours
self.availabilityZone = availabilityZone
self.availableInstanceCount = availableInstanceCount
self.firstSlotStartTime = firstSlotStartTime
self.networkPlatform = networkPlatform
self.purchaseToken = purchaseToken
self.recurrence = recurrence
  }
}

/**
<p>Describes an EBS volume.</p>
 */
public struct VolumeDetail: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The size of the volume, in GiB.</p>
 */
  public let size: Int

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["size"] = size
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeDetail {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeDetail(
        size: jsonDict["size"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - size: <p>The size of the volume, in GiB.</p>
 */
  public init(size: Int) {
self.size = size
  }
}

/**
<p>Contains the parameters for ReleaseHosts.</p>
 */
public struct ReleaseHostsRequest: RestJsonSerializable {
/**
<p>The IDs of the Dedicated Hosts you want to release.</p>
 */
  public let hostIds: [String]

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["hostId"] = hostIds
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - hostIds: <p>The IDs of the Dedicated Hosts you want to release.</p>
 */
  public init(hostIds: [String]) {
self.hostIds = hostIds
  }
}

enum Cancelspotinstancerequeststate: String, RestJsonDeserializable, RestJsonSerializable {
  case `active` = "active"
  case `open` = "open"
  case `closed` = "closed"
  case `cancelled` = "cancelled"
  case `completed` = "completed"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Cancelspotinstancerequeststate {
    guard case let .json(json) = body else { fatalError() }
    return Cancelspotinstancerequeststate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes the instance status.</p>
 */
public struct InstanceStatusDetails: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The type of instance status.</p>
 */
  public let name: Statusname?
/**
<p>The status.</p>
 */
  public let status: Statustype?
/**
<p>The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.</p>
 */
  public let impairedSince: Date?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if name != nil { body["name"] = name! }
    if status != nil { body["status"] = status! }
    if impairedSince != nil { body["impairedSince"] = impairedSince! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceStatusDetails {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceStatusDetails(
        name: jsonDict["name"].flatMap { ($0 is NSNull) ? nil : Statusname.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Statustype.deserialize(response: response, body: .json($0)) },
      impairedSince: jsonDict["impairedSince"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - name: <p>The type of instance status.</p>
      - status: <p>The status.</p>
      - impairedSince: <p>The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.</p>
 */
  public init(name: Statusname?, status: Statustype?, impairedSince: Date?) {
self.name = name
self.status = status
self.impairedSince = impairedSince
  }
}

/**
<p>Contains the parameters for StartInstances.</p>
 */
public struct StartInstancesRequest: RestJsonSerializable {
/**
<p>Reserved.</p>
 */
  public let additionalInfo: String?
/**
<p>One or more instance IDs.</p>
 */
  public let instanceIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if additionalInfo != nil { body["additionalInfo"] = additionalInfo! }
    body["InstanceId"] = instanceIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - additionalInfo: <p>Reserved.</p>
      - instanceIds: <p>One or more instance IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(additionalInfo: String?, instanceIds: [String], dryRun: Bool?) {
self.additionalInfo = additionalInfo
self.instanceIds = instanceIds
self.dryRun = dryRun
  }
}


/**
<p>Describes the time period for a Scheduled Instance to start its first schedule.</p>
 */
public struct SlotStartTimeRangeRequest: RestJsonSerializable {
/**
<p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>
 */
  public let earliestTime: Date?
/**
<p>The latest date and time, in UTC, for the Scheduled Instance to start.</p>
 */
  public let latestTime: Date?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if earliestTime != nil { body["EarliestTime"] = earliestTime! }
    if latestTime != nil { body["LatestTime"] = latestTime! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - earliestTime: <p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>
      - latestTime: <p>The latest date and time, in UTC, for the Scheduled Instance to start.</p>
 */
  public init(earliestTime: Date?, latestTime: Date?) {
self.earliestTime = earliestTime
self.latestTime = latestTime
  }
}

/**
<p>Contains the output of CreateRoute.</p>
 */
public struct CreateRouteResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateRouteResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateRouteResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}


public struct GetHostReservationPurchasePreviewResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The purchase information of the Dedicated Host Reservation and the Dedicated Hosts associated with it.</p>
 */
  public let purchase: [Purchase]?
/**
<p>The potential total upfront price. This is billed immediately.</p>
 */
  public let totalUpfrontPrice: String?
/**
<p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The potential total hourly price of the reservation per hour.</p>
 */
  public let totalHourlyPrice: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if purchase != nil { body["purchase"] = purchase! }
    if totalUpfrontPrice != nil { body["totalUpfrontPrice"] = totalUpfrontPrice! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if totalHourlyPrice != nil { body["totalHourlyPrice"] = totalHourlyPrice! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> GetHostReservationPurchasePreviewResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return GetHostReservationPurchasePreviewResult(
        purchase: jsonDict["purchase"].flatMap { ($0 is NSNull) ? nil : [Purchase].deserialize(response: response, body: .json($0)) },
      totalUpfrontPrice: jsonDict["totalUpfrontPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      totalHourlyPrice: jsonDict["totalHourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - purchase: <p>The purchase information of the Dedicated Host Reservation and the Dedicated Hosts associated with it.</p>
      - totalUpfrontPrice: <p>The potential total upfront price. This is billed immediately.</p>
      - currencyCode: <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
      - totalHourlyPrice: <p>The potential total hourly price of the reservation per hour.</p>
 */
  public init(purchase: [Purchase]?, totalUpfrontPrice: String?, currencyCode: Currencycodevalues?, totalHourlyPrice: String?) {
self.purchase = purchase
self.totalUpfrontPrice = totalUpfrontPrice
self.currencyCode = currencyCode
self.totalHourlyPrice = totalHourlyPrice
  }
}

enum Networkinterfacetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `interface` = "interface"
  case `natGateway` = "natGateway"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Networkinterfacetype {
    guard case let .json(json) = body else { fatalError() }
    return Networkinterfacetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of DescribeReservedInstancesListings.</p>
 */
public struct DescribeReservedInstancesListingsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the Reserved Instance listing.</p>
 */
  public let reservedInstancesListings: [ReservedInstancesListing]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesListings != nil { body["reservedInstancesListingsSet"] = reservedInstancesListings! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeReservedInstancesListingsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeReservedInstancesListingsResult(
        reservedInstancesListings: jsonDict["reservedInstancesListingsSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesListing].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesListings: <p>Information about the Reserved Instance listing.</p>
 */
  public init(reservedInstancesListings: [ReservedInstancesListing]?) {
self.reservedInstancesListings = reservedInstancesListings
  }
}

/**
<p>Describes a network interface attachment.</p>
 */
public struct NetworkInterfaceAttachment: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The device index of the network interface attachment on the instance.</p>
 */
  public let deviceIndex: Int?
/**
<p>The attachment state.</p>
 */
  public let status: Attachmentstatus?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The timestamp indicating when the attachment initiated.</p>
 */
  public let attachTime: Date?
/**
<p>Indicates whether the network interface is deleted when the instance is terminated.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The ID of the network interface attachment.</p>
 */
  public let attachmentId: String?
/**
<p>The AWS account ID of the owner of the instance.</p>
 */
  public let instanceOwnerId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deviceIndex != nil { body["deviceIndex"] = deviceIndex! }
    if status != nil { body["status"] = status! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if attachTime != nil { body["attachTime"] = attachTime! }
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if attachmentId != nil { body["attachmentId"] = attachmentId! }
    if instanceOwnerId != nil { body["instanceOwnerId"] = instanceOwnerId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkInterfaceAttachment {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkInterfaceAttachment(
        deviceIndex: jsonDict["deviceIndex"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Attachmentstatus.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      attachTime: jsonDict["attachTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      attachmentId: jsonDict["attachmentId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceOwnerId: jsonDict["instanceOwnerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deviceIndex: <p>The device index of the network interface attachment on the instance.</p>
      - status: <p>The attachment state.</p>
      - instanceId: <p>The ID of the instance.</p>
      - attachTime: <p>The timestamp indicating when the attachment initiated.</p>
      - deleteOnTermination: <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
      - attachmentId: <p>The ID of the network interface attachment.</p>
      - instanceOwnerId: <p>The AWS account ID of the owner of the instance.</p>
 */
  public init(deviceIndex: Int?, status: Attachmentstatus?, instanceId: String?, attachTime: Date?, deleteOnTermination: Bool?, attachmentId: String?, instanceOwnerId: String?) {
self.deviceIndex = deviceIndex
self.status = status
self.instanceId = instanceId
self.attachTime = attachTime
self.deleteOnTermination = deleteOnTermination
self.attachmentId = attachmentId
self.instanceOwnerId = instanceOwnerId
  }
}

/**
<p>Describes an instance export task.</p>
 */
public struct ExportTask: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the instance to export.</p>
 */
  public let instanceExportDetails: InstanceExportDetails?
/**
<p>The ID of the export task.</p>
 */
  public let exportTaskId: String?
/**
<p>Information about the export task.</p>
 */
  public let exportToS3Task: ExportToS3Task?
/**
<p>The state of the export task.</p>
 */
  public let state: Exporttaskstate?
/**
<p>The status message related to the export task.</p>
 */
  public let statusMessage: String?
/**
<p>A description of the resource being exported.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceExportDetails != nil { body["instanceExport"] = instanceExportDetails! }
    if exportTaskId != nil { body["exportTaskId"] = exportTaskId! }
    if exportToS3Task != nil { body["exportToS3"] = exportToS3Task! }
    if state != nil { body["state"] = state! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ExportTask {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ExportTask(
        instanceExportDetails: jsonDict["instanceExport"].flatMap { ($0 is NSNull) ? nil : InstanceExportDetails.deserialize(response: response, body: .json($0)) },
      exportTaskId: jsonDict["exportTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      exportToS3Task: jsonDict["exportToS3"].flatMap { ($0 is NSNull) ? nil : ExportToS3Task.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Exporttaskstate.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceExportDetails: <p>Information about the instance to export.</p>
      - exportTaskId: <p>The ID of the export task.</p>
      - exportToS3Task: <p>Information about the export task.</p>
      - state: <p>The state of the export task.</p>
      - statusMessage: <p>The status message related to the export task.</p>
      - description: <p>A description of the resource being exported.</p>
 */
  public init(instanceExportDetails: InstanceExportDetails?, exportTaskId: String?, exportToS3Task: ExportToS3Task?, state: Exporttaskstate?, statusMessage: String?, description: String?) {
self.instanceExportDetails = instanceExportDetails
self.exportTaskId = exportTaskId
self.exportToS3Task = exportToS3Task
self.state = state
self.statusMessage = statusMessage
self.description = description
  }
}

/**
<p>Contains the parameters for CreateSpotDatafeedSubscription.</p>
 */
public struct CreateSpotDatafeedSubscriptionRequest: RestJsonSerializable {
/**
<p>The Amazon S3 bucket in which to store the Spot instance data feed.</p>
 */
  public let bucket: String
/**
<p>A prefix for the data feed file names.</p>
 */
  public let prefix: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["bucket"] = bucket
    if prefix != nil { body["prefix"] = prefix! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - bucket: <p>The Amazon S3 bucket in which to store the Spot instance data feed.</p>
      - prefix: <p>A prefix for the data feed file names.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(bucket: String, prefix: String?, dryRun: Bool?) {
self.bucket = bucket
self.prefix = prefix
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeScheduledInstances.</p>
 */
public struct DescribeScheduledInstancesRequest: RestJsonSerializable {
/**
<p>One or more Scheduled Instance IDs.</p>
 */
  public let scheduledInstanceIds: [String]?
/**
<p>The time period for the first schedule to start.</p>
 */
  public let slotStartTimeRange: SlotStartTimeRangeRequest?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The token for the next set of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if scheduledInstanceIds != nil { body["ScheduledInstanceId"] = scheduledInstanceIds! }
    if slotStartTimeRange != nil { body["SlotStartTimeRange"] = slotStartTimeRange! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - scheduledInstanceIds: <p>One or more Scheduled Instance IDs.</p>
      - slotStartTimeRange: <p>The time period for the first schedule to start.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The token for the next set of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(scheduledInstanceIds: [String]?, slotStartTimeRange: SlotStartTimeRangeRequest?, filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.scheduledInstanceIds = scheduledInstanceIds
self.slotStartTimeRange = slotStartTimeRange
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for DeleteSubnet.</p>
 */
public struct DeleteSubnetRequest: RestJsonSerializable {
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["SubnetId"] = subnetId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - subnetId: <p>The ID of the subnet.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(subnetId: String, dryRun: Bool?) {
self.subnetId = subnetId
self.dryRun = dryRun
  }
}

/**
<p>Describes information used to set up an EBS volume specified in a block device mapping.</p>
 */
public struct EbsInstanceBlockDeviceSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether the volume is deleted on instance termination.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The ID of the EBS volume.</p>
 */
  public let volumeId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if volumeId != nil { body["volumeId"] = volumeId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> EbsInstanceBlockDeviceSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return EbsInstanceBlockDeviceSpecification(
        deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      volumeId: jsonDict["volumeId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deleteOnTermination: <p>Indicates whether the volume is deleted on instance termination.</p>
      - volumeId: <p>The ID of the EBS volume.</p>
 */
  public init(deleteOnTermination: Bool?, volumeId: String?) {
self.deleteOnTermination = deleteOnTermination
self.volumeId = volumeId
  }
}

/**
<p>Contains the output of DescribePrefixLists.</p>
 */
public struct DescribePrefixListsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
 */
  public let nextToken: String?
/**
<p>All available prefix lists.</p>
 */
  public let prefixLists: [PrefixList]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if prefixLists != nil { body["prefixListSet"] = prefixLists! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribePrefixListsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribePrefixListsResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      prefixLists: jsonDict["prefixListSet"].flatMap { ($0 is NSNull) ? nil : [PrefixList].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
      - prefixLists: <p>All available prefix lists.</p>
 */
  public init(nextToken: String?, prefixLists: [PrefixList]?) {
self.nextToken = nextToken
self.prefixLists = prefixLists
  }
}

/**
<p>Contains the parameters for ReplaceRouteTableAssociation.</p>
 */
public struct ReplaceRouteTableAssociationRequest: RestJsonSerializable {
/**
<p>The association ID.</p>
 */
  public let associationId: String
/**
<p>The ID of the new route table to associate with the subnet.</p>
 */
  public let routeTableId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["associationId"] = associationId
    body["routeTableId"] = routeTableId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - associationId: <p>The association ID.</p>
      - routeTableId: <p>The ID of the new route table to associate with the subnet.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(associationId: String, routeTableId: String, dryRun: Bool?) {
self.associationId = associationId
self.routeTableId = routeTableId
self.dryRun = dryRun
  }
}


enum Imageattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `description` = "description"
  case `kernel` = "kernel"
  case `ramdisk` = "ramdisk"
  case `launchPermission` = "launchPermission"
  case `productCodes` = "productCodes"
  case `blockDeviceMapping` = "blockDeviceMapping"
  case `sriovNetSupport` = "sriovNetSupport"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Imageattributename {
    guard case let .json(json) = body else { fatalError() }
    return Imageattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Placementgroupstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `available` = "available"
  case `deleting` = "deleting"
  case `deleted` = "deleted"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Placementgroupstate {
    guard case let .json(json) = body else { fatalError() }
    return Placementgroupstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}



/**
<p>Describes the status of an instance.</p>
 */
public struct InstanceStatusSummary: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The system instance health or application instance health.</p>
 */
  public let details: [InstanceStatusDetails]?
/**
<p>The status.</p>
 */
  public let status: Summarystatus?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if details != nil { body["details"] = details! }
    if status != nil { body["status"] = status! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceStatusSummary {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceStatusSummary(
        details: jsonDict["details"].flatMap { ($0 is NSNull) ? nil : [InstanceStatusDetails].deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Summarystatus.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - details: <p>The system instance health or application instance health.</p>
      - status: <p>The status.</p>
 */
  public init(details: [InstanceStatusDetails]?, status: Summarystatus?) {
self.details = details
self.status = status
  }
}

/**
<p>Information about the error that occurred. For more information about errors, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.</p>
 */
public struct UnsuccessfulItemError: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The error code.</p>
 */
  public let code: String
/**
<p>The error message accompanying the error code.</p>
 */
  public let message: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["code"] = code
    body["message"] = message
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UnsuccessfulItemError {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UnsuccessfulItemError(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - code: <p>The error code.</p>
      - message: <p>The error message accompanying the error code.</p>
 */
  public init(code: String, message: String) {
self.code = code
self.message = message
  }
}


/**
<p>Contains the output of RestoreAddressToClassic.</p>
 */
public struct RestoreAddressToClassicResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The move status for the IP address.</p>
 */
  public let status: Status?
/**
<p>The Elastic IP address.</p>
 */
  public let publicIp: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if status != nil { body["status"] = status! }
    if publicIp != nil { body["publicIp"] = publicIp! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RestoreAddressToClassicResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RestoreAddressToClassicResult(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Status.deserialize(response: response, body: .json($0)) },
      publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>The move status for the IP address.</p>
      - publicIp: <p>The Elastic IP address.</p>
 */
  public init(status: Status?, publicIp: String?) {
self.status = status
self.publicIp = publicIp
  }
}

/**
<p>Contains the output of CopyImage.</p>
 */
public struct CopyImageResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the new AMI.</p>
 */
  public let imageId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if imageId != nil { body["imageId"] = imageId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CopyImageResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CopyImageResult(
        imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - imageId: <p>The ID of the new AMI.</p>
 */
  public init(imageId: String?) {
self.imageId = imageId
  }
}

public struct DescribeSecurityGroupReferencesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPCs with the referencing security groups.</p>
 */
  public let securityGroupReferenceSet: [SecurityGroupReference]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if securityGroupReferenceSet != nil { body["securityGroupReferenceSet"] = securityGroupReferenceSet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSecurityGroupReferencesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSecurityGroupReferencesResult(
        securityGroupReferenceSet: jsonDict["securityGroupReferenceSet"].flatMap { ($0 is NSNull) ? nil : [SecurityGroupReference].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - securityGroupReferenceSet: <p>Information about the VPCs with the referencing security groups.</p>
 */
  public init(securityGroupReferenceSet: [SecurityGroupReference]?) {
self.securityGroupReferenceSet = securityGroupReferenceSet
  }
}


/**
<p>Describes a launch permission.</p>
 */
public struct LaunchPermission: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The AWS account ID.</p>
 */
  public let userId: String?
/**
<p>The name of the group.</p>
 */
  public let group: Permissiongroup?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if userId != nil { body["userId"] = userId! }
    if group != nil { body["group"] = group! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> LaunchPermission {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return LaunchPermission(
        userId: jsonDict["userId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      group: jsonDict["group"].flatMap { ($0 is NSNull) ? nil : Permissiongroup.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - userId: <p>The AWS account ID.</p>
      - group: <p>The name of the group.</p>
 */
  public init(userId: String?, group: Permissiongroup?) {
self.userId = userId
self.group = group
  }
}

enum Containerformat: String, RestJsonDeserializable, RestJsonSerializable {
  case `ova` = "ova"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Containerformat {
    guard case let .json(json) = body else { fatalError() }
    return Containerformat(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output for ImportImage.</p>
 */
public struct ImportImageResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The license type of the virtual machine.</p>
 */
  public let licenseType: String?
/**
<p>A brief status of the task.</p>
 */
  public let status: String?
/**
<p>The operating system of the virtual machine.</p>
 */
  public let platform: String?
/**
<p>The progress of the task.</p>
 */
  public let progress: String?
/**
<p>The target hypervisor of the import task.</p>
 */
  public let hypervisor: String?
/**
<p>The architecture of the virtual machine.</p>
 */
  public let architecture: String?
/**
<p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
 */
  public let imageId: String?
/**
<p>The task ID of the import image task.</p>
 */
  public let importTaskId: String?
/**
<p>A detailed status message of the import task.</p>
 */
  public let statusMessage: String?
/**
<p>Information about the snapshots.</p>
 */
  public let snapshotDetails: [SnapshotDetail]?
/**
<p>A description of the import task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if licenseType != nil { body["licenseType"] = licenseType! }
    if status != nil { body["status"] = status! }
    if platform != nil { body["platform"] = platform! }
    if progress != nil { body["progress"] = progress! }
    if hypervisor != nil { body["hypervisor"] = hypervisor! }
    if architecture != nil { body["architecture"] = architecture! }
    if imageId != nil { body["imageId"] = imageId! }
    if importTaskId != nil { body["importTaskId"] = importTaskId! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if snapshotDetails != nil { body["snapshotDetailSet"] = snapshotDetails! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportImageResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportImageResult(
        licenseType: jsonDict["licenseType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      progress: jsonDict["progress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      hypervisor: jsonDict["hypervisor"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      architecture: jsonDict["architecture"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      importTaskId: jsonDict["importTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotDetails: jsonDict["snapshotDetailSet"].flatMap { ($0 is NSNull) ? nil : [SnapshotDetail].deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - licenseType: <p>The license type of the virtual machine.</p>
      - status: <p>A brief status of the task.</p>
      - platform: <p>The operating system of the virtual machine.</p>
      - progress: <p>The progress of the task.</p>
      - hypervisor: <p>The target hypervisor of the import task.</p>
      - architecture: <p>The architecture of the virtual machine.</p>
      - imageId: <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
      - importTaskId: <p>The task ID of the import image task.</p>
      - statusMessage: <p>A detailed status message of the import task.</p>
      - snapshotDetails: <p>Information about the snapshots.</p>
      - description: <p>A description of the import task.</p>
 */
  public init(licenseType: String?, status: String?, platform: String?, progress: String?, hypervisor: String?, architecture: String?, imageId: String?, importTaskId: String?, statusMessage: String?, snapshotDetails: [SnapshotDetail]?, description: String?) {
self.licenseType = licenseType
self.status = status
self.platform = platform
self.progress = progress
self.hypervisor = hypervisor
self.architecture = architecture
self.imageId = imageId
self.importTaskId = importTaskId
self.statusMessage = statusMessage
self.snapshotDetails = snapshotDetails
self.description = description
  }
}


/**
<p>Describes prefixes for AWS services.</p>
 */
public struct PrefixList: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IP address range of the AWS service.</p>
 */
  public let cidrs: [String]?
/**
<p>The name of the prefix.</p>
 */
  public let prefixListName: String?
/**
<p>The ID of the prefix.</p>
 */
  public let prefixListId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if cidrs != nil { body["cidrSet"] = cidrs! }
    if prefixListName != nil { body["prefixListName"] = prefixListName! }
    if prefixListId != nil { body["prefixListId"] = prefixListId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PrefixList {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PrefixList(
        cidrs: jsonDict["cidrSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      prefixListName: jsonDict["prefixListName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      prefixListId: jsonDict["prefixListId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - cidrs: <p>The IP address range of the AWS service.</p>
      - prefixListName: <p>The name of the prefix.</p>
      - prefixListId: <p>The ID of the prefix.</p>
 */
  public init(cidrs: [String]?, prefixListName: String?, prefixListId: String?) {
self.cidrs = cidrs
self.prefixListName = prefixListName
self.prefixListId = prefixListId
  }
}

/**
<p>Describes a disk image.</p>
 */
public struct DiskImageDetail: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The disk image format.</p>
 */
  public let format: Diskimageformat
/**
<p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
 */
  public let importManifestUrl: String
/**
<p>The size of the disk image, in GiB.</p>
 */
  public let bytes: Int

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["format"] = format
    body["importManifestUrl"] = importManifestUrl
    body["bytes"] = bytes
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DiskImageDetail {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DiskImageDetail(
        format: jsonDict["format"].flatMap { ($0 is NSNull) ? nil : Diskimageformat.deserialize(response: response, body: .json($0)) }!,
      importManifestUrl: jsonDict["importManifestUrl"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      bytes: jsonDict["bytes"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - format: <p>The disk image format.</p>
      - importManifestUrl: <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
      - bytes: <p>The size of the disk image, in GiB.</p>
 */
  public init(format: Diskimageformat, importManifestUrl: String, bytes: Int) {
self.format = format
self.importManifestUrl = importManifestUrl
self.bytes = bytes
  }
}

/**
<p>Contains the output of DescribeVpcPeeringConnections.</p>
 */
public struct DescribeVpcPeeringConnectionsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPC peering connections.</p>
 */
  public let vpcPeeringConnections: [VpcPeeringConnection]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcPeeringConnections != nil { body["vpcPeeringConnectionSet"] = vpcPeeringConnections! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcPeeringConnectionsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcPeeringConnectionsResult(
        vpcPeeringConnections: jsonDict["vpcPeeringConnectionSet"].flatMap { ($0 is NSNull) ? nil : [VpcPeeringConnection].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcPeeringConnections: <p>Information about the VPC peering connections.</p>
 */
  public init(vpcPeeringConnections: [VpcPeeringConnection]?) {
self.vpcPeeringConnections = vpcPeeringConnections
  }
}

/**
<p>Contains the parameters of ModifyIdFormat.</p>
 */
public struct ModifyIdFormatRequest: RestJsonSerializable {
/**
<p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
 */
  public let resource: String
/**
<p>Indicate whether the resource should use longer IDs (17-character IDs).</p>
 */
  public let useLongIds: Bool

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["Resource"] = resource
    body["UseLongIds"] = useLongIds
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - resource: <p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
      - useLongIds: <p>Indicate whether the resource should use longer IDs (17-character IDs).</p>
 */
  public init(resource: String, useLongIds: Bool) {
self.resource = resource
self.useLongIds = useLongIds
  }
}

/**
<p>Describes a bundle task.</p>
 */
public struct BundleTask: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The time this task started.</p>
 */
  public let startTime: Date?
/**
<p>If the task fails, a description of the error.</p>
 */
  public let bundleTaskError: BundleTaskError?
/**
<p>The level of task completion, as a percent (for example, 20%).</p>
 */
  public let progress: String?
/**
<p>The ID of the instance associated with this bundle task.</p>
 */
  public let instanceId: String?
/**
<p>The state of the task.</p>
 */
  public let state: Bundletaskstate?
/**
<p>The time of the most recent update for the task.</p>
 */
  public let updateTime: Date?
/**
<p>The Amazon S3 storage locations.</p>
 */
  public let storage: Storage?
/**
<p>The ID of the bundle task.</p>
 */
  public let bundleId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if startTime != nil { body["startTime"] = startTime! }
    if bundleTaskError != nil { body["error"] = bundleTaskError! }
    if progress != nil { body["progress"] = progress! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if state != nil { body["state"] = state! }
    if updateTime != nil { body["updateTime"] = updateTime! }
    if storage != nil { body["storage"] = storage! }
    if bundleId != nil { body["bundleId"] = bundleId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> BundleTask {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return BundleTask(
        startTime: jsonDict["startTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      bundleTaskError: jsonDict["error"].flatMap { ($0 is NSNull) ? nil : BundleTaskError.deserialize(response: response, body: .json($0)) },
      progress: jsonDict["progress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Bundletaskstate.deserialize(response: response, body: .json($0)) },
      updateTime: jsonDict["updateTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      storage: jsonDict["storage"].flatMap { ($0 is NSNull) ? nil : Storage.deserialize(response: response, body: .json($0)) },
      bundleId: jsonDict["bundleId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - startTime: <p>The time this task started.</p>
      - bundleTaskError: <p>If the task fails, a description of the error.</p>
      - progress: <p>The level of task completion, as a percent (for example, 20%).</p>
      - instanceId: <p>The ID of the instance associated with this bundle task.</p>
      - state: <p>The state of the task.</p>
      - updateTime: <p>The time of the most recent update for the task.</p>
      - storage: <p>The Amazon S3 storage locations.</p>
      - bundleId: <p>The ID of the bundle task.</p>
 */
  public init(startTime: Date?, bundleTaskError: BundleTaskError?, progress: String?, instanceId: String?, state: Bundletaskstate?, updateTime: Date?, storage: Storage?, bundleId: String?) {
self.startTime = startTime
self.bundleTaskError = bundleTaskError
self.progress = progress
self.instanceId = instanceId
self.state = state
self.updateTime = updateTime
self.storage = storage
self.bundleId = bundleId
  }
}

/**
<p>Contains the parameters for DescribeTags.</p>
 */
public struct DescribeTagsRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>key</code> - The tag key.</p> </li> <li> <p> <code>resource-id</code> - The resource ID.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dhcp-options</code> | <code>image</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p> </li> <li> <p> <code>value</code> - The tag value.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>key</code> - The tag key.</p> </li> <li> <p> <code>resource-id</code> - The resource ID.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dhcp-options</code> | <code>image</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p> </li> <li> <p> <code>value</code> - The tag value.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for DetachNetworkInterface.</p>
 */
public struct DetachNetworkInterfaceRequest: RestJsonSerializable {
/**
<p>Specifies whether to force a detachment.</p>
 */
  public let force: Bool?
/**
<p>The ID of the attachment.</p>
 */
  public let attachmentId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if force != nil { body["force"] = force! }
    body["attachmentId"] = attachmentId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - force: <p>Specifies whether to force a detachment.</p>
      - attachmentId: <p>The ID of the attachment.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(force: Bool?, attachmentId: String, dryRun: Bool?) {
self.force = force
self.attachmentId = attachmentId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeRegions.</p>
 */
public struct DescribeRegionsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more regions.</p>
 */
  public let regions: [Region]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if regions != nil { body["regionInfo"] = regions! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeRegionsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeRegionsResult(
        regions: jsonDict["regionInfo"].flatMap { ($0 is NSNull) ? nil : [Region].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - regions: <p>Information about one or more regions.</p>
 */
  public init(regions: [Region]?) {
self.regions = regions
  }
}


/**
<p>Contains the parameters for GetConsoleOutput.</p>
 */
public struct GetConsoleOutputRequest: RestJsonSerializable {
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceId: <p>The ID of the instance.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceId: String, dryRun: Bool?) {
self.instanceId = instanceId
self.dryRun = dryRun
  }
}



/**
<p>Contains the parameters for CreateVpnConnection.</p>
 */
public struct CreateVpnConnectionRequest: RestJsonSerializable {
/**
<p>Indicates whether the VPN connection requires static routes. If you are creating a VPN connection for a device that does not support BGP, you must specify <code>true</code>.</p> <p>Default: <code>false</code> </p>
 */
  public let options: VpnConnectionOptionsSpecification?
/**
<p>The ID of the customer gateway.</p>
 */
  public let customerGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The type of VPN connection (<code>ipsec.1</code>).</p>
 */
  public let ec2Type: String
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let vpnGatewayId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if options != nil { body["options"] = options! }
    body["CustomerGatewayId"] = customerGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["Type"] = ec2Type
    body["VpnGatewayId"] = vpnGatewayId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - options: <p>Indicates whether the VPN connection requires static routes. If you are creating a VPN connection for a device that does not support BGP, you must specify <code>true</code>.</p> <p>Default: <code>false</code> </p>
      - customerGatewayId: <p>The ID of the customer gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - ec2Type: <p>The type of VPN connection (<code>ipsec.1</code>).</p>
      - vpnGatewayId: <p>The ID of the virtual private gateway.</p>
 */
  public init(options: VpnConnectionOptionsSpecification?, customerGatewayId: String, dryRun: Bool?, ec2Type: String, vpnGatewayId: String) {
self.options = options
self.customerGatewayId = customerGatewayId
self.dryRun = dryRun
self.ec2Type = ec2Type
self.vpnGatewayId = vpnGatewayId
  }
}

/**
<p>Contains the output of DescribeSpotPriceHistory.</p>
 */
public struct DescribeSpotPriceHistoryResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The historical Spot prices.</p>
 */
  public let spotPriceHistory: [SpotPrice]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if spotPriceHistory != nil { body["spotPriceHistorySet"] = spotPriceHistory! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSpotPriceHistoryResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSpotPriceHistoryResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotPriceHistory: jsonDict["spotPriceHistorySet"].flatMap { ($0 is NSNull) ? nil : [SpotPrice].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
      - spotPriceHistory: <p>The historical Spot prices.</p>
 */
  public init(nextToken: String?, spotPriceHistory: [SpotPrice]?) {
self.nextToken = nextToken
self.spotPriceHistory = spotPriceHistory
  }
}

/**
<p>Contains the output of CreateSecurityGroup.</p>
 */
public struct CreateSecurityGroupResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if groupId != nil { body["groupId"] = groupId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateSecurityGroupResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateSecurityGroupResult(
        groupId: jsonDict["groupId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - groupId: <p>The ID of the security group.</p>
 */
  public init(groupId: String?) {
self.groupId = groupId
  }
}



enum Allocationstrategy: String, RestJsonDeserializable, RestJsonSerializable {
  case `lowestPrice` = "lowestPrice"
  case `diversified` = "diversified"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Allocationstrategy {
    guard case let .json(json) = body else { fatalError() }
    return Allocationstrategy(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the output of CreateNatGateway.</p>
 */
public struct CreateNatGatewayResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
 */
  public let clientToken: String?
/**
<p>Information about the NAT gateway.</p>
 */
  public let natGateway: NatGateway?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["clientToken"] = clientToken! }
    if natGateway != nil { body["natGateway"] = natGateway! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateNatGatewayResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateNatGatewayResult(
        clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      natGateway: jsonDict["natGateway"].flatMap { ($0 is NSNull) ? nil : NatGateway.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - clientToken: <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
      - natGateway: <p>Information about the NAT gateway.</p>
 */
  public init(clientToken: String?, natGateway: NatGateway?) {
self.clientToken = clientToken
self.natGateway = natGateway
  }
}

enum Spotinstancestate: String, RestJsonDeserializable, RestJsonSerializable {
  case `open` = "open"
  case `active` = "active"
  case `closed` = "closed"
  case `cancelled` = "cancelled"
  case `failed` = "failed"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Spotinstancestate {
    guard case let .json(json) = body else { fatalError() }
    return Spotinstancestate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Describes Spot instance placement.</p>
 */
public struct SpotPlacement: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Availability Zone.</p> <p>[Spot fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
 */
  public let availabilityZone: String?
/**
<p>The name of the placement group (for cluster instances).</p>
 */
  public let groupName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if groupName != nil { body["groupName"] = groupName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotPlacement {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotPlacement(
        availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - availabilityZone: <p>The Availability Zone.</p> <p>[Spot fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
      - groupName: <p>The name of the placement group (for cluster instances).</p>
 */
  public init(availabilityZone: String?, groupName: String?) {
self.availabilityZone = availabilityZone
self.groupName = groupName
  }
}

/**
<p>Describes an instance.</p>
 */
public struct Instance: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The idempotency token you provided when you launched the instance, if applicable.</p>
 */
  public let clientToken: String?
/**
<p>The root device name (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p>
 */
  public let rootDeviceName: String?
/**
<p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
 */
  public let ebsOptimized: Bool?
/**
<p>The kernel associated with this instance, if applicable.</p>
 */
  public let kernelId: String?
/**
<p>Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the instance to perform NAT. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
  public let sourceDestCheck: Bool?
/**
<p>The private DNS name assigned to the instance. This DNS name can only be used inside the Amazon EC2 network. This name is not available until the instance enters the <code>running</code> state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.</p>
 */
  public let privateDnsName: String?
/**
<p>The instance type.</p>
 */
  public let instanceType: Instancetype?
/**
<p>The private IP address assigned to the instance.</p>
 */
  public let privateIpAddress: String?
/**
<p>The product codes attached to this instance, if applicable.</p>
 */
  public let productCodes: [ProductCode]?
/**
<p>The name of the key pair, if this instance was launched with an associated key pair.</p>
 */
  public let keyName: String?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The IAM instance profile associated with the instance, if applicable.</p>
 */
  public let iamInstanceProfile: IamInstanceProfile?
/**
<p>The public DNS name assigned to the instance. This name is not available until the instance enters the <code>running</code> state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.</p>
 */
  public let publicDnsName: String?
/**
<p>[EC2-VPC] The ID of the VPC in which the instance is running.</p>
 */
  public let vpcId: String?
/**
<p>The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
 */
  public let rootDeviceType: Devicetype?
/**
<p>The RAM disk associated with this instance, if applicable.</p>
 */
  public let ramdiskId: String?
/**
<p>Indicates whether this is a Spot instance or a Scheduled Instance.</p>
 */
  public let instanceLifecycle: Instancelifecycletype?
/**
<p>Any block device mapping entries for the instance.</p>
 */
  public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
/**
<p>[EC2-VPC] The ID of the subnet in which the instance is running.</p>
 */
  public let subnetId: String?
/**
<p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
 */
  public let sriovNetSupport: String?
/**
<p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>
 */
  public let platform: Platformvalues?
/**
<p>If the request is a Spot instance request, the ID of the request.</p>
 */
  public let spotInstanceRequestId: String?
/**
<p>Any tags assigned to the instance.</p>
 */
  public let tags: [Tag]?
/**
<p>The time the instance was launched.</p>
 */
  public let launchTime: Date?
/**
<p>The current state of the instance.</p>
 */
  public let state: InstanceState?
/**
<p>The public IP address assigned to the instance, if applicable.</p>
 */
  public let publicIpAddress: String?
/**
<p>The monitoring information for the instance.</p>
 */
  public let monitoring: Monitoring?
/**
<p>The reason for the most recent state transition. This might be an empty string.</p>
 */
  public let stateTransitionReason: String?
/**
<p>The reason for the most recent state transition.</p>
 */
  public let stateReason: StateReason?
/**
<p>One or more security groups for the instance.</p>
 */
  public let securityGroups: [GroupIdentifier]?
/**
<p>The hypervisor type of the instance.</p>
 */
  public let hypervisor: Hypervisortype?
/**
<p>The architecture of the image.</p>
 */
  public let architecture: Architecturevalues?
/**
<p>The ID of the AMI used to launch the instance.</p>
 */
  public let imageId: String?
/**
<p>Specifies whether enhanced networking with ENA is enabled.</p>
 */
  public let enaSupport: Bool?
/**
<p>[EC2-VPC] One or more network interfaces for the instance.</p>
 */
  public let networkInterfaces: [InstanceNetworkInterface]?
/**
<p>The AMI launch index, which can be used to find this instance in the launch group.</p>
 */
  public let amiLaunchIndex: Int?
/**
<p>The location where the instance launched, if applicable.</p>
 */
  public let placement: Placement?
/**
<p>The virtualization type of the instance.</p>
 */
  public let virtualizationType: Virtualizationtype?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if clientToken != nil { body["clientToken"] = clientToken! }
    if rootDeviceName != nil { body["rootDeviceName"] = rootDeviceName! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if kernelId != nil { body["kernelId"] = kernelId! }
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    if privateDnsName != nil { body["privateDnsName"] = privateDnsName! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
    if productCodes != nil { body["productCodes"] = productCodes! }
    if keyName != nil { body["keyName"] = keyName! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if iamInstanceProfile != nil { body["iamInstanceProfile"] = iamInstanceProfile! }
    if publicDnsName != nil { body["dnsName"] = publicDnsName! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if rootDeviceType != nil { body["rootDeviceType"] = rootDeviceType! }
    if ramdiskId != nil { body["ramdiskId"] = ramdiskId! }
    if instanceLifecycle != nil { body["instanceLifecycle"] = instanceLifecycle! }
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if sriovNetSupport != nil { body["sriovNetSupport"] = sriovNetSupport! }
    if platform != nil { body["platform"] = platform! }
    if spotInstanceRequestId != nil { body["spotInstanceRequestId"] = spotInstanceRequestId! }
    if tags != nil { body["tagSet"] = tags! }
    if launchTime != nil { body["launchTime"] = launchTime! }
    if state != nil { body["instanceState"] = state! }
    if publicIpAddress != nil { body["ipAddress"] = publicIpAddress! }
    if monitoring != nil { body["monitoring"] = monitoring! }
    if stateTransitionReason != nil { body["reason"] = stateTransitionReason! }
    if stateReason != nil { body["stateReason"] = stateReason! }
    if securityGroups != nil { body["groupSet"] = securityGroups! }
    if hypervisor != nil { body["hypervisor"] = hypervisor! }
    if architecture != nil { body["architecture"] = architecture! }
    if imageId != nil { body["imageId"] = imageId! }
    if enaSupport != nil { body["enaSupport"] = enaSupport! }
    if networkInterfaces != nil { body["networkInterfaceSet"] = networkInterfaces! }
    if amiLaunchIndex != nil { body["amiLaunchIndex"] = amiLaunchIndex! }
    if placement != nil { body["placement"] = placement! }
    if virtualizationType != nil { body["virtualizationType"] = virtualizationType! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Instance {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Instance(
        clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      rootDeviceName: jsonDict["rootDeviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebsOptimized: jsonDict["ebsOptimized"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernelId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      sourceDestCheck: jsonDict["sourceDestCheck"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateDnsName: jsonDict["privateDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      productCodes: jsonDict["productCodes"].flatMap { ($0 is NSNull) ? nil : [ProductCode].deserialize(response: response, body: .json($0)) },
      keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      iamInstanceProfile: jsonDict["iamInstanceProfile"].flatMap { ($0 is NSNull) ? nil : IamInstanceProfile.deserialize(response: response, body: .json($0)) },
      publicDnsName: jsonDict["dnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      rootDeviceType: jsonDict["rootDeviceType"].flatMap { ($0 is NSNull) ? nil : Devicetype.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdiskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceLifecycle: jsonDict["instanceLifecycle"].flatMap { ($0 is NSNull) ? nil : Instancelifecycletype.deserialize(response: response, body: .json($0)) },
      blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [InstanceBlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      sriovNetSupport: jsonDict["sriovNetSupport"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : Platformvalues.deserialize(response: response, body: .json($0)) },
      spotInstanceRequestId: jsonDict["spotInstanceRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      launchTime: jsonDict["launchTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      state: jsonDict["instanceState"].flatMap { ($0 is NSNull) ? nil : InstanceState.deserialize(response: response, body: .json($0)) },
      publicIpAddress: jsonDict["ipAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      monitoring: jsonDict["monitoring"].flatMap { ($0 is NSNull) ? nil : Monitoring.deserialize(response: response, body: .json($0)) },
      stateTransitionReason: jsonDict["reason"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      stateReason: jsonDict["stateReason"].flatMap { ($0 is NSNull) ? nil : StateReason.deserialize(response: response, body: .json($0)) },
      securityGroups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      hypervisor: jsonDict["hypervisor"].flatMap { ($0 is NSNull) ? nil : Hypervisortype.deserialize(response: response, body: .json($0)) },
      architecture: jsonDict["architecture"].flatMap { ($0 is NSNull) ? nil : Architecturevalues.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      enaSupport: jsonDict["enaSupport"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      networkInterfaces: jsonDict["networkInterfaceSet"].flatMap { ($0 is NSNull) ? nil : [InstanceNetworkInterface].deserialize(response: response, body: .json($0)) },
      amiLaunchIndex: jsonDict["amiLaunchIndex"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      placement: jsonDict["placement"].flatMap { ($0 is NSNull) ? nil : Placement.deserialize(response: response, body: .json($0)) },
      virtualizationType: jsonDict["virtualizationType"].flatMap { ($0 is NSNull) ? nil : Virtualizationtype.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - clientToken: <p>The idempotency token you provided when you launched the instance, if applicable.</p>
      - rootDeviceName: <p>The root device name (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p>
      - ebsOptimized: <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
      - kernelId: <p>The kernel associated with this instance, if applicable.</p>
      - sourceDestCheck: <p>Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the instance to perform NAT. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
      - privateDnsName: <p>The private DNS name assigned to the instance. This DNS name can only be used inside the Amazon EC2 network. This name is not available until the instance enters the <code>running</code> state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.</p>
      - instanceType: <p>The instance type.</p>
      - privateIpAddress: <p>The private IP address assigned to the instance.</p>
      - productCodes: <p>The product codes attached to this instance, if applicable.</p>
      - keyName: <p>The name of the key pair, if this instance was launched with an associated key pair.</p>
      - instanceId: <p>The ID of the instance.</p>
      - iamInstanceProfile: <p>The IAM instance profile associated with the instance, if applicable.</p>
      - publicDnsName: <p>The public DNS name assigned to the instance. This name is not available until the instance enters the <code>running</code> state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.</p>
      - vpcId: <p>[EC2-VPC] The ID of the VPC in which the instance is running.</p>
      - rootDeviceType: <p>The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
      - ramdiskId: <p>The RAM disk associated with this instance, if applicable.</p>
      - instanceLifecycle: <p>Indicates whether this is a Spot instance or a Scheduled Instance.</p>
      - blockDeviceMappings: <p>Any block device mapping entries for the instance.</p>
      - subnetId: <p>[EC2-VPC] The ID of the subnet in which the instance is running.</p>
      - sriovNetSupport: <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
      - platform: <p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>
      - spotInstanceRequestId: <p>If the request is a Spot instance request, the ID of the request.</p>
      - tags: <p>Any tags assigned to the instance.</p>
      - launchTime: <p>The time the instance was launched.</p>
      - state: <p>The current state of the instance.</p>
      - publicIpAddress: <p>The public IP address assigned to the instance, if applicable.</p>
      - monitoring: <p>The monitoring information for the instance.</p>
      - stateTransitionReason: <p>The reason for the most recent state transition. This might be an empty string.</p>
      - stateReason: <p>The reason for the most recent state transition.</p>
      - securityGroups: <p>One or more security groups for the instance.</p>
      - hypervisor: <p>The hypervisor type of the instance.</p>
      - architecture: <p>The architecture of the image.</p>
      - imageId: <p>The ID of the AMI used to launch the instance.</p>
      - enaSupport: <p>Specifies whether enhanced networking with ENA is enabled.</p>
      - networkInterfaces: <p>[EC2-VPC] One or more network interfaces for the instance.</p>
      - amiLaunchIndex: <p>The AMI launch index, which can be used to find this instance in the launch group.</p>
      - placement: <p>The location where the instance launched, if applicable.</p>
      - virtualizationType: <p>The virtualization type of the instance.</p>
 */
  public init(clientToken: String?, rootDeviceName: String?, ebsOptimized: Bool?, kernelId: String?, sourceDestCheck: Bool?, privateDnsName: String?, instanceType: Instancetype?, privateIpAddress: String?, productCodes: [ProductCode]?, keyName: String?, instanceId: String?, iamInstanceProfile: IamInstanceProfile?, publicDnsName: String?, vpcId: String?, rootDeviceType: Devicetype?, ramdiskId: String?, instanceLifecycle: Instancelifecycletype?, blockDeviceMappings: [InstanceBlockDeviceMapping]?, subnetId: String?, sriovNetSupport: String?, platform: Platformvalues?, spotInstanceRequestId: String?, tags: [Tag]?, launchTime: Date?, state: InstanceState?, publicIpAddress: String?, monitoring: Monitoring?, stateTransitionReason: String?, stateReason: StateReason?, securityGroups: [GroupIdentifier]?, hypervisor: Hypervisortype?, architecture: Architecturevalues?, imageId: String?, enaSupport: Bool?, networkInterfaces: [InstanceNetworkInterface]?, amiLaunchIndex: Int?, placement: Placement?, virtualizationType: Virtualizationtype?) {
self.clientToken = clientToken
self.rootDeviceName = rootDeviceName
self.ebsOptimized = ebsOptimized
self.kernelId = kernelId
self.sourceDestCheck = sourceDestCheck
self.privateDnsName = privateDnsName
self.instanceType = instanceType
self.privateIpAddress = privateIpAddress
self.productCodes = productCodes
self.keyName = keyName
self.instanceId = instanceId
self.iamInstanceProfile = iamInstanceProfile
self.publicDnsName = publicDnsName
self.vpcId = vpcId
self.rootDeviceType = rootDeviceType
self.ramdiskId = ramdiskId
self.instanceLifecycle = instanceLifecycle
self.blockDeviceMappings = blockDeviceMappings
self.subnetId = subnetId
self.sriovNetSupport = sriovNetSupport
self.platform = platform
self.spotInstanceRequestId = spotInstanceRequestId
self.tags = tags
self.launchTime = launchTime
self.state = state
self.publicIpAddress = publicIpAddress
self.monitoring = monitoring
self.stateTransitionReason = stateTransitionReason
self.stateReason = stateReason
self.securityGroups = securityGroups
self.hypervisor = hypervisor
self.architecture = architecture
self.imageId = imageId
self.enaSupport = enaSupport
self.networkInterfaces = networkInterfaces
self.amiLaunchIndex = amiLaunchIndex
self.placement = placement
self.virtualizationType = virtualizationType
  }
}

enum Reportstatustype: String, RestJsonDeserializable, RestJsonSerializable {
  case `ok` = "ok"
  case `impaired` = "impaired"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Reportstatustype {
    guard case let .json(json) = body else { fatalError() }
    return Reportstatustype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for AttachVolume.</p>
 */
public struct AttachVolumeRequest: RestJsonSerializable {
/**
<p>The device name to expose to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
 */
  public let device: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>The ID of the EBS volume. The volume and instance must be within the same Availability Zone.</p>
 */
  public let volumeId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["Device"] = device
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["InstanceId"] = instanceId
    body["VolumeId"] = volumeId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - device: <p>The device name to expose to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceId: <p>The ID of the instance.</p>
      - volumeId: <p>The ID of the EBS volume. The volume and instance must be within the same Availability Zone.</p>
 */
  public init(device: String, dryRun: Bool?, instanceId: String, volumeId: String) {
self.device = device
self.dryRun = dryRun
self.instanceId = instanceId
self.volumeId = volumeId
  }
}

/**
<p>Contains the output of DisableVpcClassicLink.</p>
 */
public struct DisableVpcClassicLinkResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DisableVpcClassicLinkResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DisableVpcClassicLinkResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

enum Telemetrystatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `uP` = "UP"
  case `dOWN` = "DOWN"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Telemetrystatus {
    guard case let .json(json) = body else { fatalError() }
    return Telemetrystatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for AcceptVpcPeeringConnection.</p>
 */
public struct AcceptVpcPeeringConnectionRequest: RestJsonSerializable {
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcPeeringConnectionId: String?, dryRun: Bool?) {
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeFlowLogs.</p>
 */
public struct DescribeFlowLogsRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p> </li> <li> <p> <code>flow-log-id</code> - The ID of the flow log.</p> </li> <li> <p> <code>log-group-name</code> - The name of the log group.</p> </li> <li> <p> <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p> </li> <li> <p> <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> | <code>REJECT</code> | <code>ALL</code>)</p> </li> </ul>
 */
  public let filter: [Filter]?
/**
<p>One or more flow log IDs.</p>
 */
  public let flowLogIds: [String]?
/**
<p>The token to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the flow log IDs parameter in the same request.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filter != nil { body["Filter"] = filter! }
    if flowLogIds != nil { body["FlowLogId"] = flowLogIds! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filter: <p>One or more filters.</p> <ul> <li> <p> <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p> </li> <li> <p> <code>flow-log-id</code> - The ID of the flow log.</p> </li> <li> <p> <code>log-group-name</code> - The name of the log group.</p> </li> <li> <p> <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p> </li> <li> <p> <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> | <code>REJECT</code> | <code>ALL</code>)</p> </li> </ul>
      - flowLogIds: <p>One or more flow log IDs.</p>
      - nextToken: <p>The token to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the flow log IDs parameter in the same request.</p>
 */
  public init(filter: [Filter]?, flowLogIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filter = filter
self.flowLogIds = flowLogIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes an instance running on a Dedicated Host.</p>
 */
public struct HostInstance: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The instance type size (for example, <code>m3.medium</code>) of the running instance.</p>
 */
  public let instanceType: String?
/**
<p>the IDs of instances that are running on the Dedicated Host.</p>
 */
  public let instanceId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceType != nil { body["instanceType"] = instanceType! }
    if instanceId != nil { body["instanceId"] = instanceId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> HostInstance {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return HostInstance(
        instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceType: <p>The instance type size (for example, <code>m3.medium</code>) of the running instance.</p>
      - instanceId: <p>the IDs of instances that are running on the Dedicated Host.</p>
 */
  public init(instanceType: String?, instanceId: String?) {
self.instanceType = instanceType
self.instanceId = instanceId
  }
}

enum Natgatewaystate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `failed` = "failed"
  case `available` = "available"
  case `deleting` = "deleting"
  case `deleted` = "deleted"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Natgatewaystate {
    guard case let .json(json) = body else { fatalError() }
    return Natgatewaystate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of DescribeSpotDatafeedSubscription.</p>
 */
public struct DescribeSpotDatafeedSubscriptionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Spot instance data feed subscription.</p>
 */
  public let spotDatafeedSubscription: SpotDatafeedSubscription?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotDatafeedSubscription != nil { body["spotDatafeedSubscription"] = spotDatafeedSubscription! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSpotDatafeedSubscriptionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSpotDatafeedSubscriptionResult(
        spotDatafeedSubscription: jsonDict["spotDatafeedSubscription"].flatMap { ($0 is NSNull) ? nil : SpotDatafeedSubscription.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - spotDatafeedSubscription: <p>The Spot instance data feed subscription.</p>
 */
  public init(spotDatafeedSubscription: SpotDatafeedSubscription?) {
self.spotDatafeedSubscription = spotDatafeedSubscription
  }
}

/**
<p>Describes whether monitoring is enabled.</p>
 */
public struct SpotFleetMonitoring: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Enables monitoring for the instance.</p> <p>Default: <code>false</code> </p>
 */
  public let enabled: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if enabled != nil { body["enabled"] = enabled! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotFleetMonitoring {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotFleetMonitoring(
        enabled: jsonDict["enabled"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - enabled: <p>Enables monitoring for the instance.</p> <p>Default: <code>false</code> </p>
 */
  public init(enabled: Bool?) {
self.enabled = enabled
  }
}

/**
<p>Describes the storage location for an instance store-backed AMI.</p>
 */
public struct Storage: RestJsonSerializable, RestJsonDeserializable {
/**
<p>An Amazon S3 storage location.</p>
 */
  public let s3: S3Storage?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if s3 != nil { body["S3"] = s3! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Storage {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Storage(
        s3: jsonDict["S3"].flatMap { ($0 is NSNull) ? nil : S3Storage.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - s3: <p>An Amazon S3 storage location.</p>
 */
  public init(s3: S3Storage?) {
self.s3 = s3
  }
}



/**
<p>Describes the launch specification for VM import.</p>
 */
public struct ImportInstanceLaunchSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more security group names.</p>
 */
  public let groupNames: [String]?
/**
<p>[EC2-VPC] The ID of the subnet in which to launch the instance.</p>
 */
  public let subnetId: String?
/**
<p>The user data to make available to the instance. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let userData: UserData?
/**
<p>One or more security group IDs.</p>
 */
  public let groupIds: [String]?
/**
<p>The architecture of the instance.</p>
 */
  public let architecture: Architecturevalues?
/**
<p>Reserved.</p>
 */
  public let additionalInfo: String?
/**
<p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
 */
  public let instanceInitiatedShutdownBehavior: Shutdownbehavior?
/**
<p>The placement information for the instance.</p>
 */
  public let placement: Placement?
/**
<p>Indicates whether monitoring is enabled.</p>
 */
  public let monitoring: Bool?
/**
<p>The instance type. For more information about the instance types that you can import, see <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#vmimport-instance-types">Instance Types</a> in the VM Import/Export User Guide.</p>
 */
  public let instanceType: Instancetype?
/**
<p>[EC2-VPC] An available IP address from the IP address range of the subnet.</p>
 */
  public let privateIpAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if groupNames != nil { body["GroupName"] = groupNames! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if userData != nil { body["userData"] = userData! }
    if groupIds != nil { body["GroupId"] = groupIds! }
    if architecture != nil { body["architecture"] = architecture! }
    if additionalInfo != nil { body["additionalInfo"] = additionalInfo! }
    if instanceInitiatedShutdownBehavior != nil { body["instanceInitiatedShutdownBehavior"] = instanceInitiatedShutdownBehavior! }
    if placement != nil { body["placement"] = placement! }
    if monitoring != nil { body["monitoring"] = monitoring! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportInstanceLaunchSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportInstanceLaunchSpecification(
        groupNames: jsonDict["GroupName"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userData: jsonDict["userData"].flatMap { ($0 is NSNull) ? nil : UserData.deserialize(response: response, body: .json($0)) },
      groupIds: jsonDict["GroupId"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      architecture: jsonDict["architecture"].flatMap { ($0 is NSNull) ? nil : Architecturevalues.deserialize(response: response, body: .json($0)) },
      additionalInfo: jsonDict["additionalInfo"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceInitiatedShutdownBehavior: jsonDict["instanceInitiatedShutdownBehavior"].flatMap { ($0 is NSNull) ? nil : Shutdownbehavior.deserialize(response: response, body: .json($0)) },
      placement: jsonDict["placement"].flatMap { ($0 is NSNull) ? nil : Placement.deserialize(response: response, body: .json($0)) },
      monitoring: jsonDict["monitoring"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - groupNames: <p>One or more security group names.</p>
      - subnetId: <p>[EC2-VPC] The ID of the subnet in which to launch the instance.</p>
      - userData: <p>The user data to make available to the instance. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
      - groupIds: <p>One or more security group IDs.</p>
      - architecture: <p>The architecture of the instance.</p>
      - additionalInfo: <p>Reserved.</p>
      - instanceInitiatedShutdownBehavior: <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
      - placement: <p>The placement information for the instance.</p>
      - monitoring: <p>Indicates whether monitoring is enabled.</p>
      - instanceType: <p>The instance type. For more information about the instance types that you can import, see <a href="http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#vmimport-instance-types">Instance Types</a> in the VM Import/Export User Guide.</p>
      - privateIpAddress: <p>[EC2-VPC] An available IP address from the IP address range of the subnet.</p>
 */
  public init(groupNames: [String]?, subnetId: String?, userData: UserData?, groupIds: [String]?, architecture: Architecturevalues?, additionalInfo: String?, instanceInitiatedShutdownBehavior: Shutdownbehavior?, placement: Placement?, monitoring: Bool?, instanceType: Instancetype?, privateIpAddress: String?) {
self.groupNames = groupNames
self.subnetId = subnetId
self.userData = userData
self.groupIds = groupIds
self.architecture = architecture
self.additionalInfo = additionalInfo
self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
self.placement = placement
self.monitoring = monitoring
self.instanceType = instanceType
self.privateIpAddress = privateIpAddress
  }
}

enum Virtualizationtype: String, RestJsonDeserializable, RestJsonSerializable {
  case `hvm` = "hvm"
  case `paravirtual` = "paravirtual"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Virtualizationtype {
    guard case let .json(json) = body else { fatalError() }
    return Virtualizationtype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Describes the status of a Spot instance request.</p>
 */
public struct SpotInstanceStatus: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The date and time of the most recent status update, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let updateTime: Date?
/**
<p>The status code. For a list of status codes, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand">Spot Bid Status Codes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let code: String?
/**
<p>The description for the status code.</p>
 */
  public let message: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if updateTime != nil { body["updateTime"] = updateTime! }
    if code != nil { body["code"] = code! }
    if message != nil { body["message"] = message! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotInstanceStatus {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotInstanceStatus(
        updateTime: jsonDict["updateTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - updateTime: <p>The date and time of the most recent status update, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - code: <p>The status code. For a list of status codes, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand">Spot Bid Status Codes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - message: <p>The description for the status code.</p>
 */
  public init(updateTime: Date?, code: String?, message: String?) {
self.updateTime = updateTime
self.code = code
self.message = message
  }
}





enum Conversiontaskstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `active` = "active"
  case `cancelling` = "cancelling"
  case `cancelled` = "cancelled"
  case `completed` = "completed"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Conversiontaskstate {
    guard case let .json(json) = body else { fatalError() }
    return Conversiontaskstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes a stale rule in a security group.</p>
 */
public struct StaleIpPermission: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more prefix list IDs for an AWS service. Not applicable for stale security group rules.</p>
 */
  public let prefixListIds: [String]?
/**
<p>One or more security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.</p>
 */
  public let userIdGroupPairs: [UserIdGroupPair]?
/**
<p>One or more IP ranges. Not applicable for stale security group rules.</p>
 */
  public let ipRanges: [String]?
/**
<p>The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types. </p>
 */
  public let fromPort: Int?
/**
<p>The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types. </p>
 */
  public let toPort: Int?
/**
<p>The IP protocol name (for <code>tcp</code>, <code>udp</code>, and <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers)</a>.</p>
 */
  public let ipProtocol: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if prefixListIds != nil { body["prefixListIds"] = prefixListIds! }
    if userIdGroupPairs != nil { body["groups"] = userIdGroupPairs! }
    if ipRanges != nil { body["ipRanges"] = ipRanges! }
    if fromPort != nil { body["fromPort"] = fromPort! }
    if toPort != nil { body["toPort"] = toPort! }
    if ipProtocol != nil { body["ipProtocol"] = ipProtocol! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> StaleIpPermission {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return StaleIpPermission(
        prefixListIds: jsonDict["prefixListIds"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      userIdGroupPairs: jsonDict["groups"].flatMap { ($0 is NSNull) ? nil : [UserIdGroupPair].deserialize(response: response, body: .json($0)) },
      ipRanges: jsonDict["ipRanges"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      fromPort: jsonDict["fromPort"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      toPort: jsonDict["toPort"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      ipProtocol: jsonDict["ipProtocol"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - prefixListIds: <p>One or more prefix list IDs for an AWS service. Not applicable for stale security group rules.</p>
      - userIdGroupPairs: <p>One or more security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.</p>
      - ipRanges: <p>One or more IP ranges. Not applicable for stale security group rules.</p>
      - fromPort: <p>The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types. </p>
      - toPort: <p>The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types. </p>
      - ipProtocol: <p>The IP protocol name (for <code>tcp</code>, <code>udp</code>, and <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers)</a>.</p>
 */
  public init(prefixListIds: [String]?, userIdGroupPairs: [UserIdGroupPair]?, ipRanges: [String]?, fromPort: Int?, toPort: Int?, ipProtocol: String?) {
self.prefixListIds = prefixListIds
self.userIdGroupPairs = userIdGroupPairs
self.ipRanges = ipRanges
self.fromPort = fromPort
self.toPort = toPort
self.ipProtocol = ipProtocol
  }
}

/**
<p>Describes an IAM instance profile.</p>
 */
public struct IamInstanceProfile: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Amazon Resource Name (ARN) of the instance profile.</p>
 */
  public let arn: String?
/**
<p>The ID of the instance profile.</p>
 */
  public let id: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if arn != nil { body["arn"] = arn! }
    if id != nil { body["id"] = id! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> IamInstanceProfile {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return IamInstanceProfile(
        arn: jsonDict["arn"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      id: jsonDict["id"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - arn: <p>The Amazon Resource Name (ARN) of the instance profile.</p>
      - id: <p>The ID of the instance profile.</p>
 */
  public init(arn: String?, id: String?) {
self.arn = arn
self.id = id
  }
}

/**
<p>Contains the output of DescribeSecurityGroups.</p>
 */
public struct DescribeSecurityGroupsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more security groups.</p>
 */
  public let securityGroups: [SecurityGroup]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if securityGroups != nil { body["securityGroupInfo"] = securityGroups! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSecurityGroupsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSecurityGroupsResult(
        securityGroups: jsonDict["securityGroupInfo"].flatMap { ($0 is NSNull) ? nil : [SecurityGroup].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - securityGroups: <p>Information about one or more security groups.</p>
 */
  public init(securityGroups: [SecurityGroup]?) {
self.securityGroups = securityGroups
  }
}

/**
<p>Describes the result of the purchase.</p>
 */
public struct Purchase: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The upfront price of the reservation.</p>
 */
  public let upfrontPrice: String?
/**
<p>The IDs of the Dedicated Hosts associated with the reservation.</p>
 */
  public let hostIdSet: [String]?
/**
<p>The payment option for the reservation.</p>
 */
  public let paymentOption: Paymentoption?
/**
<p>The hourly price of the reservation per hour.</p>
 */
  public let hourlyPrice: String?
/**
<p>The currency in which the <code>UpfrontPrice</code> and <code>HourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The ID of the reservation.</p>
 */
  public let hostReservationId: String?
/**
<p>The duration of the reservation's term in seconds.</p>
 */
  public let duration: Int?
/**
<p>The instance family on the Dedicated Host that the reservation can be associated with.</p>
 */
  public let instanceFamily: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if upfrontPrice != nil { body["upfrontPrice"] = upfrontPrice! }
    if hostIdSet != nil { body["hostIdSet"] = hostIdSet! }
    if paymentOption != nil { body["paymentOption"] = paymentOption! }
    if hourlyPrice != nil { body["hourlyPrice"] = hourlyPrice! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if hostReservationId != nil { body["hostReservationId"] = hostReservationId! }
    if duration != nil { body["duration"] = duration! }
    if instanceFamily != nil { body["instanceFamily"] = instanceFamily! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Purchase {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Purchase(
        upfrontPrice: jsonDict["upfrontPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      hostIdSet: jsonDict["hostIdSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      paymentOption: jsonDict["paymentOption"].flatMap { ($0 is NSNull) ? nil : Paymentoption.deserialize(response: response, body: .json($0)) },
      hourlyPrice: jsonDict["hourlyPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      hostReservationId: jsonDict["hostReservationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      duration: jsonDict["duration"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      instanceFamily: jsonDict["instanceFamily"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - upfrontPrice: <p>The upfront price of the reservation.</p>
      - hostIdSet: <p>The IDs of the Dedicated Hosts associated with the reservation.</p>
      - paymentOption: <p>The payment option for the reservation.</p>
      - hourlyPrice: <p>The hourly price of the reservation per hour.</p>
      - currencyCode: <p>The currency in which the <code>UpfrontPrice</code> and <code>HourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
      - hostReservationId: <p>The ID of the reservation.</p>
      - duration: <p>The duration of the reservation's term in seconds.</p>
      - instanceFamily: <p>The instance family on the Dedicated Host that the reservation can be associated with.</p>
 */
  public init(upfrontPrice: String?, hostIdSet: [String]?, paymentOption: Paymentoption?, hourlyPrice: String?, currencyCode: Currencycodevalues?, hostReservationId: String?, duration: Int?, instanceFamily: String?) {
self.upfrontPrice = upfrontPrice
self.hostIdSet = hostIdSet
self.paymentOption = paymentOption
self.hourlyPrice = hourlyPrice
self.currencyCode = currencyCode
self.hostReservationId = hostReservationId
self.duration = duration
self.instanceFamily = instanceFamily
  }
}

/**
<p>Contains the parameters for RequestSpotFleet.</p>
 */
public struct RequestSpotFleetRequest: RestJsonSerializable {
/**
<p>The configuration for the Spot fleet request.</p>
 */
  public let spotFleetRequestConfig: SpotFleetRequestConfigData
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["spotFleetRequestConfig"] = spotFleetRequestConfig
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - spotFleetRequestConfig: <p>The configuration for the Spot fleet request.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(spotFleetRequestConfig: SpotFleetRequestConfigData, dryRun: Bool?) {
self.spotFleetRequestConfig = spotFleetRequestConfig
self.dryRun = dryRun
  }
}

/**
<p>Describes a Reserved Instance listing state.</p>
 */
public struct InstanceCount: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The states of the listed Reserved Instances.</p>
 */
  public let state: Listingstate?
/**
<p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
 */
  public let instanceCount: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if state != nil { body["state"] = state! }
    if instanceCount != nil { body["instanceCount"] = instanceCount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceCount {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceCount(
        state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Listingstate.deserialize(response: response, body: .json($0)) },
      instanceCount: jsonDict["instanceCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - state: <p>The states of the listed Reserved Instances.</p>
      - instanceCount: <p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
 */
  public init(state: Listingstate?, instanceCount: Int?) {
self.state = state
self.instanceCount = instanceCount
  }
}

/**
<p>Contains the parameters for DescribeNetworkInterfaces.</p>
 */
public struct DescribeNetworkInterfacesRequest: RestJsonSerializable {
/**
<p>One or more network interface IDs.</p> <p>Default: Describes all your network interfaces.</p>
 */
  public let networkInterfaceIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>addresses.private-ip-address</code> - The private IP addresses associated with the network interface.</p> </li> <li> <p> <code>addresses.primary</code> - Whether the private IP address is the primary IP address associated with the network interface. </p> </li> <li> <p> <code>addresses.association.public-ip</code> - The association ID returned when the network interface was associated with the Elastic IP address.</p> </li> <li> <p> <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IP address.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address for your network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address bound to the network interface.</p> </li> <li> <p> <code>association.public-dns-name</code> - The public DNS name for the network interface.</p> </li> <li> <p> <code>attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>attachment.attach.time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to which the network interface is attached.</p> </li> <li> <p> <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the network interface.</p> </li> <li> <p> <code>description</code> - The description of the network interface.</p> </li> <li> <p> <code>group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the network interface owner.</p> </li> <li> <p> <code>private-ip-address</code> - The private IP address or addresses of the network interface.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>requester-managed</code> - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>source-desk-check</code> - Indicates whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code>; if a network interface is attached to an instance the status is <code>in-use</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network interface.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkInterfaceIds != nil { body["NetworkInterfaceId"] = networkInterfaceIds! }
    if filters != nil { body["filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - networkInterfaceIds: <p>One or more network interface IDs.</p> <p>Default: Describes all your network interfaces.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>addresses.private-ip-address</code> - The private IP addresses associated with the network interface.</p> </li> <li> <p> <code>addresses.primary</code> - Whether the private IP address is the primary IP address associated with the network interface. </p> </li> <li> <p> <code>addresses.association.public-ip</code> - The association ID returned when the network interface was associated with the Elastic IP address.</p> </li> <li> <p> <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IP address.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address for your network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address bound to the network interface.</p> </li> <li> <p> <code>association.public-dns-name</code> - The public DNS name for the network interface.</p> </li> <li> <p> <code>attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>attachment.attach.time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to which the network interface is attached.</p> </li> <li> <p> <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the network interface.</p> </li> <li> <p> <code>description</code> - The description of the network interface.</p> </li> <li> <p> <code>group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the network interface owner.</p> </li> <li> <p> <code>private-ip-address</code> - The private IP address or addresses of the network interface.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>requester-managed</code> - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>source-desk-check</code> - Indicates whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code>; if a network interface is attached to an instance the status is <code>in-use</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network interface.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(networkInterfaceIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.networkInterfaceIds = networkInterfaceIds
self.filters = filters
self.dryRun = dryRun
  }
}

enum Vpcstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `available` = "available"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Vpcstate {
    guard case let .json(json) = body else { fatalError() }
    return Vpcstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes a Reserved Instance offering.</p>
 */
public struct ReservedInstancesOffering: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The recurring charge tag assigned to the resource.</p>
 */
  public let recurringCharges: [RecurringCharge]?
/**
<p>The usage price of the Reserved Instance, per hour.</p>
 */
  public let usagePrice: Float?
/**
<p>The tenancy of the instance.</p>
 */
  public let instanceTenancy: Tenancy?
/**
<p>The pricing details of the Reserved Instance offering.</p>
 */
  public let pricingDetails: [PricingDetail]?
/**
<p>The instance type on which the Reserved Instance can be used.</p>
 */
  public let instanceType: Instancetype?
/**
<p>Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is <code>true</code>.</p>
 */
  public let marketplace: Bool?
/**
<p>The Availability Zone in which the Reserved Instance can be used.</p>
 */
  public let availabilityZone: String?
/**
<p>If <code>convertible</code> it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If <code>standard</code>, it is not possible to perform an exchange.</p>
 */
  public let offeringClass: Offeringclasstype?
/**
<p>The Reserved Instance offering type.</p>
 */
  public let offeringType: Offeringtypevalues?
/**
<p>The Reserved Instance product platform description.</p>
 */
  public let productDescription: Riproductdescription?
/**
<p>The ID of the Reserved Instance offering. This is the offering ID used in <a>GetReservedInstancesExchangeQuote</a> to confirm that an exchange can be made.</p>
 */
  public let reservedInstancesOfferingId: String?
/**
<p>The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The duration of the Reserved Instance, in seconds.</p>
 */
  public let duration: Int?
/**
<p>Whether the Reserved Instance is applied to instances in a region or an Availability Zone.</p>
 */
  public let scope: Scope?
/**
<p>The purchase price of the Reserved Instance.</p>
 */
  public let fixedPrice: Float?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if recurringCharges != nil { body["recurringCharges"] = recurringCharges! }
    if usagePrice != nil { body["usagePrice"] = usagePrice! }
    if instanceTenancy != nil { body["instanceTenancy"] = instanceTenancy! }
    if pricingDetails != nil { body["pricingDetailsSet"] = pricingDetails! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if marketplace != nil { body["marketplace"] = marketplace! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if offeringClass != nil { body["offeringClass"] = offeringClass! }
    if offeringType != nil { body["offeringType"] = offeringType! }
    if productDescription != nil { body["productDescription"] = productDescription! }
    if reservedInstancesOfferingId != nil { body["reservedInstancesOfferingId"] = reservedInstancesOfferingId! }
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if duration != nil { body["duration"] = duration! }
    if scope != nil { body["scope"] = scope! }
    if fixedPrice != nil { body["fixedPrice"] = fixedPrice! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstancesOffering {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstancesOffering(
        recurringCharges: jsonDict["recurringCharges"].flatMap { ($0 is NSNull) ? nil : [RecurringCharge].deserialize(response: response, body: .json($0)) },
      usagePrice: jsonDict["usagePrice"].flatMap { ($0 is NSNull) ? nil : Float.deserialize(response: response, body: .json($0)) },
      instanceTenancy: jsonDict["instanceTenancy"].flatMap { ($0 is NSNull) ? nil : Tenancy.deserialize(response: response, body: .json($0)) },
      pricingDetails: jsonDict["pricingDetailsSet"].flatMap { ($0 is NSNull) ? nil : [PricingDetail].deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      marketplace: jsonDict["marketplace"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      offeringClass: jsonDict["offeringClass"].flatMap { ($0 is NSNull) ? nil : Offeringclasstype.deserialize(response: response, body: .json($0)) },
      offeringType: jsonDict["offeringType"].flatMap { ($0 is NSNull) ? nil : Offeringtypevalues.deserialize(response: response, body: .json($0)) },
      productDescription: jsonDict["productDescription"].flatMap { ($0 is NSNull) ? nil : Riproductdescription.deserialize(response: response, body: .json($0)) },
      reservedInstancesOfferingId: jsonDict["reservedInstancesOfferingId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      duration: jsonDict["duration"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      scope: jsonDict["scope"].flatMap { ($0 is NSNull) ? nil : Scope.deserialize(response: response, body: .json($0)) },
      fixedPrice: jsonDict["fixedPrice"].flatMap { ($0 is NSNull) ? nil : Float.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - recurringCharges: <p>The recurring charge tag assigned to the resource.</p>
      - usagePrice: <p>The usage price of the Reserved Instance, per hour.</p>
      - instanceTenancy: <p>The tenancy of the instance.</p>
      - pricingDetails: <p>The pricing details of the Reserved Instance offering.</p>
      - instanceType: <p>The instance type on which the Reserved Instance can be used.</p>
      - marketplace: <p>Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is <code>true</code>.</p>
      - availabilityZone: <p>The Availability Zone in which the Reserved Instance can be used.</p>
      - offeringClass: <p>If <code>convertible</code> it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If <code>standard</code>, it is not possible to perform an exchange.</p>
      - offeringType: <p>The Reserved Instance offering type.</p>
      - productDescription: <p>The Reserved Instance product platform description.</p>
      - reservedInstancesOfferingId: <p>The ID of the Reserved Instance offering. This is the offering ID used in <a>GetReservedInstancesExchangeQuote</a> to confirm that an exchange can be made.</p>
      - currencyCode: <p>The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is <code>USD</code>.</p>
      - duration: <p>The duration of the Reserved Instance, in seconds.</p>
      - scope: <p>Whether the Reserved Instance is applied to instances in a region or an Availability Zone.</p>
      - fixedPrice: <p>The purchase price of the Reserved Instance.</p>
 */
  public init(recurringCharges: [RecurringCharge]?, usagePrice: Float?, instanceTenancy: Tenancy?, pricingDetails: [PricingDetail]?, instanceType: Instancetype?, marketplace: Bool?, availabilityZone: String?, offeringClass: Offeringclasstype?, offeringType: Offeringtypevalues?, productDescription: Riproductdescription?, reservedInstancesOfferingId: String?, currencyCode: Currencycodevalues?, duration: Int?, scope: Scope?, fixedPrice: Float?) {
self.recurringCharges = recurringCharges
self.usagePrice = usagePrice
self.instanceTenancy = instanceTenancy
self.pricingDetails = pricingDetails
self.instanceType = instanceType
self.marketplace = marketplace
self.availabilityZone = availabilityZone
self.offeringClass = offeringClass
self.offeringType = offeringType
self.productDescription = productDescription
self.reservedInstancesOfferingId = reservedInstancesOfferingId
self.currencyCode = currencyCode
self.duration = duration
self.scope = scope
self.fixedPrice = fixedPrice
  }
}

enum Gatewaytype: String, RestJsonDeserializable, RestJsonSerializable {
  case `ipsec1` = "ipsec.1"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Gatewaytype {
    guard case let .json(json) = body else { fatalError() }
    return Gatewaytype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of CreateNetworkAcl.</p>
 */
public struct CreateNetworkAclResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the network ACL.</p>
 */
  public let networkAcl: NetworkAcl?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkAcl != nil { body["networkAcl"] = networkAcl! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateNetworkAclResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateNetworkAclResult(
        networkAcl: jsonDict["networkAcl"].flatMap { ($0 is NSNull) ? nil : NetworkAcl.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - networkAcl: <p>Information about the network ACL.</p>
 */
  public init(networkAcl: NetworkAcl?) {
self.networkAcl = networkAcl
  }
}

/**
<p>Describes a block device mapping.</p>
 */
public struct InstanceBlockDeviceMapping: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
 */
  public let ebs: EbsInstanceBlockDevice?
/**
<p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
 */
  public let deviceName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ebs != nil { body["ebs"] = ebs! }
    if deviceName != nil { body["deviceName"] = deviceName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceBlockDeviceMapping {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceBlockDeviceMapping(
        ebs: jsonDict["ebs"].flatMap { ($0 is NSNull) ? nil : EbsInstanceBlockDevice.deserialize(response: response, body: .json($0)) },
      deviceName: jsonDict["deviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ebs: <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
      - deviceName: <p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
 */
  public init(ebs: EbsInstanceBlockDevice?, deviceName: String?) {
self.ebs = ebs
self.deviceName = deviceName
  }
}

/**
<p>Describes a volume status operation code.</p>
 */
public struct VolumeStatusAction: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The code identifying the operation, for example, <code>enable-volume-io</code>.</p>
 */
  public let code: String?
/**
<p>The event type associated with this operation.</p>
 */
  public let eventType: String?
/**
<p>The ID of the event associated with this operation.</p>
 */
  public let eventId: String?
/**
<p>A description of the operation.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if code != nil { body["code"] = code! }
    if eventType != nil { body["eventType"] = eventType! }
    if eventId != nil { body["eventId"] = eventId! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeStatusAction {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeStatusAction(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      eventType: jsonDict["eventType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      eventId: jsonDict["eventId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - code: <p>The code identifying the operation, for example, <code>enable-volume-io</code>.</p>
      - eventType: <p>The event type associated with this operation.</p>
      - eventId: <p>The ID of the event associated with this operation.</p>
      - description: <p>A description of the operation.</p>
 */
  public init(code: String?, eventType: String?, eventId: String?, description: String?) {
self.code = code
self.eventType = eventType
self.eventId = eventId
self.description = description
  }
}



/**
<p>Contains the parameters for CreateReservedInstancesListing.</p>
 */
public struct CreateReservedInstancesListingRequest: RestJsonSerializable {
/**
<p>A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.</p>
 */
  public let priceSchedules: [PriceScheduleSpecification]
/**
<p>The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.</p>
 */
  public let instanceCount: Int
/**
<p>The ID of the active Standard Reserved Instance.</p>
 */
  public let reservedInstancesId: String
/**
<p>Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["priceSchedules"] = priceSchedules
    body["instanceCount"] = instanceCount
    body["reservedInstancesId"] = reservedInstancesId
    body["clientToken"] = clientToken
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - priceSchedules: <p>A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.</p>
      - instanceCount: <p>The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.</p>
      - reservedInstancesId: <p>The ID of the active Standard Reserved Instance.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public init(priceSchedules: [PriceScheduleSpecification], instanceCount: Int, reservedInstancesId: String, clientToken: String) {
self.priceSchedules = priceSchedules
self.instanceCount = instanceCount
self.reservedInstancesId = reservedInstancesId
self.clientToken = clientToken
  }
}


/**
<p>Contains the output of DescribeRouteTables.</p>
 */
public struct DescribeRouteTablesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more route tables.</p>
 */
  public let routeTables: [RouteTable]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if routeTables != nil { body["routeTableSet"] = routeTables! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeRouteTablesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeRouteTablesResult(
        routeTables: jsonDict["routeTableSet"].flatMap { ($0 is NSNull) ? nil : [RouteTable].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - routeTables: <p>Information about one or more route tables.</p>
 */
  public init(routeTables: [RouteTable]?) {
self.routeTables = routeTables
  }
}

enum Excesscapacityterminationpolicy: String, RestJsonDeserializable, RestJsonSerializable {
  case `noTermination` = "noTermination"
  case `default` = "default"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Excesscapacityterminationpolicy {
    guard case let .json(json) = body else { fatalError() }
    return Excesscapacityterminationpolicy(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Instanceattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `instanceType` = "instanceType"
  case `kernel` = "kernel"
  case `ramdisk` = "ramdisk"
  case `userData` = "userData"
  case `disableApiTermination` = "disableApiTermination"
  case `instanceInitiatedShutdownBehavior` = "instanceInitiatedShutdownBehavior"
  case `rootDeviceName` = "rootDeviceName"
  case `blockDeviceMapping` = "blockDeviceMapping"
  case `productCodes` = "productCodes"
  case `sourceDestCheck` = "sourceDestCheck"
  case `groupSet` = "groupSet"
  case `ebsOptimized` = "ebsOptimized"
  case `sriovNetSupport` = "sriovNetSupport"
  case `enaSupport` = "enaSupport"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Instanceattributename {
    guard case let .json(json) = body else { fatalError() }
    return Instanceattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of DescribeClassicLinkInstances.</p>
 */
public struct DescribeClassicLinkInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more linked EC2-Classic instances.</p>
 */
  public let instances: [ClassicLinkInstance]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instances != nil { body["instancesSet"] = instances! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeClassicLinkInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeClassicLinkInstancesResult(
        instances: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [ClassicLinkInstance].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instances: <p>Information about one or more linked EC2-Classic instances.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(instances: [ClassicLinkInstance]?, nextToken: String?) {
self.instances = instances
self.nextToken = nextToken
  }
}

/**
<p>Describes a set of DHCP options.</p>
 */
public struct DhcpOptions: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the set of DHCP options.</p>
 */
  public let dhcpOptionsId: String?
/**
<p>One or more DHCP options in the set.</p>
 */
  public let dhcpConfigurations: [DhcpConfiguration]?
/**
<p>Any tags assigned to the DHCP options set.</p>
 */
  public let tags: [Tag]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dhcpOptionsId != nil { body["dhcpOptionsId"] = dhcpOptionsId! }
    if dhcpConfigurations != nil { body["dhcpConfigurationSet"] = dhcpConfigurations! }
    if tags != nil { body["tagSet"] = tags! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DhcpOptions {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DhcpOptions(
        dhcpOptionsId: jsonDict["dhcpOptionsId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      dhcpConfigurations: jsonDict["dhcpConfigurationSet"].flatMap { ($0 is NSNull) ? nil : [DhcpConfiguration].deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - dhcpOptionsId: <p>The ID of the set of DHCP options.</p>
      - dhcpConfigurations: <p>One or more DHCP options in the set.</p>
      - tags: <p>Any tags assigned to the DHCP options set.</p>
 */
  public init(dhcpOptionsId: String?, dhcpConfigurations: [DhcpConfiguration]?, tags: [Tag]?) {
self.dhcpOptionsId = dhcpOptionsId
self.dhcpConfigurations = dhcpConfigurations
self.tags = tags
  }
}


/**
<p>Contains the parameters for CopyImage.</p>
 */
public struct CopyImageRequest: RestJsonSerializable {
/**
<p>A description for the new AMI in the destination region.</p>
 */
  public let description: String?
/**
<p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let clientToken: String?
/**
<p>The name of the region that contains the AMI to copy.</p>
 */
  public let sourceRegion: String
/**
<p>The name of the new AMI in the destination region.</p>
 */
  public let name: String
/**
<p>Specifies whether the destination snapshots of the copied image should be encrypted. The default CMK for EBS is used unless a non-default AWS Key Management Service (AWS KMS) CMK is specified with <code>KmsKeyId</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let encrypted: Bool?
/**
<p>The ID of the AMI to copy.</p>
 */
  public let sourceImageId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when encrypting the snapshots of an image during a copy operation. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the <code>arn:aws:kms</code> namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. The specified CMK must exist in the region that the snapshot is being copied to. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set.</p>
 */
  public let kmsKeyId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if description != nil { body["Description"] = description! }
    if clientToken != nil { body["ClientToken"] = clientToken! }
    body["SourceRegion"] = sourceRegion
    body["Name"] = name
    if encrypted != nil { body["encrypted"] = encrypted! }
    body["SourceImageId"] = sourceImageId
    if dryRun != nil { body["dryRun"] = dryRun! }
    if kmsKeyId != nil { body["kmsKeyId"] = kmsKeyId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - description: <p>A description for the new AMI in the destination region.</p>
      - clientToken: <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - sourceRegion: <p>The name of the region that contains the AMI to copy.</p>
      - name: <p>The name of the new AMI in the destination region.</p>
      - encrypted: <p>Specifies whether the destination snapshots of the copied image should be encrypted. The default CMK for EBS is used unless a non-default AWS Key Management Service (AWS KMS) CMK is specified with <code>KmsKeyId</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - sourceImageId: <p>The ID of the AMI to copy.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - kmsKeyId: <p>The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when encrypting the snapshots of an image during a copy operation. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the <code>arn:aws:kms</code> namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. The specified CMK must exist in the region that the snapshot is being copied to. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set.</p>
 */
  public init(description: String?, clientToken: String?, sourceRegion: String, name: String, encrypted: Bool?, sourceImageId: String, dryRun: Bool?, kmsKeyId: String?) {
self.description = description
self.clientToken = clientToken
self.sourceRegion = sourceRegion
self.name = name
self.encrypted = encrypted
self.sourceImageId = sourceImageId
self.dryRun = dryRun
self.kmsKeyId = kmsKeyId
  }
}

/**
<p>Contains the parameters for DescribeNetworkAcls.</p>
 */
public struct DescribeNetworkAclsRequest: RestJsonSerializable {
/**
<p>One or more network ACL IDs.</p> <p>Default: Describes all your network ACLs.</p>
 */
  public let networkAclIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li> <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li> <li> <p> <code>entry.cidr</code> - The CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.egress</code> - Indicates whether the entry applies to egress traffic.</p> </li> <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li> <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li> <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li> <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li> <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li> <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the ACL's set of entries.</p> </li> <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkAclIds != nil { body["NetworkAclId"] = networkAclIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - networkAclIds: <p>One or more network ACL IDs.</p> <p>Default: Describes all your network ACLs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li> <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li> <li> <p> <code>entry.cidr</code> - The CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.egress</code> - Indicates whether the entry applies to egress traffic.</p> </li> <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li> <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li> <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li> <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li> <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li> <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the ACL's set of entries.</p> </li> <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(networkAclIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.networkAclIds = networkAclIds
self.filters = filters
self.dryRun = dryRun
  }
}

enum Listingstatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `active` = "active"
  case `pending` = "pending"
  case `cancelled` = "cancelled"
  case `closed` = "closed"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Listingstatus {
    guard case let .json(json) = body else { fatalError() }
    return Listingstatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Operationtype: String, RestJsonDeserializable, RestJsonSerializable {
  case `add` = "add"
  case `remove` = "remove"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Operationtype {
    guard case let .json(json) = body else { fatalError() }
    return Operationtype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the output of TerminateInstances.</p>
 */
public struct TerminateInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more terminated instances.</p>
 */
  public let terminatingInstances: [InstanceStateChange]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if terminatingInstances != nil { body["instancesSet"] = terminatingInstances! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> TerminateInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return TerminateInstancesResult(
        terminatingInstances: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [InstanceStateChange].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - terminatingInstances: <p>Information about one or more terminated instances.</p>
 */
  public init(terminatingInstances: [InstanceStateChange]?) {
self.terminatingInstances = terminatingInstances
  }
}

enum Routestate: String, RestJsonDeserializable, RestJsonSerializable {
  case `active` = "active"
  case `blackhole` = "blackhole"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Routestate {
    guard case let .json(json) = body else { fatalError() }
    return Routestate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DescribeImportSnapshotTasks.</p>
 */
public struct DescribeImportSnapshotTasksRequest: RestJsonSerializable {
/**
<p>One or more filters.</p>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>A list of import snapshot task IDs.</p>
 */
  public let importTaskIds: [String]?
/**
<p>A token that indicates the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filters"] = filters! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if importTaskIds != nil { body["ImportTaskId"] = importTaskIds! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - importTaskIds: <p>A list of import snapshot task IDs.</p>
      - nextToken: <p>A token that indicates the next page of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, importTaskIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.importTaskIds = importTaskIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for CreateVolume.</p>
 */
public struct CreateVolumeRequest: RestJsonSerializable {
/**
<p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> <p>Default: <code>standard</code> </p>
 */
  public let volumeType: Volumetype?
/**
<p>The size of the volume, in GiBs.</p> <p>Constraints: 1-16384 for <code>gp2</code>, 4-16384 for <code>io1</code>, 500-16384 for <code>st1</code>, 500-16384 for <code>sc1</code>, and 1-1024 for <code>standard</code>. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
 */
  public let size: Int?
/**
<p>Specifies whether the volume should be encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or vice versa. If your AMI uses encrypted volumes, you can only launch it on supported instance types. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let encrypted: Bool?
/**
<p>The snapshot from which to create the volume.</p>
 */
  public let snapshotId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Only valid for Provisioned IOPS SSD volumes. The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 30 IOPS/GiB.</p> <p>Constraint: Range is 100 to 20000 for Provisioned IOPS SSD volumes </p>
 */
  public let iops: Int?
/**
<p>The Availability Zone in which to create the volume. Use <a>DescribeAvailabilityZones</a> to list the Availability Zones that are currently available to you.</p>
 */
  public let availabilityZone: String
/**
<p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the <code>arn:aws:kms</code> namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set.</p>
 */
  public let kmsKeyId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if volumeType != nil { body["VolumeType"] = volumeType! }
    if size != nil { body["Size"] = size! }
    if encrypted != nil { body["encrypted"] = encrypted! }
    if snapshotId != nil { body["SnapshotId"] = snapshotId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if iops != nil { body["Iops"] = iops! }
    body["AvailabilityZone"] = availabilityZone
    if kmsKeyId != nil { body["KmsKeyId"] = kmsKeyId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - volumeType: <p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> <p>Default: <code>standard</code> </p>
      - size: <p>The size of the volume, in GiBs.</p> <p>Constraints: 1-16384 for <code>gp2</code>, 4-16384 for <code>io1</code>, 500-16384 for <code>st1</code>, 500-16384 for <code>sc1</code>, and 1-1024 for <code>standard</code>. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
      - encrypted: <p>Specifies whether the volume should be encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or vice versa. If your AMI uses encrypted volumes, you can only launch it on supported instance types. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - snapshotId: <p>The snapshot from which to create the volume.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - iops: <p>Only valid for Provisioned IOPS SSD volumes. The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 30 IOPS/GiB.</p> <p>Constraint: Range is 100 to 20000 for Provisioned IOPS SSD volumes </p>
      - availabilityZone: <p>The Availability Zone in which to create the volume. Use <a>DescribeAvailabilityZones</a> to list the Availability Zones that are currently available to you.</p>
      - kmsKeyId: <p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the <code>arn:aws:kms</code> namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set.</p>
 */
  public init(volumeType: Volumetype?, size: Int?, encrypted: Bool?, snapshotId: String?, dryRun: Bool?, iops: Int?, availabilityZone: String, kmsKeyId: String?) {
self.volumeType = volumeType
self.size = size
self.encrypted = encrypted
self.snapshotId = snapshotId
self.dryRun = dryRun
self.iops = iops
self.availabilityZone = availabilityZone
self.kmsKeyId = kmsKeyId
  }
}


/**
<p>Contains the output of AllocateAddress.</p>
 */
public struct AllocateAddressResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Elastic IP address.</p>
 */
  public let publicIp: String?
/**
<p>Indicates whether this Elastic IP address is for use with instances in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>
 */
  public let domain: Domaintype?
/**
<p>[EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
 */
  public let allocationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if publicIp != nil { body["publicIp"] = publicIp! }
    if domain != nil { body["domain"] = domain! }
    if allocationId != nil { body["allocationId"] = allocationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AllocateAddressResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AllocateAddressResult(
        publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      domain: jsonDict["domain"].flatMap { ($0 is NSNull) ? nil : Domaintype.deserialize(response: response, body: .json($0)) },
      allocationId: jsonDict["allocationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - publicIp: <p>The Elastic IP address.</p>
      - domain: <p>Indicates whether this Elastic IP address is for use with instances in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>
      - allocationId: <p>[EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
 */
  public init(publicIp: String?, domain: Domaintype?, allocationId: String?) {
self.publicIp = publicIp
self.domain = domain
self.allocationId = allocationId
  }
}

/**
<p>Contains the parameters for AssociateDhcpOptions.</p>
 */
public struct AssociateDhcpOptionsRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The ID of the DHCP options set, or <code>default</code> to associate no DHCP options with the VPC.</p>
 */
  public let dhcpOptionsId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpcId"] = vpcId
    body["DhcpOptionsId"] = dhcpOptionsId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - dhcpOptionsId: <p>The ID of the DHCP options set, or <code>default</code> to associate no DHCP options with the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, dhcpOptionsId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.dhcpOptionsId = dhcpOptionsId
self.dryRun = dryRun
  }
}

/**
<p>Describes the S3 bucket for the disk image.</p>
 */
public struct UserBucket: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the S3 bucket where the disk image is located.</p>
 */
  public let s3Bucket: String?
/**
<p>The file name of the disk image.</p>
 */
  public let s3Key: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if s3Bucket != nil { body["S3Bucket"] = s3Bucket! }
    if s3Key != nil { body["S3Key"] = s3Key! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UserBucket {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UserBucket(
        s3Bucket: jsonDict["S3Bucket"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      s3Key: jsonDict["S3Key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - s3Bucket: <p>The name of the S3 bucket where the disk image is located.</p>
      - s3Key: <p>The file name of the disk image.</p>
 */
  public init(s3Bucket: String?, s3Key: String?) {
self.s3Bucket = s3Bucket
self.s3Key = s3Key
  }
}

/**
<p>Contains the parameters for CreateSnapshot.</p>
 */
public struct CreateSnapshotRequest: RestJsonSerializable {
/**
<p>A description for the snapshot.</p>
 */
  public let description: String?
/**
<p>The ID of the EBS volume.</p>
 */
  public let volumeId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if description != nil { body["Description"] = description! }
    body["VolumeId"] = volumeId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - description: <p>A description for the snapshot.</p>
      - volumeId: <p>The ID of the EBS volume.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(description: String?, volumeId: String, dryRun: Bool?) {
self.description = description
self.volumeId = volumeId
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for DescribeIdFormat.</p>
 */
public struct DescribeIdFormatRequest: RestJsonSerializable {
/**
<p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
 */
  public let resource: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if resource != nil { body["Resource"] = resource! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - resource: <p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
 */
  public init(resource: String?) {
self.resource = resource
  }
}


public struct DescribeHostReservationsRequest: RestJsonSerializable {
/**
<p>One or more host reservation IDs.</p>
 */
  public let hostReservationIdSet: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family (e.g., <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>No Upfront</code> | <code>Partial Upfront</code> | <code>All Upfront</code>).</p> </li> <li> <p> <code>state</code> - The state of the reservation (<code>payment-pending</code> | <code>payment-failed</code> | <code>active</code> | <code>retired</code>).</p> </li> </ul>
 */
  public let filter: [Filter]?
/**
<p>The token to use to retrieve the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500; if <code>maxResults</code> is given a larger value than 500, you will receive an error.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if hostReservationIdSet != nil { body["HostReservationIdSet"] = hostReservationIdSet! }
    if filter != nil { body["Filter"] = filter! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - hostReservationIdSet: <p>One or more host reservation IDs.</p>
      - filter: <p>One or more filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family (e.g., <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>No Upfront</code> | <code>Partial Upfront</code> | <code>All Upfront</code>).</p> </li> <li> <p> <code>state</code> - The state of the reservation (<code>payment-pending</code> | <code>payment-failed</code> | <code>active</code> | <code>retired</code>).</p> </li> </ul>
      - nextToken: <p>The token to use to retrieve the next page of results.</p>
      - maxResults: <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500; if <code>maxResults</code> is given a larger value than 500, you will receive an error.</p>
 */
  public init(hostReservationIdSet: [String]?, filter: [Filter]?, nextToken: String?, maxResults: Int?) {
self.hostReservationIdSet = hostReservationIdSet
self.filter = filter
self.nextToken = nextToken
self.maxResults = maxResults
  }
}


public struct GetHostReservationPurchasePreviewRequest: RestJsonSerializable {
/**
<p>The ID/s of the Dedicated Host/s that the reservation will be associated with.</p>
 */
  public let hostIdSet: [String]
/**
<p>The offering ID of the reservation.</p>
 */
  public let offeringId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["HostIdSet"] = hostIdSet
    body["OfferingId"] = offeringId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - hostIdSet: <p>The ID/s of the Dedicated Host/s that the reservation will be associated with.</p>
      - offeringId: <p>The offering ID of the reservation.</p>
 */
  public init(hostIdSet: [String], offeringId: String) {
self.hostIdSet = hostIdSet
self.offeringId = offeringId
  }
}

/**
<p>Describes a running instance in a Spot fleet.</p>
 */
public struct ActiveInstance: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The instance type.</p>
 */
  public let instanceType: String?
/**
<p>The ID of the Spot instance request.</p>
 */
  public let spotInstanceRequestId: String?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceType != nil { body["instanceType"] = instanceType! }
    if spotInstanceRequestId != nil { body["spotInstanceRequestId"] = spotInstanceRequestId! }
    if instanceId != nil { body["instanceId"] = instanceId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ActiveInstance {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ActiveInstance(
        instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotInstanceRequestId: jsonDict["spotInstanceRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceType: <p>The instance type.</p>
      - spotInstanceRequestId: <p>The ID of the Spot instance request.</p>
      - instanceId: <p>The ID of the instance.</p>
 */
  public init(instanceType: String?, spotInstanceRequestId: String?, instanceId: String?) {
self.instanceType = instanceType
self.spotInstanceRequestId = spotInstanceRequestId
self.instanceId = instanceId
  }
}

/**
<p>Contains the output of DescribeMovingAddresses.</p>
 */
public struct DescribeMovingAddressesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The status for each Elastic IP address.</p>
 */
  public let movingAddressStatuses: [MovingAddressStatus]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if movingAddressStatuses != nil { body["movingAddressStatusSet"] = movingAddressStatuses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeMovingAddressesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeMovingAddressesResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      movingAddressStatuses: jsonDict["movingAddressStatusSet"].flatMap { ($0 is NSNull) ? nil : [MovingAddressStatus].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - movingAddressStatuses: <p>The status for each Elastic IP address.</p>
 */
  public init(nextToken: String?, movingAddressStatuses: [MovingAddressStatus]?) {
self.nextToken = nextToken
self.movingAddressStatuses = movingAddressStatuses
  }
}

/**
<p>Describes the format and location for an instance export task.</p>
 */
public struct ExportToS3Task: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The encryption key for your S3 bucket.</p>
 */
  public let s3Key: String?
/**
<p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.</p>
 */
  public let containerFormat: Containerformat?
/**
<p>The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.</p>
 */
  public let s3Bucket: String?
/**
<p>The format for the exported image.</p>
 */
  public let diskImageFormat: Diskimageformat?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if s3Key != nil { body["s3Key"] = s3Key! }
    if containerFormat != nil { body["containerFormat"] = containerFormat! }
    if s3Bucket != nil { body["s3Bucket"] = s3Bucket! }
    if diskImageFormat != nil { body["diskImageFormat"] = diskImageFormat! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ExportToS3Task {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ExportToS3Task(
        s3Key: jsonDict["s3Key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      containerFormat: jsonDict["containerFormat"].flatMap { ($0 is NSNull) ? nil : Containerformat.deserialize(response: response, body: .json($0)) },
      s3Bucket: jsonDict["s3Bucket"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      diskImageFormat: jsonDict["diskImageFormat"].flatMap { ($0 is NSNull) ? nil : Diskimageformat.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - s3Key: <p>The encryption key for your S3 bucket.</p>
      - containerFormat: <p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.</p>
      - s3Bucket: <p>The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.</p>
      - diskImageFormat: <p>The format for the exported image.</p>
 */
  public init(s3Key: String?, containerFormat: Containerformat?, s3Bucket: String?, diskImageFormat: Diskimageformat?) {
self.s3Key = s3Key
self.containerFormat = containerFormat
self.s3Bucket = s3Bucket
self.diskImageFormat = diskImageFormat
  }
}

enum Vpcattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `enableDnsSupport` = "enableDnsSupport"
  case `enableDnsHostnames` = "enableDnsHostnames"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Vpcattributename {
    guard case let .json(json) = body else { fatalError() }
    return Vpcattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Describes an attachment between a virtual private gateway and a VPC.</p>
 */
public struct VpcAttachment: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>The current state of the attachment.</p>
 */
  public let state: Attachmentstatus?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["vpcId"] = vpcId! }
    if state != nil { body["state"] = state! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcAttachment {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcAttachment(
        vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Attachmentstatus.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - state: <p>The current state of the attachment.</p>
 */
  public init(vpcId: String?, state: Attachmentstatus?) {
self.vpcId = vpcId
self.state = state
  }
}

/**
<p>Contains the output of DisableVpcClassicLinkDnsSupport.</p>
 */
public struct DisableVpcClassicLinkDnsSupportResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DisableVpcClassicLinkDnsSupportResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DisableVpcClassicLinkDnsSupportResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

/**
<p>Contains the parameters for CreateTags.</p>
 */
public struct CreateTagsRequest: RestJsonSerializable {
/**
<p>The IDs of one or more resources to tag. For example, ami-1a2b3c4d.</p>
 */
  public let resources: [String]
/**
<p>One or more tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. </p>
 */
  public let tags: [Tag]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ResourceId"] = resources
    body["Tag"] = tags
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - resources: <p>The IDs of one or more resources to tag. For example, ami-1a2b3c4d.</p>
      - tags: <p>One or more tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. </p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(resources: [String], tags: [Tag], dryRun: Bool?) {
self.resources = resources
self.tags = tags
self.dryRun = dryRun
  }
}


/**
<p>Describes whether monitoring is enabled for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesMonitoring: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether monitoring is enabled.</p>
 */
  public let enabled: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if enabled != nil { body["Enabled"] = enabled! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesMonitoring {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesMonitoring(
        enabled: jsonDict["Enabled"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - enabled: <p>Indicates whether monitoring is enabled.</p>
 */
  public init(enabled: Bool?) {
self.enabled = enabled
  }
}

/**
<p>Contains the parameters for CancelReservedInstancesListing.</p>
 */
public struct CancelReservedInstancesListingRequest: RestJsonSerializable {
/**
<p>The ID of the Reserved Instance listing.</p>
 */
  public let reservedInstancesListingId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["reservedInstancesListingId"] = reservedInstancesListingId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstancesListingId: <p>The ID of the Reserved Instance listing.</p>
 */
  public init(reservedInstancesListingId: String) {
self.reservedInstancesListingId = reservedInstancesListingId
  }
}

/**
<p>Contains the output for CreateInstanceExportTask.</p>
 */
public struct CreateInstanceExportTaskResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the instance export task.</p>
 */
  public let exportTask: ExportTask?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if exportTask != nil { body["exportTask"] = exportTask! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateInstanceExportTaskResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateInstanceExportTaskResult(
        exportTask: jsonDict["exportTask"].flatMap { ($0 is NSNull) ? nil : ExportTask.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - exportTask: <p>Information about the instance export task.</p>
 */
  public init(exportTask: ExportTask?) {
self.exportTask = exportTask
  }
}

/**
<p>Describes a Spot fleet request that was not successfully canceled.</p>
 */
public struct CancelSpotFleetRequestsErrorItem: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String
/**
<p>The error.</p>
 */
  public let ec2Error: CancelSpotFleetRequestsError

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["spotFleetRequestId"] = spotFleetRequestId
    body["error"] = ec2Error
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelSpotFleetRequestsErrorItem {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelSpotFleetRequestsErrorItem(
        spotFleetRequestId: jsonDict["spotFleetRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      ec2Error: jsonDict["error"].flatMap { ($0 is NSNull) ? nil : CancelSpotFleetRequestsError.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
      - ec2Error: <p>The error.</p>
 */
  public init(spotFleetRequestId: String, ec2Error: CancelSpotFleetRequestsError) {
self.spotFleetRequestId = spotFleetRequestId
self.ec2Error = ec2Error
  }
}

/**
<p>Contains the parameters for CreateNetworkInterface.</p>
 */
public struct CreateNetworkInterfaceRequest: RestJsonSerializable {
/**
<p>The primary private IP address of the network interface. If you don't specify an IP address, Amazon EC2 selects one for you from the subnet range. If you specify an IP address, you cannot indicate any IP addresses specified in <code>privateIpAddresses</code> as primary (only one IP address can be designated as primary).</p>
 */
  public let privateIpAddress: String?
/**
<p>The ID of the subnet to associate with the network interface.</p>
 */
  public let subnetId: String
/**
<p>The number of secondary private IP addresses to assign to a network interface. When you specify a number of secondary IP addresses, Amazon EC2 selects these IP addresses within the subnet range. You can't specify this option and specify more than one private IP address using <code>privateIpAddresses</code>.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">Private IP Addresses Per ENI Per Instance Type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let secondaryPrivateIpAddressCount: Int?
/**
<p>A description for the network interface.</p>
 */
  public let description: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The IDs of one or more security groups.</p>
 */
  public let groups: [String]?
/**
<p>One or more private IP addresses.</p>
 */
  public let privateIpAddresses: [PrivateIpAddressSpecification]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
    body["subnetId"] = subnetId
    if secondaryPrivateIpAddressCount != nil { body["secondaryPrivateIpAddressCount"] = secondaryPrivateIpAddressCount! }
    if description != nil { body["description"] = description! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if groups != nil { body["SecurityGroupId"] = groups! }
    if privateIpAddresses != nil { body["privateIpAddresses"] = privateIpAddresses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - privateIpAddress: <p>The primary private IP address of the network interface. If you don't specify an IP address, Amazon EC2 selects one for you from the subnet range. If you specify an IP address, you cannot indicate any IP addresses specified in <code>privateIpAddresses</code> as primary (only one IP address can be designated as primary).</p>
      - subnetId: <p>The ID of the subnet to associate with the network interface.</p>
      - secondaryPrivateIpAddressCount: <p>The number of secondary private IP addresses to assign to a network interface. When you specify a number of secondary IP addresses, Amazon EC2 selects these IP addresses within the subnet range. You can't specify this option and specify more than one private IP address using <code>privateIpAddresses</code>.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">Private IP Addresses Per ENI Per Instance Type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - description: <p>A description for the network interface.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - groups: <p>The IDs of one or more security groups.</p>
      - privateIpAddresses: <p>One or more private IP addresses.</p>
 */
  public init(privateIpAddress: String?, subnetId: String, secondaryPrivateIpAddressCount: Int?, description: String?, dryRun: Bool?, groups: [String]?, privateIpAddresses: [PrivateIpAddressSpecification]?) {
self.privateIpAddress = privateIpAddress
self.subnetId = subnetId
self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
self.description = description
self.dryRun = dryRun
self.groups = groups
self.privateIpAddresses = privateIpAddresses
  }
}

/**
<p>Contains the parameters for DescribeSnapshots.</p>
 */
public struct DescribeSnapshotsRequest: RestJsonSerializable {
/**
<p>One or more AWS accounts IDs that can create volumes from the snapshot.</p>
 */
  public let restorableByUserIds: [String]?
/**
<p>One or more snapshot IDs.</p> <p>Default: Describes snapshots for which you have launch permissions.</p>
 */
  public let snapshotIds: [String]?
/**
<p>Returns the snapshots owned by the specified owner. Multiple owners can be specified.</p>
 */
  public let ownerIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>description</code> - A description of the snapshot.</p> </li> <li> <p> <code>owner-alias</code> - Value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM consolew.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>progress</code> - The progress of the snapshot, as a percentage (for example, 80%).</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot ID.</p> </li> <li> <p> <code>start-time</code> - The time stamp when the snapshot was initiated.</p> </li> <li> <p> <code>status</code> - The status of the snapshot (<code>pending</code> | <code>completed</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>volume-id</code> - The ID of the volume the snapshot is for.</p> </li> <li> <p> <code>volume-size</code> - The size of the volume, in GiB.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if restorableByUserIds != nil { body["RestorableBy"] = restorableByUserIds! }
    if snapshotIds != nil { body["SnapshotId"] = snapshotIds! }
    if ownerIds != nil { body["Owner"] = ownerIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - restorableByUserIds: <p>One or more AWS accounts IDs that can create volumes from the snapshot.</p>
      - snapshotIds: <p>One or more snapshot IDs.</p> <p>Default: Describes snapshots for which you have launch permissions.</p>
      - ownerIds: <p>Returns the snapshots owned by the specified owner. Multiple owners can be specified.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>description</code> - A description of the snapshot.</p> </li> <li> <p> <code>owner-alias</code> - Value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM consolew.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>progress</code> - The progress of the snapshot, as a percentage (for example, 80%).</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot ID.</p> </li> <li> <p> <code>start-time</code> - The time stamp when the snapshot was initiated.</p> </li> <li> <p> <code>status</code> - The status of the snapshot (<code>pending</code> | <code>completed</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>volume-id</code> - The ID of the volume the snapshot is for.</p> </li> <li> <p> <code>volume-size</code> - The size of the volume, in GiB.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
      - maxResults: <p>The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.</p>
 */
  public init(restorableByUserIds: [String]?, snapshotIds: [String]?, ownerIds: [String]?, filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.restorableByUserIds = restorableByUserIds
self.snapshotIds = snapshotIds
self.ownerIds = ownerIds
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for ModifyReservedInstances.</p>
 */
public struct ModifyReservedInstancesRequest: RestJsonSerializable {
/**
<p>The IDs of the Reserved Instances to modify.</p>
 */
  public let reservedInstancesIds: [String]
/**
<p>The configuration settings for the Reserved Instances to modify.</p>
 */
  public let targetConfigurations: [ReservedInstancesConfiguration]
/**
<p>A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ReservedInstancesId"] = reservedInstancesIds
    body["ReservedInstancesConfigurationSetItemType"] = targetConfigurations
    if clientToken != nil { body["clientToken"] = clientToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstancesIds: <p>The IDs of the Reserved Instances to modify.</p>
      - targetConfigurations: <p>The configuration settings for the Reserved Instances to modify.</p>
      - clientToken: <p>A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public init(reservedInstancesIds: [String], targetConfigurations: [ReservedInstancesConfiguration], clientToken: String?) {
self.reservedInstancesIds = reservedInstancesIds
self.targetConfigurations = targetConfigurations
self.clientToken = clientToken
  }
}

/**
<p>Contains the parameters for DescribeVolumes.</p>
 */
public struct DescribeVolumesRequest: RestJsonSerializable {
/**
<p>One or more volume IDs.</p>
 */
  public let volumeIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>attachment.attach-time</code> - The time stamp when the attachment initiated.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Whether the volume is deleted on instance termination.</p> </li> <li> <p> <code>attachment.device</code> - The device name that is exposed to the instance (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance the volume is attached to.</p> </li> <li> <p> <code>attachment.status</code> - The attachment state (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone in which the volume was created.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the volume was created.</p> </li> <li> <p> <code>encrypted</code> - The encryption status of the volume.</p> </li> <li> <p> <code>size</code> - The size of the volume, in GiB.</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot from which the volume was created.</p> </li> <li> <p> <code>status</code> - The status of the volume (<code>creating</code> | <code>available</code> | <code>in-use</code> | <code>deleting</code> | <code>deleted</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>volume-id</code> - The volume ID.</p> </li> <li> <p> <code>volume-type</code> - The Amazon EBS volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated output. When this parameter is used, <code>DescribeVolumes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if volumeIds != nil { body["VolumeId"] = volumeIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - volumeIds: <p>One or more volume IDs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>attachment.attach-time</code> - The time stamp when the attachment initiated.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Whether the volume is deleted on instance termination.</p> </li> <li> <p> <code>attachment.device</code> - The device name that is exposed to the instance (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance the volume is attached to.</p> </li> <li> <p> <code>attachment.status</code> - The attachment state (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone in which the volume was created.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the volume was created.</p> </li> <li> <p> <code>encrypted</code> - The encryption status of the volume.</p> </li> <li> <p> <code>size</code> - The size of the volume, in GiB.</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot from which the volume was created.</p> </li> <li> <p> <code>status</code> - The status of the volume (<code>creating</code> | <code>available</code> | <code>in-use</code> | <code>deleting</code> | <code>deleted</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>volume-id</code> - The volume ID.</p> </li> <li> <p> <code>volume-type</code> - The Amazon EBS volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
      - maxResults: <p>The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated output. When this parameter is used, <code>DescribeVolumes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
 */
  public init(volumeIds: [String]?, filters: [Filter]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.volumeIds = volumeIds
self.filters = filters
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for DeleteVpnGateway.</p>
 */
public struct DeleteVpnGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let vpnGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpnGatewayId"] = vpnGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpnGatewayId: <p>The ID of the virtual private gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpnGatewayId: String, dryRun: Bool?) {
self.vpnGatewayId = vpnGatewayId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output for DescribeReservedInstances.</p>
 */
public struct DescribeReservedInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A list of Reserved Instances.</p>
 */
  public let reservedInstances: [ReservedInstances]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstances != nil { body["reservedInstancesSet"] = reservedInstances! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeReservedInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeReservedInstancesResult(
        reservedInstances: jsonDict["reservedInstancesSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstances].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstances: <p>A list of Reserved Instances.</p>
 */
  public init(reservedInstances: [ReservedInstances]?) {
self.reservedInstances = reservedInstances
  }
}

enum Volumestatusname: String, RestJsonDeserializable, RestJsonSerializable {
  case `ioenabled` = "io-enabled"
  case `ioperformance` = "io-performance"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volumestatusname {
    guard case let .json(json) = body else { fatalError() }
    return Volumestatusname(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the parameters for EnableVpcClassicLinkDnsSupport.</p>
 */
public struct EnableVpcClassicLinkDnsSupportRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["VpcId"] = vpcId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
 */
  public init(vpcId: String?) {
self.vpcId = vpcId
  }
}

/**
<p>Contains the parameters for DescribeNetworkInterfaceAttribute.</p>
 */
public struct DescribeNetworkInterfaceAttributeRequest: RestJsonSerializable {
/**
<p>The attribute of the network interface.</p>
 */
  public let attribute: Networkinterfaceattribute?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attribute != nil { body["attribute"] = attribute! }
    body["networkInterfaceId"] = networkInterfaceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - attribute: <p>The attribute of the network interface.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(attribute: Networkinterfaceattribute?, networkInterfaceId: String, dryRun: Bool?) {
self.attribute = attribute
self.networkInterfaceId = networkInterfaceId
self.dryRun = dryRun
  }
}

/**
<p>Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.</p>
 */
public struct SlotDateTimeRangeRequest: RestJsonSerializable {
/**
<p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>
 */
  public let earliestTime: Date
/**
<p>The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.</p>
 */
  public let latestTime: Date

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["EarliestTime"] = earliestTime
    body["LatestTime"] = latestTime
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - earliestTime: <p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>
      - latestTime: <p>The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.</p>
 */
  public init(earliestTime: Date, latestTime: Date) {
self.earliestTime = earliestTime
self.latestTime = latestTime
  }
}

/**
<p>Contains the parameters for DeleteVpc.</p>
 */
public struct DeleteVpcRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpcId"] = vpcId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.dryRun = dryRun
  }
}

/**
<p>Describes a block device mapping entry.</p>
 */
public struct InstanceBlockDeviceMappingSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>suppress the specified device included in the block device mapping.</p>
 */
  public let noDevice: String?
/**
<p>The virtual device name.</p>
 */
  public let virtualName: String?
/**
<p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
 */
  public let deviceName: String?
/**
<p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
 */
  public let ebs: EbsInstanceBlockDeviceSpecification?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if noDevice != nil { body["noDevice"] = noDevice! }
    if virtualName != nil { body["virtualName"] = virtualName! }
    if deviceName != nil { body["deviceName"] = deviceName! }
    if ebs != nil { body["ebs"] = ebs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceBlockDeviceMappingSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceBlockDeviceMappingSpecification(
        noDevice: jsonDict["noDevice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      virtualName: jsonDict["virtualName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deviceName: jsonDict["deviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebs: jsonDict["ebs"].flatMap { ($0 is NSNull) ? nil : EbsInstanceBlockDeviceSpecification.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - noDevice: <p>suppress the specified device included in the block device mapping.</p>
      - virtualName: <p>The virtual device name.</p>
      - deviceName: <p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
      - ebs: <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
 */
  public init(noDevice: String?, virtualName: String?, deviceName: String?, ebs: EbsInstanceBlockDeviceSpecification?) {
self.noDevice = noDevice
self.virtualName = virtualName
self.deviceName = deviceName
self.ebs = ebs
  }
}

/**
<p>Describes the monitoring information of the instance.</p>
 */
public struct InstanceMonitoring: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The monitoring information.</p>
 */
  public let monitoring: Monitoring?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if monitoring != nil { body["monitoring"] = monitoring! }
    if instanceId != nil { body["instanceId"] = instanceId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceMonitoring {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceMonitoring(
        monitoring: jsonDict["monitoring"].flatMap { ($0 is NSNull) ? nil : Monitoring.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - monitoring: <p>The monitoring information.</p>
      - instanceId: <p>The ID of the instance.</p>
 */
  public init(monitoring: Monitoring?, instanceId: String?) {
self.monitoring = monitoring
self.instanceId = instanceId
  }
}


/**
<p>Contains the parameters for DescribeVpcEndpoints.</p>
 */
public struct DescribeVpcEndpointsRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the AWS service.</p> </li> <li> <p> <code>vpc-id</code>: The ID of the VPC in which the endpoint resides.</p> </li> <li> <p> <code>vpc-endpoint-id</code>: The ID of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code>: The state of the endpoint. (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>)</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>One or more endpoint IDs.</p>
 */
  public let vpcEndpointIds: [String]?
/**
<p>The token for the next set of items to return. (You received this token from a prior call.)</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if vpcEndpointIds != nil { body["VpcEndpointId"] = vpcEndpointIds! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the AWS service.</p> </li> <li> <p> <code>vpc-id</code>: The ID of the VPC in which the endpoint resides.</p> </li> <li> <p> <code>vpc-endpoint-id</code>: The ID of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code>: The state of the endpoint. (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>)</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcEndpointIds: <p>One or more endpoint IDs.</p>
      - nextToken: <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
      - maxResults: <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, vpcEndpointIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.vpcEndpointIds = vpcEndpointIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

enum Volumestatusinfostatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `ok` = "ok"
  case `impaired` = "impaired"
  case `insufficientdata` = "insufficient-data"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volumestatusinfostatus {
    guard case let .json(json) = body else { fatalError() }
    return Volumestatusinfostatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of EnableVpcClassicLink.</p>
 */
public struct EnableVpcClassicLinkResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> EnableVpcClassicLinkResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return EnableVpcClassicLinkResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

/**
<p>Describes a virtual private gateway propagating route.</p>
 */
public struct PropagatingVgw: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the virtual private gateway (VGW).</p>
 */
  public let gatewayId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if gatewayId != nil { body["gatewayId"] = gatewayId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PropagatingVgw {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PropagatingVgw(
        gatewayId: jsonDict["gatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - gatewayId: <p>The ID of the virtual private gateway (VGW).</p>
 */
  public init(gatewayId: String?) {
self.gatewayId = gatewayId
  }
}

/**
<p>Contains the output of DescribeFlowLogs.</p>
 */
public struct DescribeFlowLogsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>Information about the flow logs.</p>
 */
  public let flowLogs: [FlowLog]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if flowLogs != nil { body["flowLogSet"] = flowLogs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeFlowLogsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeFlowLogsResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      flowLogs: jsonDict["flowLogSet"].flatMap { ($0 is NSNull) ? nil : [FlowLog].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - flowLogs: <p>Information about the flow logs.</p>
 */
  public init(nextToken: String?, flowLogs: [FlowLog]?) {
self.nextToken = nextToken
self.flowLogs = flowLogs
  }
}

/**
<p>Contains the output of CreateVpnConnection.</p>
 */
public struct CreateVpnConnectionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPN connection.</p>
 */
  public let vpnConnection: VpnConnection?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnConnection != nil { body["vpnConnection"] = vpnConnection! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVpnConnectionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVpnConnectionResult(
        vpnConnection: jsonDict["vpnConnection"].flatMap { ($0 is NSNull) ? nil : VpnConnection.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpnConnection: <p>Information about the VPN connection.</p>
 */
  public init(vpnConnection: VpnConnection?) {
self.vpnConnection = vpnConnection
  }
}

/**
<p>Contains the output of StartInstances.</p>
 */
public struct StartInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more started instances.</p>
 */
  public let startingInstances: [InstanceStateChange]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if startingInstances != nil { body["instancesSet"] = startingInstances! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> StartInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return StartInstancesResult(
        startingInstances: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [InstanceStateChange].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - startingInstances: <p>Information about one or more started instances.</p>
 */
  public init(startingInstances: [InstanceStateChange]?) {
self.startingInstances = startingInstances
  }
}

/**
<p>Contains the parameters for RevokeSecurityGroupEgress.</p>
 */
public struct RevokeSecurityGroupEgressRequest: RestJsonSerializable {
/**
<p>The IP protocol name or number. We recommend that you specify the protocol in a set of IP permissions instead.</p>
 */
  public let ipProtocol: String?
/**
<p>A set of IP permissions. You can't specify a destination security group and a CIDR IP address range.</p>
 */
  public let ipPermissions: [IpPermission]?
/**
<p>The CIDR IP address range. We recommend that you specify the CIDR range in a set of IP permissions instead.</p>
 */
  public let cidrIp: String?
/**
<p>The name of a destination security group. To revoke outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupName: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The start of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
 */
  public let fromPort: Int?
/**
<p>The end of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
 */
  public let toPort: Int?
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String
/**
<p>The AWS account number for a destination security group. To revoke outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
 */
  public let sourceSecurityGroupOwnerId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ipProtocol != nil { body["ipProtocol"] = ipProtocol! }
    if ipPermissions != nil { body["ipPermissions"] = ipPermissions! }
    if cidrIp != nil { body["cidrIp"] = cidrIp! }
    if sourceSecurityGroupName != nil { body["sourceSecurityGroupName"] = sourceSecurityGroupName! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if fromPort != nil { body["fromPort"] = fromPort! }
    if toPort != nil { body["toPort"] = toPort! }
    body["groupId"] = groupId
    if sourceSecurityGroupOwnerId != nil { body["sourceSecurityGroupOwnerId"] = sourceSecurityGroupOwnerId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - ipProtocol: <p>The IP protocol name or number. We recommend that you specify the protocol in a set of IP permissions instead.</p>
      - ipPermissions: <p>A set of IP permissions. You can't specify a destination security group and a CIDR IP address range.</p>
      - cidrIp: <p>The CIDR IP address range. We recommend that you specify the CIDR range in a set of IP permissions instead.</p>
      - sourceSecurityGroupName: <p>The name of a destination security group. To revoke outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - fromPort: <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
      - toPort: <p>The end of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.</p>
      - groupId: <p>The ID of the security group.</p>
      - sourceSecurityGroupOwnerId: <p>The AWS account number for a destination security group. To revoke outbound access to a destination security group, we recommend that you use a set of IP permissions instead.</p>
 */
  public init(ipProtocol: String?, ipPermissions: [IpPermission]?, cidrIp: String?, sourceSecurityGroupName: String?, dryRun: Bool?, fromPort: Int?, toPort: Int?, groupId: String, sourceSecurityGroupOwnerId: String?) {
self.ipProtocol = ipProtocol
self.ipPermissions = ipPermissions
self.cidrIp = cidrIp
self.sourceSecurityGroupName = sourceSecurityGroupName
self.dryRun = dryRun
self.fromPort = fromPort
self.toPort = toPort
self.groupId = groupId
self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
  }
}

enum Resetimageattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `launchPermission` = "launchPermission"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Resetimageattributename {
    guard case let .json(json) = body else { fatalError() }
    return Resetimageattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}



/**
<p>Contains the output for DescribeImportImageTasks.</p>
 */
public struct DescribeImportImageTasksResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
 */
  public let importImageTasks: [ImportImageTask]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if importImageTasks != nil { body["importImageTaskSet"] = importImageTasks! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeImportImageTasksResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeImportImageTasksResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      importImageTasks: jsonDict["importImageTaskSet"].flatMap { ($0 is NSNull) ? nil : [ImportImageTask].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - importImageTasks: <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
 */
  public init(nextToken: String?, importImageTasks: [ImportImageTask]?) {
self.nextToken = nextToken
self.importImageTasks = importImageTasks
  }
}

enum Paymentoption: String, RestJsonDeserializable, RestJsonSerializable {
  case `allUpfront` = "AllUpfront"
  case `partialUpfront` = "PartialUpfront"
  case `noUpfront` = "NoUpfront"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Paymentoption {
    guard case let .json(json) = body else { fatalError() }
    return Paymentoption(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Resourcetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `customergateway` = "customer-gateway"
  case `dhcpoptions` = "dhcp-options"
  case `image` = "image"
  case `instance` = "instance"
  case `internetgateway` = "internet-gateway"
  case `networkacl` = "network-acl"
  case `networkinterface` = "network-interface"
  case `reservedinstances` = "reserved-instances"
  case `routetable` = "route-table"
  case `snapshot` = "snapshot"
  case `spotinstancesrequest` = "spot-instances-request"
  case `subnet` = "subnet"
  case `securitygroup` = "security-group"
  case `volume` = "volume"
  case `vpc` = "vpc"
  case `vpnconnection` = "vpn-connection"
  case `vpngateway` = "vpn-gateway"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Resourcetype {
    guard case let .json(json) = body else { fatalError() }
    return Resourcetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes an instance state change.</p>
 */
public struct InstanceStateChange: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The current state of the instance.</p>
 */
  public let currentState: InstanceState?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The previous state of the instance.</p>
 */
  public let previousState: InstanceState?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if currentState != nil { body["currentState"] = currentState! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if previousState != nil { body["previousState"] = previousState! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceStateChange {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceStateChange(
        currentState: jsonDict["currentState"].flatMap { ($0 is NSNull) ? nil : InstanceState.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      previousState: jsonDict["previousState"].flatMap { ($0 is NSNull) ? nil : InstanceState.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - currentState: <p>The current state of the instance.</p>
      - instanceId: <p>The ID of the instance.</p>
      - previousState: <p>The previous state of the instance.</p>
 */
  public init(currentState: InstanceState?, instanceId: String?, previousState: InstanceState?) {
self.currentState = currentState
self.instanceId = instanceId
self.previousState = previousState
  }
}


/**
<p>Describes a security group.</p>
 */
public struct GroupIdentifier: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String?
/**
<p>The name of the security group.</p>
 */
  public let groupName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if groupId != nil { body["groupId"] = groupId! }
    if groupName != nil { body["groupName"] = groupName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> GroupIdentifier {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return GroupIdentifier(
        groupId: jsonDict["groupId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - groupId: <p>The ID of the security group.</p>
      - groupName: <p>The name of the security group.</p>
 */
  public init(groupId: String?, groupName: String?) {
self.groupId = groupId
self.groupName = groupName
  }
}

/**
<p>Contains the parameters for CreateSubnet.</p>
 */
public struct CreateSubnetRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The Availability Zone for the subnet.</p> <p>Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.</p>
 */
  public let availabilityZone: String?
/**
<p>The network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code>.</p>
 */
  public let cidrBlock: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["VpcId"] = vpcId
    if availabilityZone != nil { body["AvailabilityZone"] = availabilityZone! }
    body["CidrBlock"] = cidrBlock
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - availabilityZone: <p>The Availability Zone for the subnet.</p> <p>Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.</p>
      - cidrBlock: <p>The network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code>.</p>
 */
  public init(dryRun: Bool?, vpcId: String, availabilityZone: String?, cidrBlock: String) {
self.dryRun = dryRun
self.vpcId = vpcId
self.availabilityZone = availabilityZone
self.cidrBlock = cidrBlock
  }
}

/**
<p>Describes the ID of a Reserved Instance.</p>
 */
public struct ReservedInstancesId: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the Reserved Instance.</p>
 */
  public let reservedInstancesId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesId != nil { body["reservedInstancesId"] = reservedInstancesId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstancesId {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstancesId(
        reservedInstancesId: jsonDict["reservedInstancesId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesId: <p>The ID of the Reserved Instance.</p>
 */
  public init(reservedInstancesId: String?) {
self.reservedInstancesId = reservedInstancesId
  }
}


/**
<p>Contains the parameters for ResetNetworkInterfaceAttribute.</p>
 */
public struct ResetNetworkInterfaceAttributeRequest: RestJsonSerializable {
/**
<p>The source/destination checking attribute. Resets the value to <code>true</code>.</p>
 */
  public let sourceDestCheck: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    body["networkInterfaceId"] = networkInterfaceId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - sourceDestCheck: <p>The source/destination checking attribute. Resets the value to <code>true</code>.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(sourceDestCheck: String?, networkInterfaceId: String, dryRun: Bool?) {
self.sourceDestCheck = sourceDestCheck
self.networkInterfaceId = networkInterfaceId
self.dryRun = dryRun
  }
}

enum Accountattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `supportedplatforms` = "supported-platforms"
  case `defaultvpc` = "default-vpc"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Accountattributename {
    guard case let .json(json) = body else { fatalError() }
    return Accountattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DescribeIdentityIdFormat.</p>
 */
public struct DescribeIdentityIdFormatRequest: RestJsonSerializable {
/**
<p>The ARN of the principal, which can be an IAM role, IAM user, or the root user.</p>
 */
  public let principalArn: String
/**
<p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
 */
  public let resource: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["principalArn"] = principalArn
    if resource != nil { body["resource"] = resource! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - principalArn: <p>The ARN of the principal, which can be an IAM role, IAM user, or the root user.</p>
      - resource: <p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
 */
  public init(principalArn: String, resource: String?) {
self.principalArn = principalArn
self.resource = resource
  }
}

/**
<p>Contains the parameters for DescribeInternetGateways.</p>
 */
public struct DescribeInternetGatewaysRequest: RestJsonSerializable {
/**
<p>One or more Internet gateway IDs.</p> <p>Default: Describes all your Internet gateways.</p>
 */
  public let internetGatewayIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>available</code>). Present only if a VPC is attached.</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>internet-gateway-id</code> - The ID of the Internet gateway.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if internetGatewayIds != nil { body["internetGatewayId"] = internetGatewayIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - internetGatewayIds: <p>One or more Internet gateway IDs.</p> <p>Default: Describes all your Internet gateways.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>available</code>). Present only if a VPC is attached.</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>internet-gateway-id</code> - The ID of the Internet gateway.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(internetGatewayIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.internetGatewayIds = internetGatewayIds
self.filters = filters
self.dryRun = dryRun
  }
}


enum Reportinstancereasoncodes: String, RestJsonDeserializable, RestJsonSerializable {
  case `instancestuckinstate` = "instance-stuck-in-state"
  case `unresponsive` = "unresponsive"
  case `notacceptingcredentials` = "not-accepting-credentials"
  case `passwordnotavailable` = "password-not-available"
  case `performancenetwork` = "performance-network"
  case `performanceinstancestore` = "performance-instance-store"
  case `performanceebsvolume` = "performance-ebs-volume"
  case `performanceother` = "performance-other"
  case `other` = "other"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Reportinstancereasoncodes {
    guard case let .json(json) = body else { fatalError() }
    return Reportinstancereasoncodes(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


enum Statustype: String, RestJsonDeserializable, RestJsonSerializable {
  case `passed` = "passed"
  case `failed` = "failed"
  case `insufficientdata` = "insufficient-data"
  case `initializing` = "initializing"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Statustype {
    guard case let .json(json) = body else { fatalError() }
    return Statustype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes an image.</p>
 */
public struct Image: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Any block device mapping entries.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>The value is <code>Windows</code> for Windows AMIs; otherwise blank.</p>
 */
  public let platform: Platformvalues?
/**
<p>The device name of the root device (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p>
 */
  public let rootDeviceName: String?
/**
<p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
 */
  public let sriovNetSupport: String?
/**
<p>The AWS account alias (for example, <code>amazon</code>, <code>self</code>) or the AWS account ID of the AMI owner.</p>
 */
  public let imageOwnerAlias: String?
/**
<p>Any tags assigned to the image.</p>
 */
  public let tags: [Tag]?
/**
<p>The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance.</p>
 */
  public let state: Imagestate?
/**
<p>The kernel associated with the image, if any. Only applicable for machine images.</p>
 */
  public let kernelId: String?
/**
<p>The RAM disk associated with the image, if any. Only applicable for machine images.</p>
 */
  public let ramdiskId: String?
/**
<p>The date and time the image was created.</p>
 */
  public let creationDate: String?
/**
<p>The reason for the state change.</p>
 */
  public let stateReason: StateReason?
/**
<p>The AWS account ID of the image owner.</p>
 */
  public let ownerId: String?
/**
<p>Indicates whether the image has public launch permissions. The value is <code>true</code> if this image has public launch permissions or <code>false</code> if it has only implicit and explicit launch permissions.</p>
 */
  public let ec2Public: Bool?
/**
<p>The description of the AMI that was provided during image creation.</p>
 */
  public let description: String?
/**
<p>Any product codes associated with the AMI.</p>
 */
  public let productCodes: [ProductCode]?
/**
<p>The hypervisor type of the image.</p>
 */
  public let hypervisor: Hypervisortype?
/**
<p>Specifies whether enhanced networking with ENA is enabled.</p>
 */
  public let enaSupport: Bool?
/**
<p>The name of the AMI that was provided during image creation.</p>
 */
  public let name: String?
/**
<p>The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
 */
  public let rootDeviceType: Devicetype?
/**
<p>The architecture of the image.</p>
 */
  public let architecture: Architecturevalues?
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String?
/**
<p>The type of image.</p>
 */
  public let imageType: Imagetypevalues?
/**
<p>The type of virtualization of the AMI.</p>
 */
  public let virtualizationType: Virtualizationtype?
/**
<p>The location of the AMI.</p>
 */
  public let imageLocation: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if platform != nil { body["platform"] = platform! }
    if rootDeviceName != nil { body["rootDeviceName"] = rootDeviceName! }
    if sriovNetSupport != nil { body["sriovNetSupport"] = sriovNetSupport! }
    if imageOwnerAlias != nil { body["imageOwnerAlias"] = imageOwnerAlias! }
    if tags != nil { body["tagSet"] = tags! }
    if state != nil { body["imageState"] = state! }
    if kernelId != nil { body["kernelId"] = kernelId! }
    if ramdiskId != nil { body["ramdiskId"] = ramdiskId! }
    if creationDate != nil { body["creationDate"] = creationDate! }
    if stateReason != nil { body["stateReason"] = stateReason! }
    if ownerId != nil { body["imageOwnerId"] = ownerId! }
    if ec2Public != nil { body["isPublic"] = ec2Public! }
    if description != nil { body["description"] = description! }
    if productCodes != nil { body["productCodes"] = productCodes! }
    if hypervisor != nil { body["hypervisor"] = hypervisor! }
    if enaSupport != nil { body["enaSupport"] = enaSupport! }
    if name != nil { body["name"] = name! }
    if rootDeviceType != nil { body["rootDeviceType"] = rootDeviceType! }
    if architecture != nil { body["architecture"] = architecture! }
    if imageId != nil { body["imageId"] = imageId! }
    if imageType != nil { body["imageType"] = imageType! }
    if virtualizationType != nil { body["virtualizationType"] = virtualizationType! }
    if imageLocation != nil { body["imageLocation"] = imageLocation! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Image {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Image(
        blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [BlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : Platformvalues.deserialize(response: response, body: .json($0)) },
      rootDeviceName: jsonDict["rootDeviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      sriovNetSupport: jsonDict["sriovNetSupport"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      imageOwnerAlias: jsonDict["imageOwnerAlias"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      state: jsonDict["imageState"].flatMap { ($0 is NSNull) ? nil : Imagestate.deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernelId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdiskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      creationDate: jsonDict["creationDate"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      stateReason: jsonDict["stateReason"].flatMap { ($0 is NSNull) ? nil : StateReason.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["imageOwnerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ec2Public: jsonDict["isPublic"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      productCodes: jsonDict["productCodes"].flatMap { ($0 is NSNull) ? nil : [ProductCode].deserialize(response: response, body: .json($0)) },
      hypervisor: jsonDict["hypervisor"].flatMap { ($0 is NSNull) ? nil : Hypervisortype.deserialize(response: response, body: .json($0)) },
      enaSupport: jsonDict["enaSupport"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      name: jsonDict["name"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      rootDeviceType: jsonDict["rootDeviceType"].flatMap { ($0 is NSNull) ? nil : Devicetype.deserialize(response: response, body: .json($0)) },
      architecture: jsonDict["architecture"].flatMap { ($0 is NSNull) ? nil : Architecturevalues.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      imageType: jsonDict["imageType"].flatMap { ($0 is NSNull) ? nil : Imagetypevalues.deserialize(response: response, body: .json($0)) },
      virtualizationType: jsonDict["virtualizationType"].flatMap { ($0 is NSNull) ? nil : Virtualizationtype.deserialize(response: response, body: .json($0)) },
      imageLocation: jsonDict["imageLocation"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>Any block device mapping entries.</p>
      - platform: <p>The value is <code>Windows</code> for Windows AMIs; otherwise blank.</p>
      - rootDeviceName: <p>The device name of the root device (for example, <code>/dev/sda1</code> or <code>/dev/xvda</code>).</p>
      - sriovNetSupport: <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
      - imageOwnerAlias: <p>The AWS account alias (for example, <code>amazon</code>, <code>self</code>) or the AWS account ID of the AMI owner.</p>
      - tags: <p>Any tags assigned to the image.</p>
      - state: <p>The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance.</p>
      - kernelId: <p>The kernel associated with the image, if any. Only applicable for machine images.</p>
      - ramdiskId: <p>The RAM disk associated with the image, if any. Only applicable for machine images.</p>
      - creationDate: <p>The date and time the image was created.</p>
      - stateReason: <p>The reason for the state change.</p>
      - ownerId: <p>The AWS account ID of the image owner.</p>
      - ec2Public: <p>Indicates whether the image has public launch permissions. The value is <code>true</code> if this image has public launch permissions or <code>false</code> if it has only implicit and explicit launch permissions.</p>
      - description: <p>The description of the AMI that was provided during image creation.</p>
      - productCodes: <p>Any product codes associated with the AMI.</p>
      - hypervisor: <p>The hypervisor type of the image.</p>
      - enaSupport: <p>Specifies whether enhanced networking with ENA is enabled.</p>
      - name: <p>The name of the AMI that was provided during image creation.</p>
      - rootDeviceType: <p>The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
      - architecture: <p>The architecture of the image.</p>
      - imageId: <p>The ID of the AMI.</p>
      - imageType: <p>The type of image.</p>
      - virtualizationType: <p>The type of virtualization of the AMI.</p>
      - imageLocation: <p>The location of the AMI.</p>
 */
  public init(blockDeviceMappings: [BlockDeviceMapping]?, platform: Platformvalues?, rootDeviceName: String?, sriovNetSupport: String?, imageOwnerAlias: String?, tags: [Tag]?, state: Imagestate?, kernelId: String?, ramdiskId: String?, creationDate: String?, stateReason: StateReason?, ownerId: String?, ec2Public: Bool?, description: String?, productCodes: [ProductCode]?, hypervisor: Hypervisortype?, enaSupport: Bool?, name: String?, rootDeviceType: Devicetype?, architecture: Architecturevalues?, imageId: String?, imageType: Imagetypevalues?, virtualizationType: Virtualizationtype?, imageLocation: String?) {
self.blockDeviceMappings = blockDeviceMappings
self.platform = platform
self.rootDeviceName = rootDeviceName
self.sriovNetSupport = sriovNetSupport
self.imageOwnerAlias = imageOwnerAlias
self.tags = tags
self.state = state
self.kernelId = kernelId
self.ramdiskId = ramdiskId
self.creationDate = creationDate
self.stateReason = stateReason
self.ownerId = ownerId
self.ec2Public = ec2Public
self.description = description
self.productCodes = productCodes
self.hypervisor = hypervisor
self.enaSupport = enaSupport
self.name = name
self.rootDeviceType = rootDeviceType
self.architecture = architecture
self.imageId = imageId
self.imageType = imageType
self.virtualizationType = virtualizationType
self.imageLocation = imageLocation
  }
}


/**
<p>Describes VPN connection options.</p>
 */
public struct VpnConnectionOptions: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.</p>
 */
  public let staticRoutesOnly: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if staticRoutesOnly != nil { body["staticRoutesOnly"] = staticRoutesOnly! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpnConnectionOptions {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpnConnectionOptions(
        staticRoutesOnly: jsonDict["staticRoutesOnly"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - staticRoutesOnly: <p>Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.</p>
 */
  public init(staticRoutesOnly: Bool?) {
self.staticRoutesOnly = staticRoutesOnly
  }
}

/**
<p>Contains the parameters for DescribeImportImageTasks.</p>
 */
public struct DescribeImportImageTasksRequest: RestJsonSerializable {
/**
<p>Filter tasks using the <code>task-state</code> filter and one of the following values: active, completed, deleting, deleted.</p>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>A list of import image task IDs.</p>
 */
  public let importTaskIds: [String]?
/**
<p>A token that indicates the next page of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filters"] = filters! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    if importTaskIds != nil { body["ImportTaskId"] = importTaskIds! }
    if nextToken != nil { body["NextToken"] = nextToken! }
    if maxResults != nil { body["MaxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>Filter tasks using the <code>task-state</code> filter and one of the following values: active, completed, deleting, deleted.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - importTaskIds: <p>A list of import image task IDs.</p>
      - nextToken: <p>A token that indicates the next page of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(filters: [Filter]?, dryRun: Bool?, importTaskIds: [String]?, nextToken: String?, maxResults: Int?) {
self.filters = filters
self.dryRun = dryRun
self.importTaskIds = importTaskIds
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes a NAT gateway.</p>
 */
public struct NatGateway: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the subnet in which the NAT gateway is located.</p>
 */
  public let subnetId: String?
/**
<p>The ID of the NAT gateway.</p>
 */
  public let natGatewayId: String?
/**
<p>The date and time the NAT gateway was deleted, if applicable.</p>
 */
  public let deleteTime: Date?
/**
<p>The ID of the VPC in which the NAT gateway is located.</p>
 */
  public let vpcId: String?
/**
<p>The state of the NAT gateway.</p> <ul> <li> <p> <code>pending</code>: The NAT gateway is being created and is not ready to process traffic.</p> </li> <li> <p> <code>failed</code>: The NAT gateway could not be created. Check the <code>failureCode</code> and <code>failureMessage</code> fields for the reason.</p> </li> <li> <p> <code>available</code>: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.</p> </li> <li> <p> <code>deleting</code>: The NAT gateway is in the process of being terminated and may still be processing traffic.</p> </li> <li> <p> <code>deleted</code>: The NAT gateway has been terminated and is no longer processing traffic.</p> </li> </ul>
 */
  public let state: Natgatewaystate?
/**
<p>If the NAT gateway could not be created, specifies the error code for the failure. (<code>InsufficientFreeAddressesInSubnet</code> | <code>Gateway.NotAttached</code> | <code>InvalidAllocationID.NotFound</code> | <code>Resource.AlreadyAssociated</code> | <code>InternalError</code> | <code>InvalidSubnetID.NotFound</code>)</p>
 */
  public let failureCode: String?
/**
<p>The date and time the NAT gateway was created.</p>
 */
  public let createTime: Date?
/**
<p>If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.</p> <ul> <li> <p>For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"</p> </li> <li> <p>For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"</p> </li> <li> <p>For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"</p> </li> <li> <p>For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"</p> </li> <li> <p>For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."</p> </li> <li> <p>For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."</p> </li> </ul>
 */
  public let failureMessage: String?
/**
<p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
 */
  public let provisionedBandwidth: ProvisionedBandwidth?
/**
<p>Information about the IP addresses and network interface associated with the NAT gateway.</p>
 */
  public let natGatewayAddresses: [NatGatewayAddress]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnetId != nil { body["subnetId"] = subnetId! }
    if natGatewayId != nil { body["natGatewayId"] = natGatewayId! }
    if deleteTime != nil { body["deleteTime"] = deleteTime! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if state != nil { body["state"] = state! }
    if failureCode != nil { body["failureCode"] = failureCode! }
    if createTime != nil { body["createTime"] = createTime! }
    if failureMessage != nil { body["failureMessage"] = failureMessage! }
    if provisionedBandwidth != nil { body["provisionedBandwidth"] = provisionedBandwidth! }
    if natGatewayAddresses != nil { body["natGatewayAddressSet"] = natGatewayAddresses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NatGateway {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NatGateway(
        subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      natGatewayId: jsonDict["natGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deleteTime: jsonDict["deleteTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Natgatewaystate.deserialize(response: response, body: .json($0)) },
      failureCode: jsonDict["failureCode"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      createTime: jsonDict["createTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      failureMessage: jsonDict["failureMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      provisionedBandwidth: jsonDict["provisionedBandwidth"].flatMap { ($0 is NSNull) ? nil : ProvisionedBandwidth.deserialize(response: response, body: .json($0)) },
      natGatewayAddresses: jsonDict["natGatewayAddressSet"].flatMap { ($0 is NSNull) ? nil : [NatGatewayAddress].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnetId: <p>The ID of the subnet in which the NAT gateway is located.</p>
      - natGatewayId: <p>The ID of the NAT gateway.</p>
      - deleteTime: <p>The date and time the NAT gateway was deleted, if applicable.</p>
      - vpcId: <p>The ID of the VPC in which the NAT gateway is located.</p>
      - state: <p>The state of the NAT gateway.</p> <ul> <li> <p> <code>pending</code>: The NAT gateway is being created and is not ready to process traffic.</p> </li> <li> <p> <code>failed</code>: The NAT gateway could not be created. Check the <code>failureCode</code> and <code>failureMessage</code> fields for the reason.</p> </li> <li> <p> <code>available</code>: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.</p> </li> <li> <p> <code>deleting</code>: The NAT gateway is in the process of being terminated and may still be processing traffic.</p> </li> <li> <p> <code>deleted</code>: The NAT gateway has been terminated and is no longer processing traffic.</p> </li> </ul>
      - failureCode: <p>If the NAT gateway could not be created, specifies the error code for the failure. (<code>InsufficientFreeAddressesInSubnet</code> | <code>Gateway.NotAttached</code> | <code>InvalidAllocationID.NotFound</code> | <code>Resource.AlreadyAssociated</code> | <code>InternalError</code> | <code>InvalidSubnetID.NotFound</code>)</p>
      - createTime: <p>The date and time the NAT gateway was created.</p>
      - failureMessage: <p>If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.</p> <ul> <li> <p>For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"</p> </li> <li> <p>For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"</p> </li> <li> <p>For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"</p> </li> <li> <p>For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"</p> </li> <li> <p>For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."</p> </li> <li> <p>For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."</p> </li> </ul>
      - provisionedBandwidth: <p>Reserved. If you need to sustain traffic greater than the <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
      - natGatewayAddresses: <p>Information about the IP addresses and network interface associated with the NAT gateway.</p>
 */
  public init(subnetId: String?, natGatewayId: String?, deleteTime: Date?, vpcId: String?, state: Natgatewaystate?, failureCode: String?, createTime: Date?, failureMessage: String?, provisionedBandwidth: ProvisionedBandwidth?, natGatewayAddresses: [NatGatewayAddress]?) {
self.subnetId = subnetId
self.natGatewayId = natGatewayId
self.deleteTime = deleteTime
self.vpcId = vpcId
self.state = state
self.failureCode = failureCode
self.createTime = createTime
self.failureMessage = failureMessage
self.provisionedBandwidth = provisionedBandwidth
self.natGatewayAddresses = natGatewayAddresses
  }
}


/**
<p>Information about the instance type that the Dedicated Host supports.</p>
 */
public struct InstanceCapacity: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The instance type size supported by the Dedicated Host.</p>
 */
  public let instanceType: String?
/**
<p>The total number of instances that can be launched onto the Dedicated Host.</p>
 */
  public let totalCapacity: Int?
/**
<p>The number of instances that can still be launched onto the Dedicated Host.</p>
 */
  public let availableCapacity: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceType != nil { body["instanceType"] = instanceType! }
    if totalCapacity != nil { body["totalCapacity"] = totalCapacity! }
    if availableCapacity != nil { body["availableCapacity"] = availableCapacity! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceCapacity {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceCapacity(
        instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      totalCapacity: jsonDict["totalCapacity"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      availableCapacity: jsonDict["availableCapacity"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceType: <p>The instance type size supported by the Dedicated Host.</p>
      - totalCapacity: <p>The total number of instances that can be launched onto the Dedicated Host.</p>
      - availableCapacity: <p>The number of instances that can still be launched onto the Dedicated Host.</p>
 */
  public init(instanceType: String?, totalCapacity: Int?, availableCapacity: Int?) {
self.instanceType = instanceType
self.totalCapacity = totalCapacity
self.availableCapacity = availableCapacity
  }
}

enum Permissiongroup: String, RestJsonDeserializable, RestJsonSerializable {
  case `all` = "all"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Permissiongroup {
    guard case let .json(json) = body else { fatalError() }
    return Permissiongroup(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes the ClassicLink DNS support status of a VPC.</p>
 */
public struct ClassicLinkDnsSupport: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
 */
  public let classicLinkDnsSupported: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["vpcId"] = vpcId! }
    if classicLinkDnsSupported != nil { body["classicLinkDnsSupported"] = classicLinkDnsSupported! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ClassicLinkDnsSupport {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ClassicLinkDnsSupport(
        vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      classicLinkDnsSupported: jsonDict["classicLinkDnsSupported"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - classicLinkDnsSupported: <p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
 */
  public init(vpcId: String?, classicLinkDnsSupported: Bool?) {
self.vpcId = vpcId
self.classicLinkDnsSupported = classicLinkDnsSupported
  }
}


/**
<p>Contains the output for CancelImportTask.</p>
 */
public struct CancelImportTaskResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the task being canceled.</p>
 */
  public let importTaskId: String?
/**
<p>The current state of the task being canceled.</p>
 */
  public let state: String?
/**
<p>The current state of the task being canceled.</p>
 */
  public let previousState: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if importTaskId != nil { body["importTaskId"] = importTaskId! }
    if state != nil { body["state"] = state! }
    if previousState != nil { body["previousState"] = previousState! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelImportTaskResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelImportTaskResult(
        importTaskId: jsonDict["importTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      previousState: jsonDict["previousState"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - importTaskId: <p>The ID of the task being canceled.</p>
      - state: <p>The current state of the task being canceled.</p>
      - previousState: <p>The current state of the task being canceled.</p>
 */
  public init(importTaskId: String?, state: String?, previousState: String?) {
self.importTaskId = importTaskId
self.state = state
self.previousState = previousState
  }
}


/**
<p>Describes the price for a Reserved Instance.</p>
 */
public struct PriceScheduleSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.</p>
 */
  public let currencyCode: Currencycodevalues?
/**
<p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>
 */
  public let term: Int?
/**
<p>The fixed price for the term.</p>
 */
  public let price: Double?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if currencyCode != nil { body["currencyCode"] = currencyCode! }
    if term != nil { body["term"] = term! }
    if price != nil { body["price"] = price! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PriceScheduleSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PriceScheduleSpecification(
        currencyCode: jsonDict["currencyCode"].flatMap { ($0 is NSNull) ? nil : Currencycodevalues.deserialize(response: response, body: .json($0)) },
      term: jsonDict["term"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      price: jsonDict["price"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - currencyCode: <p>The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.</p>
      - term: <p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>
      - price: <p>The fixed price for the term.</p>
 */
  public init(currencyCode: Currencycodevalues?, term: Int?, price: Double?) {
self.currencyCode = currencyCode
self.term = term
self.price = price
  }
}

enum Instancelifecycletype: String, RestJsonDeserializable, RestJsonSerializable {
  case `spot` = "spot"
  case `scheduled` = "scheduled"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Instancelifecycletype {
    guard case let .json(json) = body else { fatalError() }
    return Instancelifecycletype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


enum Listingstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `available` = "available"
  case `sold` = "sold"
  case `cancelled` = "cancelled"
  case `pending` = "pending"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Listingstate {
    guard case let .json(json) = body else { fatalError() }
    return Listingstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of DescribeIdentityIdFormat.</p>
 */
public struct DescribeIdentityIdFormatResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the ID format for the resources.</p>
 */
  public let statuses: [IdFormat]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if statuses != nil { body["statusSet"] = statuses! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeIdentityIdFormatResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeIdentityIdFormatResult(
        statuses: jsonDict["statusSet"].flatMap { ($0 is NSNull) ? nil : [IdFormat].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - statuses: <p>Information about the ID format for the resources.</p>
 */
  public init(statuses: [IdFormat]?) {
self.statuses = statuses
  }
}

/**
<p>Contains the parameters for CreateVpnConnectionRoute.</p>
 */
public struct CreateVpnConnectionRouteRequest: RestJsonSerializable {
/**
<p>The ID of the VPN connection.</p>
 */
  public let vpnConnectionId: String
/**
<p>The CIDR block associated with the local subnet of the customer network.</p>
 */
  public let destinationCidrBlock: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpnConnectionId"] = vpnConnectionId
    body["DestinationCidrBlock"] = destinationCidrBlock
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpnConnectionId: <p>The ID of the VPN connection.</p>
      - destinationCidrBlock: <p>The CIDR block associated with the local subnet of the customer network.</p>
 */
  public init(vpnConnectionId: String, destinationCidrBlock: String) {
self.vpnConnectionId = vpnConnectionId
self.destinationCidrBlock = destinationCidrBlock
  }
}

enum Volumeattributename: String, RestJsonDeserializable, RestJsonSerializable {
  case `autoEnableIO` = "autoEnableIO"
  case `productCodes` = "productCodes"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volumeattributename {
    guard case let .json(json) = body else { fatalError() }
    return Volumeattributename(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the output for ImportVolume.</p>
 */
public struct ImportVolumeResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the conversion task.</p>
 */
  public let conversionTask: ConversionTask?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if conversionTask != nil { body["conversionTask"] = conversionTask! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportVolumeResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportVolumeResult(
        conversionTask: jsonDict["conversionTask"].flatMap { ($0 is NSNull) ? nil : ConversionTask.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - conversionTask: <p>Information about the conversion task.</p>
 */
  public init(conversionTask: ConversionTask?) {
self.conversionTask = conversionTask
  }
}

/**
<p>Describes a VPN connection.</p>
 */
public struct VpnConnection: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the virtual private gateway at the AWS side of the VPN connection.</p>
 */
  public let vpnGatewayId: String?
/**
<p>The ID of the customer gateway at your end of the VPN connection.</p>
 */
  public let customerGatewayId: String?
/**
<p>The VPN connection options.</p>
 */
  public let options: VpnConnectionOptions?
/**
<p>The ID of the VPN connection.</p>
 */
  public let vpnConnectionId: String?
/**
<p>The current state of the VPN connection.</p>
 */
  public let state: Vpnstate?
/**
<p>Any tags assigned to the VPN connection.</p>
 */
  public let tags: [Tag]?
/**
<p>Information about the VPN tunnel.</p>
 */
  public let vgwTelemetry: [VgwTelemetry]?
/**
<p>The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the <a>CreateVpnConnection</a> response; however, it's present in the <a>DescribeVpnConnections</a> response only if the VPN connection is in the <code>pending</code> or <code>available</code> state.</p>
 */
  public let customerGatewayConfiguration: String?
/**
<p>The type of VPN connection.</p>
 */
  public let ec2Type: Gatewaytype?
/**
<p>The static routes associated with the VPN connection.</p>
 */
  public let routes: [VpnStaticRoute]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnGatewayId != nil { body["vpnGatewayId"] = vpnGatewayId! }
    if customerGatewayId != nil { body["customerGatewayId"] = customerGatewayId! }
    if options != nil { body["options"] = options! }
    if vpnConnectionId != nil { body["vpnConnectionId"] = vpnConnectionId! }
    if state != nil { body["state"] = state! }
    if tags != nil { body["tagSet"] = tags! }
    if vgwTelemetry != nil { body["vgwTelemetry"] = vgwTelemetry! }
    if customerGatewayConfiguration != nil { body["customerGatewayConfiguration"] = customerGatewayConfiguration! }
    if ec2Type != nil { body["type"] = ec2Type! }
    if routes != nil { body["routes"] = routes! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpnConnection {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpnConnection(
        vpnGatewayId: jsonDict["vpnGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      customerGatewayId: jsonDict["customerGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      options: jsonDict["options"].flatMap { ($0 is NSNull) ? nil : VpnConnectionOptions.deserialize(response: response, body: .json($0)) },
      vpnConnectionId: jsonDict["vpnConnectionId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Vpnstate.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      vgwTelemetry: jsonDict["vgwTelemetry"].flatMap { ($0 is NSNull) ? nil : [VgwTelemetry].deserialize(response: response, body: .json($0)) },
      customerGatewayConfiguration: jsonDict["customerGatewayConfiguration"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ec2Type: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : Gatewaytype.deserialize(response: response, body: .json($0)) },
      routes: jsonDict["routes"].flatMap { ($0 is NSNull) ? nil : [VpnStaticRoute].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpnGatewayId: <p>The ID of the virtual private gateway at the AWS side of the VPN connection.</p>
      - customerGatewayId: <p>The ID of the customer gateway at your end of the VPN connection.</p>
      - options: <p>The VPN connection options.</p>
      - vpnConnectionId: <p>The ID of the VPN connection.</p>
      - state: <p>The current state of the VPN connection.</p>
      - tags: <p>Any tags assigned to the VPN connection.</p>
      - vgwTelemetry: <p>Information about the VPN tunnel.</p>
      - customerGatewayConfiguration: <p>The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the <a>CreateVpnConnection</a> response; however, it's present in the <a>DescribeVpnConnections</a> response only if the VPN connection is in the <code>pending</code> or <code>available</code> state.</p>
      - ec2Type: <p>The type of VPN connection.</p>
      - routes: <p>The static routes associated with the VPN connection.</p>
 */
  public init(vpnGatewayId: String?, customerGatewayId: String?, options: VpnConnectionOptions?, vpnConnectionId: String?, state: Vpnstate?, tags: [Tag]?, vgwTelemetry: [VgwTelemetry]?, customerGatewayConfiguration: String?, ec2Type: Gatewaytype?, routes: [VpnStaticRoute]?) {
self.vpnGatewayId = vpnGatewayId
self.customerGatewayId = customerGatewayId
self.options = options
self.vpnConnectionId = vpnConnectionId
self.state = state
self.tags = tags
self.vgwTelemetry = vgwTelemetry
self.customerGatewayConfiguration = customerGatewayConfiguration
self.ec2Type = ec2Type
self.routes = routes
  }
}

enum Placementstrategy: String, RestJsonDeserializable, RestJsonSerializable {
  case `cluster` = "cluster"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Placementstrategy {
    guard case let .json(json) = body else { fatalError() }
    return Placementstrategy(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes an Elastic IP address.</p>
 */
public struct Address: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the AWS account that owns the network interface.</p>
 */
  public let networkInterfaceOwnerId: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>The ID representing the association of the address with an instance in a VPC.</p>
 */
  public let associationId: String?
/**
<p>The ID of the instance that the address is associated with (if any).</p>
 */
  public let instanceId: String?
/**
<p>The ID representing the allocation of the address for use with EC2-VPC.</p>
 */
  public let allocationId: String?
/**
<p>The Elastic IP address.</p>
 */
  public let publicIp: String?
/**
<p>Indicates whether this Elastic IP address is for use with instances in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>
 */
  public let domain: Domaintype?
/**
<p>The private IP address associated with the Elastic IP address.</p>
 */
  public let privateIpAddress: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkInterfaceOwnerId != nil { body["networkInterfaceOwnerId"] = networkInterfaceOwnerId! }
    if networkInterfaceId != nil { body["networkInterfaceId"] = networkInterfaceId! }
    if associationId != nil { body["associationId"] = associationId! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if allocationId != nil { body["allocationId"] = allocationId! }
    if publicIp != nil { body["publicIp"] = publicIp! }
    if domain != nil { body["domain"] = domain! }
    if privateIpAddress != nil { body["privateIpAddress"] = privateIpAddress! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Address {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Address(
        networkInterfaceOwnerId: jsonDict["networkInterfaceOwnerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["networkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      associationId: jsonDict["associationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      allocationId: jsonDict["allocationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      domain: jsonDict["domain"].flatMap { ($0 is NSNull) ? nil : Domaintype.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - networkInterfaceOwnerId: <p>The ID of the AWS account that owns the network interface.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - associationId: <p>The ID representing the association of the address with an instance in a VPC.</p>
      - instanceId: <p>The ID of the instance that the address is associated with (if any).</p>
      - allocationId: <p>The ID representing the allocation of the address for use with EC2-VPC.</p>
      - publicIp: <p>The Elastic IP address.</p>
      - domain: <p>Indicates whether this Elastic IP address is for use with instances in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>
      - privateIpAddress: <p>The private IP address associated with the Elastic IP address.</p>
 */
  public init(networkInterfaceOwnerId: String?, networkInterfaceId: String?, associationId: String?, instanceId: String?, allocationId: String?, publicIp: String?, domain: Domaintype?, privateIpAddress: String?) {
self.networkInterfaceOwnerId = networkInterfaceOwnerId
self.networkInterfaceId = networkInterfaceId
self.associationId = associationId
self.instanceId = instanceId
self.allocationId = allocationId
self.publicIp = publicIp
self.domain = domain
self.privateIpAddress = privateIpAddress
  }
}

/**
<p>Contains the parameters for DescribeVpnGateways.</p>
 */
public struct DescribeVpnGatewaysRequest: RestJsonSerializable {
/**
<p>One or more virtual private gateway IDs.</p> <p>Default: Describes all your virtual private gateways.</p>
 */
  public let vpnGatewayIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone for the virtual private gateway (if applicable).</p> </li> <li> <p> <code>state</code> - The state of the virtual private gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>type</code> - The type of virtual private gateway. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnGatewayIds != nil { body["VpnGatewayId"] = vpnGatewayIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpnGatewayIds: <p>One or more virtual private gateway IDs.</p> <p>Default: Describes all your virtual private gateways.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone for the virtual private gateway (if applicable).</p> </li> <li> <p> <code>state</code> - The state of the virtual private gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>type</code> - The type of virtual private gateway. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpnGatewayIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.vpnGatewayIds = vpnGatewayIds
self.filters = filters
self.dryRun = dryRun
  }
}

enum Vpnstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `available` = "available"
  case `deleting` = "deleting"
  case `deleted` = "deleted"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Vpnstate {
    guard case let .json(json) = body else { fatalError() }
    return Vpnstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for TerminateInstances.</p>
 */
public struct TerminateInstancesRequest: RestJsonSerializable {
/**
<p>One or more instance IDs.</p> <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
 */
  public let instanceIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceIds: <p>One or more instance IDs.</p> <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceIds: [String], dryRun: Bool?) {
self.instanceIds = instanceIds
self.dryRun = dryRun
  }
}


/**
<p>Contains the output of PurchaseReservedInstancesOffering.</p>
 */
public struct PurchaseReservedInstancesOfferingResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IDs of the purchased Reserved Instances.</p>
 */
  public let reservedInstancesId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesId != nil { body["reservedInstancesId"] = reservedInstancesId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PurchaseReservedInstancesOfferingResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PurchaseReservedInstancesOfferingResult(
        reservedInstancesId: jsonDict["reservedInstancesId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesId: <p>The IDs of the purchased Reserved Instances.</p>
 */
  public init(reservedInstancesId: String?) {
self.reservedInstancesId = reservedInstancesId
  }
}



/**
<p>Contains the parameters for CreateNetworkAcl.</p>
 */
public struct CreateNetworkAclRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.dryRun = dryRun
  }
}

/**
<p>Describes an import instance task.</p>
 */
public struct ImportInstanceTaskDetails: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The instance operating system.</p>
 */
  public let platform: Platformvalues?
/**
<p>One or more volumes.</p>
 */
  public let volumes: [ImportInstanceVolumeDetailItem]
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>A description of the task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if platform != nil { body["platform"] = platform! }
    body["volumes"] = volumes
    if instanceId != nil { body["instanceId"] = instanceId! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportInstanceTaskDetails {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportInstanceTaskDetails(
        platform: jsonDict["platform"].flatMap { ($0 is NSNull) ? nil : Platformvalues.deserialize(response: response, body: .json($0)) },
      volumes: jsonDict["volumes"].flatMap { ($0 is NSNull) ? nil : [ImportInstanceVolumeDetailItem].deserialize(response: response, body: .json($0)) }!,
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - platform: <p>The instance operating system.</p>
      - volumes: <p>One or more volumes.</p>
      - instanceId: <p>The ID of the instance.</p>
      - description: <p>A description of the task.</p>
 */
  public init(platform: Platformvalues?, volumes: [ImportInstanceVolumeDetailItem], instanceId: String?, description: String?) {
self.platform = platform
self.volumes = volumes
self.instanceId = instanceId
self.description = description
  }
}

/**
<p>Describes an error for <a>BundleInstance</a>.</p>
 */
public struct BundleTaskError: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The error code.</p>
 */
  public let code: String?
/**
<p>The error message.</p>
 */
  public let message: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if code != nil { body["code"] = code! }
    if message != nil { body["message"] = message! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> BundleTaskError {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return BundleTaskError(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - code: <p>The error code.</p>
      - message: <p>The error message.</p>
 */
  public init(code: String?, message: String?) {
self.code = code
self.message = message
  }
}

/**
<p>Contains the output of DescribeVpnConnections.</p>
 */
public struct DescribeVpnConnectionsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more VPN connections.</p>
 */
  public let vpnConnections: [VpnConnection]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnConnections != nil { body["vpnConnectionSet"] = vpnConnections! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpnConnectionsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpnConnectionsResult(
        vpnConnections: jsonDict["vpnConnectionSet"].flatMap { ($0 is NSNull) ? nil : [VpnConnection].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpnConnections: <p>Information about one or more VPN connections.</p>
 */
  public init(vpnConnections: [VpnConnection]?) {
self.vpnConnections = vpnConnections
  }
}

/**
<p>Describes an account attribute.</p>
 */
public struct AccountAttribute: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the account attribute.</p>
 */
  public let attributeName: String?
/**
<p>One or more values for the account attribute.</p>
 */
  public let attributeValues: [AccountAttributeValue]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if attributeName != nil { body["attributeName"] = attributeName! }
    if attributeValues != nil { body["attributeValueSet"] = attributeValues! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AccountAttribute {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AccountAttribute(
        attributeName: jsonDict["attributeName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      attributeValues: jsonDict["attributeValueSet"].flatMap { ($0 is NSNull) ? nil : [AccountAttributeValue].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - attributeName: <p>The name of the account attribute.</p>
      - attributeValues: <p>One or more values for the account attribute.</p>
 */
  public init(attributeName: String?, attributeValues: [AccountAttributeValue]?) {
self.attributeName = attributeName
self.attributeValues = attributeValues
  }
}


/**
<p>Contains the output of ModifyReservedInstances.</p>
 */
public struct ModifyReservedInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID for the modification.</p>
 */
  public let reservedInstancesModificationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesModificationId != nil { body["reservedInstancesModificationId"] = reservedInstancesModificationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ModifyReservedInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ModifyReservedInstancesResult(
        reservedInstancesModificationId: jsonDict["reservedInstancesModificationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesModificationId: <p>The ID for the modification.</p>
 */
  public init(reservedInstancesModificationId: String?) {
self.reservedInstancesModificationId = reservedInstancesModificationId
  }
}

/**
<p>Contains the parameters for CreateCustomerGateway.</p>
 */
public struct CreateCustomerGatewayRequest: RestJsonSerializable {
/**
<p>For devices that support BGP, the customer gateway's BGP ASN.</p> <p>Default: 65000</p>
 */
  public let bgpAsn: Int
/**
<p>The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
 */
  public let publicIp: String
/**
<p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
 */
  public let ec2Type: Gatewaytype
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["BgpAsn"] = bgpAsn
    body["IpAddress"] = publicIp
    body["Type"] = ec2Type
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - bgpAsn: <p>For devices that support BGP, the customer gateway's BGP ASN.</p> <p>Default: 65000</p>
      - publicIp: <p>The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
      - ec2Type: <p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(bgpAsn: Int, publicIp: String, ec2Type: Gatewaytype, dryRun: Bool?) {
self.bgpAsn = bgpAsn
self.publicIp = publicIp
self.ec2Type = ec2Type
self.dryRun = dryRun
  }
}

enum Diskimageformat: String, RestJsonDeserializable, RestJsonSerializable {
  case `vMDK` = "VMDK"
  case `rAW` = "RAW"
  case `vHD` = "VHD"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Diskimageformat {
    guard case let .json(json) = body else { fatalError() }
    return Diskimageformat(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for CancelSpotInstanceRequests.</p>
 */
public struct CancelSpotInstanceRequestsRequest: RestJsonSerializable {
/**
<p>One or more Spot instance request IDs.</p>
 */
  public let spotInstanceRequestIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["SpotInstanceRequestId"] = spotInstanceRequestIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - spotInstanceRequestIds: <p>One or more Spot instance request IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(spotInstanceRequestIds: [String], dryRun: Bool?) {
self.spotInstanceRequestIds = spotInstanceRequestIds
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for CreateSecurityGroup.</p>
 */
public struct CreateSecurityGroupRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>[EC2-VPC] The ID of the VPC. Required for EC2-VPC.</p>
 */
  public let vpcId: String?
/**
<p>The name of the security group.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
 */
  public let groupName: String
/**
<p>A description for the security group. This is informational only.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
 */
  public let description: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
    if vpcId != nil { body["VpcId"] = vpcId! }
    body["GroupName"] = groupName
    body["GroupDescription"] = description
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcId: <p>[EC2-VPC] The ID of the VPC. Required for EC2-VPC.</p>
      - groupName: <p>The name of the security group.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
      - description: <p>A description for the security group. This is informational only.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
 */
  public init(dryRun: Bool?, vpcId: String?, groupName: String, description: String) {
self.dryRun = dryRun
self.vpcId = vpcId
self.groupName = groupName
self.description = description
  }
}

/**
<p>Contains the parameters for DescribeImageAttribute.</p>
 */
public struct DescribeImageAttributeRequest: RestJsonSerializable {
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String
/**
<p>The AMI attribute.</p> <p> <b>Note</b>: Depending on your account privileges, the <code>blockDeviceMapping</code> attribute may return a <code>Client.AuthFailure</code> error. If this happens, use <a>DescribeImages</a> to get information about the block device mapping for the AMI.</p>
 */
  public let attribute: Imageattributename
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ImageId"] = imageId
    body["Attribute"] = attribute
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - imageId: <p>The ID of the AMI.</p>
      - attribute: <p>The AMI attribute.</p> <p> <b>Note</b>: Depending on your account privileges, the <code>blockDeviceMapping</code> attribute may return a <code>Client.AuthFailure</code> error. If this happens, use <a>DescribeImages</a> to get information about the block device mapping for the AMI.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(imageId: String, attribute: Imageattributename, dryRun: Bool?) {
self.imageId = imageId
self.attribute = attribute
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for MoveAddressToVpc.</p>
 */
public struct MoveAddressToVpcRequest: RestJsonSerializable {
/**
<p>The Elastic IP address.</p>
 */
  public let publicIp: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["publicIp"] = publicIp
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - publicIp: <p>The Elastic IP address.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(publicIp: String, dryRun: Bool?) {
self.publicIp = publicIp
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeSpotFleetRequestHistory.</p>
 */
public struct DescribeSpotFleetRequestHistoryResponse: RestJsonDeserializable {
/**
<p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p> <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
 */
  public let lastEvaluatedTime: Date
/**
<p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let startTime: Date
/**
<p>Information about the events in the history of the Spot fleet request.</p>
 */
  public let historyRecords: [HistoryRecord]
/**
<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String


  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSpotFleetRequestHistoryResponse {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSpotFleetRequestHistoryResponse(
        lastEvaluatedTime: jsonDict["lastEvaluatedTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }!,
      startTime: jsonDict["startTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }!,
      historyRecords: jsonDict["historyRecordSet"].flatMap { ($0 is NSNull) ? nil : [HistoryRecord].deserialize(response: response, body: .json($0)) }!,
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotFleetRequestId: jsonDict["spotFleetRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - lastEvaluatedTime: <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p> <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
      - startTime: <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - historyRecords: <p>Information about the events in the history of the Spot fleet request.</p>
      - nextToken: <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
 */
  public init(lastEvaluatedTime: Date, startTime: Date, historyRecords: [HistoryRecord], nextToken: String?, spotFleetRequestId: String) {
self.lastEvaluatedTime = lastEvaluatedTime
self.startTime = startTime
self.historyRecords = historyRecords
self.nextToken = nextToken
self.spotFleetRequestId = spotFleetRequestId
  }
}

/**
<p>Contains the output of CreateInternetGateway.</p>
 */
public struct CreateInternetGatewayResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the Internet gateway.</p>
 */
  public let internetGateway: InternetGateway?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if internetGateway != nil { body["internetGateway"] = internetGateway! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateInternetGatewayResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateInternetGatewayResult(
        internetGateway: jsonDict["internetGateway"].flatMap { ($0 is NSNull) ? nil : InternetGateway.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - internetGateway: <p>Information about the Internet gateway.</p>
 */
  public init(internetGateway: InternetGateway?) {
self.internetGateway = internetGateway
  }
}



/**
<p>Contains the parameters for DeleteKeyPair.</p>
 */
public struct DeleteKeyPairRequest: RestJsonSerializable {
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["KeyName"] = keyName
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - keyName: <p>The name of the key pair.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(keyName: String, dryRun: Bool?) {
self.keyName = keyName
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for ReplaceNetworkAclEntry.</p>
 */
public struct ReplaceNetworkAclEntryRequest: RestJsonSerializable {
/**
<p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying 6 (TCP) or 17 (UDP) for the protocol.</p>
 */
  public let portRange: PortRange?
/**
<p>ICMP protocol: The ICMP type and code. Required if specifying 1 (ICMP) for the protocol.</p>
 */
  public let icmpTypeCode: IcmpTypeCode?
/**
<p>The rule number of the entry to replace.</p>
 */
  public let ruleNumber: Int
/**
<p>Indicates whether to allow or deny the traffic that matches the rule.</p>
 */
  public let ruleAction: Ruleaction
/**
<p>The IP protocol. You can specify <code>all</code> or <code>-1</code> to mean all protocols.</p>
 */
  public let ec2Protocol: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the ACL.</p>
 */
  public let networkAclId: String
/**
<p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p>
 */
  public let egress: Bool
/**
<p>The network range to allow or deny, in CIDR notation.</p>
 */
  public let cidrBlock: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if portRange != nil { body["portRange"] = portRange! }
    if icmpTypeCode != nil { body["Icmp"] = icmpTypeCode! }
    body["ruleNumber"] = ruleNumber
    body["ruleAction"] = ruleAction
    body["protocol"] = ec2Protocol
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["networkAclId"] = networkAclId
    body["egress"] = egress
    body["cidrBlock"] = cidrBlock
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - portRange: <p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying 6 (TCP) or 17 (UDP) for the protocol.</p>
      - icmpTypeCode: <p>ICMP protocol: The ICMP type and code. Required if specifying 1 (ICMP) for the protocol.</p>
      - ruleNumber: <p>The rule number of the entry to replace.</p>
      - ruleAction: <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
      - ec2Protocol: <p>The IP protocol. You can specify <code>all</code> or <code>-1</code> to mean all protocols.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - networkAclId: <p>The ID of the ACL.</p>
      - egress: <p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p>
      - cidrBlock: <p>The network range to allow or deny, in CIDR notation.</p>
 */
  public init(portRange: PortRange?, icmpTypeCode: IcmpTypeCode?, ruleNumber: Int, ruleAction: Ruleaction, ec2Protocol: String, dryRun: Bool?, networkAclId: String, egress: Bool, cidrBlock: String) {
self.portRange = portRange
self.icmpTypeCode = icmpTypeCode
self.ruleNumber = ruleNumber
self.ruleAction = ruleAction
self.ec2Protocol = ec2Protocol
self.dryRun = dryRun
self.networkAclId = networkAclId
self.egress = egress
self.cidrBlock = cidrBlock
  }
}

/**
<p>Describes a block device for an EBS volume.</p>
 */
public struct EbsBlockDevice: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the snapshot.</p>
 */
  public let snapshotId: String?
/**
<p>Indicates whether the EBS volume is deleted on instance termination.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The volume type: <code>gp2</code>, <code>io1</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code>.</p> <p>Default: <code>standard</code> </p>
 */
  public let volumeType: Volumetype?
/**
<p>The size of the volume, in GiB.</p> <p>Constraints: 1-16384 for General Purpose SSD (<code>gp2</code>), 4-16384 for Provisioned IOPS SSD (<code>io1</code>), 500-16384 for Throughput Optimized HDD (<code>st1</code>), 500-16384 for Cold HDD (<code>sc1</code>), and 1-1024 for Magnetic (<code>standard</code>) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
 */
  public let volumeSize: Int?
/**
<p>The number of I/O operations per second (IOPS) that the volume supports. For <code>io1</code>, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code>, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for <code>io1</code> volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code> volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
 */
  public let iops: Int?
/**
<p>Indicates whether the EBS volume is encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption.</p>
 */
  public let encrypted: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if volumeType != nil { body["volumeType"] = volumeType! }
    if volumeSize != nil { body["volumeSize"] = volumeSize! }
    if iops != nil { body["iops"] = iops! }
    if encrypted != nil { body["encrypted"] = encrypted! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> EbsBlockDevice {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return EbsBlockDevice(
        snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      volumeType: jsonDict["volumeType"].flatMap { ($0 is NSNull) ? nil : Volumetype.deserialize(response: response, body: .json($0)) },
      volumeSize: jsonDict["volumeSize"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      iops: jsonDict["iops"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      encrypted: jsonDict["encrypted"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - snapshotId: <p>The ID of the snapshot.</p>
      - deleteOnTermination: <p>Indicates whether the EBS volume is deleted on instance termination.</p>
      - volumeType: <p>The volume type: <code>gp2</code>, <code>io1</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code>.</p> <p>Default: <code>standard</code> </p>
      - volumeSize: <p>The size of the volume, in GiB.</p> <p>Constraints: 1-16384 for General Purpose SSD (<code>gp2</code>), 4-16384 for Provisioned IOPS SSD (<code>io1</code>), 500-16384 for Throughput Optimized HDD (<code>st1</code>), 500-16384 for Cold HDD (<code>sc1</code>), and 1-1024 for Magnetic (<code>standard</code>) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
      - iops: <p>The number of I/O operations per second (IOPS) that the volume supports. For <code>io1</code>, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code>, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for <code>io1</code> volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code> volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
      - encrypted: <p>Indicates whether the EBS volume is encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption.</p>
 */
  public init(snapshotId: String?, deleteOnTermination: Bool?, volumeType: Volumetype?, volumeSize: Int?, iops: Int?, encrypted: Bool?) {
self.snapshotId = snapshotId
self.deleteOnTermination = deleteOnTermination
self.volumeType = volumeType
self.volumeSize = volumeSize
self.iops = iops
self.encrypted = encrypted
  }
}

/**
<p>Contains the output for DescribeExportTasks.</p>
 */
public struct DescribeExportTasksResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the export tasks.</p>
 */
  public let exportTasks: [ExportTask]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if exportTasks != nil { body["exportTaskSet"] = exportTasks! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeExportTasksResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeExportTasksResult(
        exportTasks: jsonDict["exportTaskSet"].flatMap { ($0 is NSNull) ? nil : [ExportTask].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - exportTasks: <p>Information about the export tasks.</p>
 */
  public init(exportTasks: [ExportTask]?) {
self.exportTasks = exportTasks
  }
}

enum Scope: String, RestJsonDeserializable, RestJsonSerializable {
  case `availabilityZone` = "Availability Zone"
  case `region` = "Region"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Scope {
    guard case let .json(json) = body else { fatalError() }
    return Scope(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of CreateVpcPeeringConnection.</p>
 */
public struct CreateVpcPeeringConnectionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPC peering connection.</p>
 */
  public let vpcPeeringConnection: VpcPeeringConnection?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcPeeringConnection != nil { body["vpcPeeringConnection"] = vpcPeeringConnection! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVpcPeeringConnectionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVpcPeeringConnectionResult(
        vpcPeeringConnection: jsonDict["vpcPeeringConnection"].flatMap { ($0 is NSNull) ? nil : VpcPeeringConnection.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcPeeringConnection: <p>Information about the VPC peering connection.</p>
 */
  public init(vpcPeeringConnection: VpcPeeringConnection?) {
self.vpcPeeringConnection = vpcPeeringConnection
  }
}


/**
<p>Contains the parameters for CancelConversionTask.</p>
 */
public struct CancelConversionRequest: RestJsonSerializable {
/**
<p>The reason for canceling the conversion task.</p>
 */
  public let reasonMessage: String?
/**
<p>The ID of the conversion task.</p>
 */
  public let conversionTaskId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reasonMessage != nil { body["reasonMessage"] = reasonMessage! }
    body["conversionTaskId"] = conversionTaskId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reasonMessage: <p>The reason for canceling the conversion task.</p>
      - conversionTaskId: <p>The ID of the conversion task.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(reasonMessage: String?, conversionTaskId: String, dryRun: Bool?) {
self.reasonMessage = reasonMessage
self.conversionTaskId = conversionTaskId
self.dryRun = dryRun
  }
}

/**
<p>Describes a DHCP configuration option.</p>
 */
public struct DhcpConfiguration: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of a DHCP option.</p>
 */
  public let key: String?
/**
<p>One or more values for the DHCP option.</p>
 */
  public let values: [AttributeValue]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if key != nil { body["key"] = key! }
    if values != nil { body["valueSet"] = values! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DhcpConfiguration {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DhcpConfiguration(
        key: jsonDict["key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      values: jsonDict["valueSet"].flatMap { ($0 is NSNull) ? nil : [AttributeValue].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - key: <p>The name of a DHCP option.</p>
      - values: <p>One or more values for the DHCP option.</p>
 */
  public init(key: String?, values: [AttributeValue]?) {
self.key = key
self.values = values
  }
}

/**
<p>Describes an IP range.</p>
 */
public struct IpRange: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The CIDR range. You can either specify a CIDR range or a source security group, not both.</p>
 */
  public let cidrIp: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if cidrIp != nil { body["cidrIp"] = cidrIp! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> IpRange {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return IpRange(
        cidrIp: jsonDict["cidrIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - cidrIp: <p>The CIDR range. You can either specify a CIDR range or a source security group, not both.</p>
 */
  public init(cidrIp: String?) {
self.cidrIp = cidrIp
  }
}


/**
<p>Contains the output of ModifyInstancePlacement.</p>
 */
public struct ModifyInstancePlacementResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ModifyInstancePlacementResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ModifyInstancePlacementResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

enum Fleettype: String, RestJsonDeserializable, RestJsonSerializable {
  case `request` = "request"
  case `maintain` = "maintain"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Fleettype {
    guard case let .json(json) = body else { fatalError() }
    return Fleettype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the parameters for DescribeVpcAttribute.</p>
 */
public struct DescribeVpcAttributeRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The VPC attribute.</p>
 */
  public let attribute: Vpcattributename
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpcId"] = vpcId
    body["Attribute"] = attribute
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - attribute: <p>The VPC attribute.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, attribute: Vpcattributename, dryRun: Bool?) {
self.vpcId = vpcId
self.attribute = attribute
self.dryRun = dryRun
  }
}

/**
<p>Describes a Reserved Instance modification.</p>
 */
public struct ReservedInstancesModification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IDs of one or more Reserved Instances.</p>
 */
  public let reservedInstancesIds: [ReservedInstancesId]?
/**
<p>The status of the Reserved Instances modification request.</p>
 */
  public let status: String?
/**
<p>The time for the modification to become effective.</p>
 */
  public let effectiveDate: Date?
/**
<p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>Contains target configurations along with their corresponding new Reserved Instance IDs.</p>
 */
  public let modificationResults: [ReservedInstancesModificationResult]?
/**
<p>The time when the modification request was last updated.</p>
 */
  public let updateDate: Date?
/**
<p>A unique ID for the Reserved Instance modification.</p>
 */
  public let reservedInstancesModificationId: String?
/**
<p>The time when the modification request was created.</p>
 */
  public let createDate: Date?
/**
<p>The reason for the status.</p>
 */
  public let statusMessage: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesIds != nil { body["reservedInstancesSet"] = reservedInstancesIds! }
    if status != nil { body["status"] = status! }
    if effectiveDate != nil { body["effectiveDate"] = effectiveDate! }
    if clientToken != nil { body["clientToken"] = clientToken! }
    if modificationResults != nil { body["modificationResultSet"] = modificationResults! }
    if updateDate != nil { body["updateDate"] = updateDate! }
    if reservedInstancesModificationId != nil { body["reservedInstancesModificationId"] = reservedInstancesModificationId! }
    if createDate != nil { body["createDate"] = createDate! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReservedInstancesModification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReservedInstancesModification(
        reservedInstancesIds: jsonDict["reservedInstancesSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesId].deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      effectiveDate: jsonDict["effectiveDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      modificationResults: jsonDict["modificationResultSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesModificationResult].deserialize(response: response, body: .json($0)) },
      updateDate: jsonDict["updateDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      reservedInstancesModificationId: jsonDict["reservedInstancesModificationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      createDate: jsonDict["createDate"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesIds: <p>The IDs of one or more Reserved Instances.</p>
      - status: <p>The status of the Reserved Instances modification request.</p>
      - effectiveDate: <p>The time for the modification to become effective.</p>
      - clientToken: <p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
      - modificationResults: <p>Contains target configurations along with their corresponding new Reserved Instance IDs.</p>
      - updateDate: <p>The time when the modification request was last updated.</p>
      - reservedInstancesModificationId: <p>A unique ID for the Reserved Instance modification.</p>
      - createDate: <p>The time when the modification request was created.</p>
      - statusMessage: <p>The reason for the status.</p>
 */
  public init(reservedInstancesIds: [ReservedInstancesId]?, status: String?, effectiveDate: Date?, clientToken: String?, modificationResults: [ReservedInstancesModificationResult]?, updateDate: Date?, reservedInstancesModificationId: String?, createDate: Date?, statusMessage: String?) {
self.reservedInstancesIds = reservedInstancesIds
self.status = status
self.effectiveDate = effectiveDate
self.clientToken = clientToken
self.modificationResults = modificationResults
self.updateDate = updateDate
self.reservedInstancesModificationId = reservedInstancesModificationId
self.createDate = createDate
self.statusMessage = statusMessage
  }
}

/**
<p>Contains the output of DescribeAvailabiltyZones.</p>
 */
public struct DescribeAvailabilityZonesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more Availability Zones.</p>
 */
  public let availabilityZones: [AvailabilityZone]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if availabilityZones != nil { body["availabilityZoneInfo"] = availabilityZones! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeAvailabilityZonesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeAvailabilityZonesResult(
        availabilityZones: jsonDict["availabilityZoneInfo"].flatMap { ($0 is NSNull) ? nil : [AvailabilityZone].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - availabilityZones: <p>Information about one or more Availability Zones.</p>
 */
  public init(availabilityZones: [AvailabilityZone]?) {
self.availabilityZones = availabilityZones
  }
}

/**
<p>Contains the parameters for RejectVpcPeeringConnection.</p>
 */
public struct RejectVpcPeeringConnectionRequest: RestJsonSerializable {
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcPeeringConnectionId"] = vpcPeeringConnectionId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcPeeringConnectionId: String, dryRun: Bool?) {
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.dryRun = dryRun
  }
}


/**
<p>Contains the output of CreateImage.</p>
 */
public struct CreateImageResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the new AMI.</p>
 */
  public let imageId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if imageId != nil { body["imageId"] = imageId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateImageResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateImageResult(
        imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - imageId: <p>The ID of the new AMI.</p>
 */
  public init(imageId: String?) {
self.imageId = imageId
  }
}

/**
<p>Describes an import volume task.</p>
 */
public struct ImportVolumeTaskDetails: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The image.</p>
 */
  public let image: DiskImageDescription
/**
<p>The number of bytes converted so far.</p>
 */
  public let bytesConverted: Int
/**
<p>The volume.</p>
 */
  public let volume: DiskImageVolumeDescription
/**
<p>The Availability Zone where the resulting volume will reside.</p>
 */
  public let availabilityZone: String
/**
<p>The description you provided when starting the import volume task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["image"] = image
    body["bytesConverted"] = bytesConverted
    body["volume"] = volume
    body["availabilityZone"] = availabilityZone
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportVolumeTaskDetails {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportVolumeTaskDetails(
        image: jsonDict["image"].flatMap { ($0 is NSNull) ? nil : DiskImageDescription.deserialize(response: response, body: .json($0)) }!,
      bytesConverted: jsonDict["bytesConverted"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }!,
      volume: jsonDict["volume"].flatMap { ($0 is NSNull) ? nil : DiskImageVolumeDescription.deserialize(response: response, body: .json($0)) }!,
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - image: <p>The image.</p>
      - bytesConverted: <p>The number of bytes converted so far.</p>
      - volume: <p>The volume.</p>
      - availabilityZone: <p>The Availability Zone where the resulting volume will reside.</p>
      - description: <p>The description you provided when starting the import volume task.</p>
 */
  public init(image: DiskImageDescription, bytesConverted: Int, volume: DiskImageVolumeDescription, availabilityZone: String, description: String?) {
self.image = image
self.bytesConverted = bytesConverted
self.volume = volume
self.availabilityZone = availabilityZone
self.description = description
  }
}


/**
<p>Describes association information for an Elastic IP address.</p>
 */
public struct NetworkInterfaceAssociation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The association ID.</p>
 */
  public let associationId: String?
/**
<p>The address of the Elastic IP address bound to the network interface.</p>
 */
  public let publicIp: String?
/**
<p>The ID of the Elastic IP address owner.</p>
 */
  public let ipOwnerId: String?
/**
<p>The allocation ID.</p>
 */
  public let allocationId: String?
/**
<p>The public DNS name.</p>
 */
  public let publicDnsName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if associationId != nil { body["associationId"] = associationId! }
    if publicIp != nil { body["publicIp"] = publicIp! }
    if ipOwnerId != nil { body["ipOwnerId"] = ipOwnerId! }
    if allocationId != nil { body["allocationId"] = allocationId! }
    if publicDnsName != nil { body["publicDnsName"] = publicDnsName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkInterfaceAssociation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkInterfaceAssociation(
        associationId: jsonDict["associationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      publicIp: jsonDict["publicIp"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ipOwnerId: jsonDict["ipOwnerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      allocationId: jsonDict["allocationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      publicDnsName: jsonDict["publicDnsName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - associationId: <p>The association ID.</p>
      - publicIp: <p>The address of the Elastic IP address bound to the network interface.</p>
      - ipOwnerId: <p>The ID of the Elastic IP address owner.</p>
      - allocationId: <p>The allocation ID.</p>
      - publicDnsName: <p>The public DNS name.</p>
 */
  public init(associationId: String?, publicIp: String?, ipOwnerId: String?, allocationId: String?, publicDnsName: String?) {
self.associationId = associationId
self.publicIp = publicIp
self.ipOwnerId = ipOwnerId
self.allocationId = allocationId
self.publicDnsName = publicDnsName
  }
}

/**
<p>Describes the recurring schedule for a Scheduled Instance.</p>
 */
public struct ScheduledInstanceRecurrenceRequest: RestJsonSerializable {
/**
<p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.</p>
 */
  public let occurrenceDays: [Int]?
/**
<p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>
 */
  public let frequency: String?
/**
<p>The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>). This value is required for a monthly schedule. You can't specify <code>DayOfWeek</code> with a weekly schedule. You can't specify this value with a daily schedule.</p>
 */
  public let occurrenceUnit: String?
/**
<p>Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.</p>
 */
  public let occurrenceRelativeToEnd: Bool?
/**
<p>The interval quantity. The interval unit depends on the value of <code>Frequency</code>. For example, every 2 weeks or every 2 months.</p>
 */
  public let interval: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if occurrenceDays != nil { body["OccurrenceDay"] = occurrenceDays! }
    if frequency != nil { body["Frequency"] = frequency! }
    if occurrenceUnit != nil { body["OccurrenceUnit"] = occurrenceUnit! }
    if occurrenceRelativeToEnd != nil { body["OccurrenceRelativeToEnd"] = occurrenceRelativeToEnd! }
    if interval != nil { body["Interval"] = interval! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - occurrenceDays: <p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.</p>
      - frequency: <p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>
      - occurrenceUnit: <p>The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>). This value is required for a monthly schedule. You can't specify <code>DayOfWeek</code> with a weekly schedule. You can't specify this value with a daily schedule.</p>
      - occurrenceRelativeToEnd: <p>Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.</p>
      - interval: <p>The interval quantity. The interval unit depends on the value of <code>Frequency</code>. For example, every 2 weeks or every 2 months.</p>
 */
  public init(occurrenceDays: [Int]?, frequency: String?, occurrenceUnit: String?, occurrenceRelativeToEnd: Bool?, interval: Int?) {
self.occurrenceDays = occurrenceDays
self.frequency = frequency
self.occurrenceUnit = occurrenceUnit
self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
self.interval = interval
  }
}

/**
<p>A filter name and value pair that is used to return a more specific list of results. Filters can be used to match a set of resources by various criteria, such as tags, attributes, or IDs.</p>
 */
public struct Filter: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the filter. Filter names are case-sensitive.</p>
 */
  public let name: String?
/**
<p>One or more filter values. Filter values are case-sensitive.</p>
 */
  public let values: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if name != nil { body["Name"] = name! }
    if values != nil { body["Value"] = values! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Filter {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Filter(
        name: jsonDict["Name"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      values: jsonDict["Value"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - name: <p>The name of the filter. Filter names are case-sensitive.</p>
      - values: <p>One or more filter values. Filter values are case-sensitive.</p>
 */
  public init(name: String?, values: [String]?) {
self.name = name
self.values = values
  }
}

/**
<p>Contains the parameters for MonitorInstances.</p>
 */
public struct MonitorInstancesRequest: RestJsonSerializable {
/**
<p>One or more instance IDs.</p>
 */
  public let instanceIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceIds: <p>One or more instance IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceIds: [String], dryRun: Bool?) {
self.instanceIds = instanceIds
self.dryRun = dryRun
  }
}

/**
<p>Describes the launch specification for an instance.</p>
 */
public struct LaunchSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more block device mapping entries.</p> <p>Although you can specify encrypted EBS volumes in this block device mapping for your Spot Instances, these volumes are not encrypted.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>The ID of the subnet in which to launch the instance.</p>
 */
  public let subnetId: String?
/**
<p>The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let userData: String?
/**
<p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
 */
  public let ebsOptimized: Bool?
/**
<p>The ID of the kernel.</p>
 */
  public let kernelId: String?
/**

 */
  public let monitoring: RunInstancesMonitoringEnabled?
/**
<p>The instance type.</p>
 */
  public let instanceType: Instancetype?
/**
<p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
 */
  public let securityGroups: [GroupIdentifier]?
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String?
/**
<p>Deprecated.</p>
 */
  public let addressingType: String?
/**
<p>The IAM instance profile.</p>
 */
  public let iamInstanceProfile: IamInstanceProfileSpecification?
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String?
/**
<p>One or more network interfaces.</p>
 */
  public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
/**
<p>The placement information for the instance.</p>
 */
  public let placement: SpotPlacement?
/**
<p>The ID of the RAM disk.</p>
 */
  public let ramdiskId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if userData != nil { body["userData"] = userData! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if kernelId != nil { body["kernelId"] = kernelId! }
    if monitoring != nil { body["monitoring"] = monitoring! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if securityGroups != nil { body["groupSet"] = securityGroups! }
    if keyName != nil { body["keyName"] = keyName! }
    if addressingType != nil { body["addressingType"] = addressingType! }
    if iamInstanceProfile != nil { body["iamInstanceProfile"] = iamInstanceProfile! }
    if imageId != nil { body["imageId"] = imageId! }
    if networkInterfaces != nil { body["networkInterfaceSet"] = networkInterfaces! }
    if placement != nil { body["placement"] = placement! }
    if ramdiskId != nil { body["ramdiskId"] = ramdiskId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> LaunchSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return LaunchSpecification(
        blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [BlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userData: jsonDict["userData"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebsOptimized: jsonDict["ebsOptimized"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernelId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      monitoring: jsonDict["monitoring"].flatMap { ($0 is NSNull) ? nil : RunInstancesMonitoringEnabled.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      securityGroups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      addressingType: jsonDict["addressingType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      iamInstanceProfile: jsonDict["iamInstanceProfile"].flatMap { ($0 is NSNull) ? nil : IamInstanceProfileSpecification.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaces: jsonDict["networkInterfaceSet"].flatMap { ($0 is NSNull) ? nil : [InstanceNetworkInterfaceSpecification].deserialize(response: response, body: .json($0)) },
      placement: jsonDict["placement"].flatMap { ($0 is NSNull) ? nil : SpotPlacement.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdiskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>One or more block device mapping entries.</p> <p>Although you can specify encrypted EBS volumes in this block device mapping for your Spot Instances, these volumes are not encrypted.</p>
      - subnetId: <p>The ID of the subnet in which to launch the instance.</p>
      - userData: <p>The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
      - ebsOptimized: <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
      - kernelId: <p>The ID of the kernel.</p>
      - monitoring: 
      - instanceType: <p>The instance type.</p>
      - securityGroups: <p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
      - keyName: <p>The name of the key pair.</p>
      - addressingType: <p>Deprecated.</p>
      - iamInstanceProfile: <p>The IAM instance profile.</p>
      - imageId: <p>The ID of the AMI.</p>
      - networkInterfaces: <p>One or more network interfaces.</p>
      - placement: <p>The placement information for the instance.</p>
      - ramdiskId: <p>The ID of the RAM disk.</p>
 */
  public init(blockDeviceMappings: [BlockDeviceMapping]?, subnetId: String?, userData: String?, ebsOptimized: Bool?, kernelId: String?, monitoring: RunInstancesMonitoringEnabled?, instanceType: Instancetype?, securityGroups: [GroupIdentifier]?, keyName: String?, addressingType: String?, iamInstanceProfile: IamInstanceProfileSpecification?, imageId: String?, networkInterfaces: [InstanceNetworkInterfaceSpecification]?, placement: SpotPlacement?, ramdiskId: String?) {
self.blockDeviceMappings = blockDeviceMappings
self.subnetId = subnetId
self.userData = userData
self.ebsOptimized = ebsOptimized
self.kernelId = kernelId
self.monitoring = monitoring
self.instanceType = instanceType
self.securityGroups = securityGroups
self.keyName = keyName
self.addressingType = addressingType
self.iamInstanceProfile = iamInstanceProfile
self.imageId = imageId
self.networkInterfaces = networkInterfaces
self.placement = placement
self.ramdiskId = ramdiskId
  }
}

/**
<p>Contains the output of RequestSpotInstances.</p>
 */
public struct RequestSpotInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more Spot instance requests.</p>
 */
  public let spotInstanceRequests: [SpotInstanceRequest]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotInstanceRequests != nil { body["spotInstanceRequestSet"] = spotInstanceRequests! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RequestSpotInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RequestSpotInstancesResult(
        spotInstanceRequests: jsonDict["spotInstanceRequestSet"].flatMap { ($0 is NSNull) ? nil : [SpotInstanceRequest].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - spotInstanceRequests: <p>One or more Spot instance requests.</p>
 */
  public init(spotInstanceRequests: [SpotInstanceRequest]?) {
self.spotInstanceRequests = spotInstanceRequests
  }
}

/**
<p>Contains the parameters for CreateNetworkAclEntry.</p>
 */
public struct CreateNetworkAclEntryRequest: RestJsonSerializable {
/**
<p>TCP or UDP protocols: The range of ports the rule applies to.</p>
 */
  public let portRange: PortRange?
/**
<p>ICMP protocol: The ICMP type and code. Required if specifying ICMP for the protocol.</p>
 */
  public let icmpTypeCode: IcmpTypeCode?
/**
<p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
 */
  public let ruleNumber: Int
/**
<p>Indicates whether to allow or deny the traffic that matches the rule.</p>
 */
  public let ruleAction: Ruleaction
/**
<p>The protocol. A value of -1 means all protocols.</p>
 */
  public let ec2Protocol: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the network ACL.</p>
 */
  public let networkAclId: String
/**
<p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
 */
  public let egress: Bool
/**
<p>The network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).</p>
 */
  public let cidrBlock: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if portRange != nil { body["portRange"] = portRange! }
    if icmpTypeCode != nil { body["Icmp"] = icmpTypeCode! }
    body["ruleNumber"] = ruleNumber
    body["ruleAction"] = ruleAction
    body["protocol"] = ec2Protocol
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["networkAclId"] = networkAclId
    body["egress"] = egress
    body["cidrBlock"] = cidrBlock
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - portRange: <p>TCP or UDP protocols: The range of ports the rule applies to.</p>
      - icmpTypeCode: <p>ICMP protocol: The ICMP type and code. Required if specifying ICMP for the protocol.</p>
      - ruleNumber: <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
      - ruleAction: <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
      - ec2Protocol: <p>The protocol. A value of -1 means all protocols.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - networkAclId: <p>The ID of the network ACL.</p>
      - egress: <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
      - cidrBlock: <p>The network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).</p>
 */
  public init(portRange: PortRange?, icmpTypeCode: IcmpTypeCode?, ruleNumber: Int, ruleAction: Ruleaction, ec2Protocol: String, dryRun: Bool?, networkAclId: String, egress: Bool, cidrBlock: String) {
self.portRange = portRange
self.icmpTypeCode = icmpTypeCode
self.ruleNumber = ruleNumber
self.ruleAction = ruleAction
self.ec2Protocol = ec2Protocol
self.dryRun = dryRun
self.networkAclId = networkAclId
self.egress = egress
self.cidrBlock = cidrBlock
  }
}

/**
<p>Contains the output of CancelBundleTask.</p>
 */
public struct CancelBundleTaskResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the bundle task.</p>
 */
  public let bundleTask: BundleTask?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if bundleTask != nil { body["bundleInstanceTask"] = bundleTask! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelBundleTaskResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelBundleTaskResult(
        bundleTask: jsonDict["bundleInstanceTask"].flatMap { ($0 is NSNull) ? nil : BundleTask.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - bundleTask: <p>Information about the bundle task.</p>
 */
  public init(bundleTask: BundleTask?) {
self.bundleTask = bundleTask
  }
}

/**
<p>Describes a VPC peering connection.</p>
 */
public struct VpcPeeringConnection: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String?
/**
<p>Information about the accepter VPC. CIDR block information is not returned when creating a VPC peering connection, or when describing a VPC peering connection that's in the <code>initiating-request</code> or <code>pending-acceptance</code> state.</p>
 */
  public let accepterVpcInfo: VpcPeeringConnectionVpcInfo?
/**
<p>The status of the VPC peering connection.</p>
 */
  public let status: VpcPeeringConnectionStateReason?
/**
<p>The time that an unaccepted VPC peering connection will expire.</p>
 */
  public let expirationTime: Date?
/**
<p>Any tags assigned to the resource.</p>
 */
  public let tags: [Tag]?
/**
<p>Information about the requester VPC.</p>
 */
  public let requesterVpcInfo: VpcPeeringConnectionVpcInfo?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
    if accepterVpcInfo != nil { body["accepterVpcInfo"] = accepterVpcInfo! }
    if status != nil { body["status"] = status! }
    if expirationTime != nil { body["expirationTime"] = expirationTime! }
    if tags != nil { body["tagSet"] = tags! }
    if requesterVpcInfo != nil { body["requesterVpcInfo"] = requesterVpcInfo! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcPeeringConnection {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcPeeringConnection(
        vpcPeeringConnectionId: jsonDict["vpcPeeringConnectionId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      accepterVpcInfo: jsonDict["accepterVpcInfo"].flatMap { ($0 is NSNull) ? nil : VpcPeeringConnectionVpcInfo.deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : VpcPeeringConnectionStateReason.deserialize(response: response, body: .json($0)) },
      expirationTime: jsonDict["expirationTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      requesterVpcInfo: jsonDict["requesterVpcInfo"].flatMap { ($0 is NSNull) ? nil : VpcPeeringConnectionVpcInfo.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
      - accepterVpcInfo: <p>Information about the accepter VPC. CIDR block information is not returned when creating a VPC peering connection, or when describing a VPC peering connection that's in the <code>initiating-request</code> or <code>pending-acceptance</code> state.</p>
      - status: <p>The status of the VPC peering connection.</p>
      - expirationTime: <p>The time that an unaccepted VPC peering connection will expire.</p>
      - tags: <p>Any tags assigned to the resource.</p>
      - requesterVpcInfo: <p>Information about the requester VPC.</p>
 */
  public init(vpcPeeringConnectionId: String?, accepterVpcInfo: VpcPeeringConnectionVpcInfo?, status: VpcPeeringConnectionStateReason?, expirationTime: Date?, tags: [Tag]?, requesterVpcInfo: VpcPeeringConnectionVpcInfo?) {
self.vpcPeeringConnectionId = vpcPeeringConnectionId
self.accepterVpcInfo = accepterVpcInfo
self.status = status
self.expirationTime = expirationTime
self.tags = tags
self.requesterVpcInfo = requesterVpcInfo
  }
}

enum Shutdownbehavior: String, RestJsonDeserializable, RestJsonSerializable {
  case `stop` = "stop"
  case `terminate` = "terminate"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Shutdownbehavior {
    guard case let .json(json) = body else { fatalError() }
    return Shutdownbehavior(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of RegisterImage.</p>
 */
public struct RegisterImageResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the newly registered AMI.</p>
 */
  public let imageId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if imageId != nil { body["imageId"] = imageId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RegisterImageResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RegisterImageResult(
        imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - imageId: <p>The ID of the newly registered AMI.</p>
 */
  public init(imageId: String?) {
self.imageId = imageId
  }
}



enum Eventcode: String, RestJsonDeserializable, RestJsonSerializable {
  case `instancereboot` = "instance-reboot"
  case `systemreboot` = "system-reboot"
  case `systemmaintenance` = "system-maintenance"
  case `instanceretirement` = "instance-retirement"
  case `instancestop` = "instance-stop"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Eventcode {
    guard case let .json(json) = body else { fatalError() }
    return Eventcode(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of RejectVpcPeeringConnection.</p>
 */
public struct RejectVpcPeeringConnectionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RejectVpcPeeringConnectionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RejectVpcPeeringConnectionResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

/**
<p>Describes the client-specific data.</p>
 */
public struct ClientData: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The size of the uploaded disk image, in GiB.</p>
 */
  public let uploadSize: Double?
/**
<p>The time that the disk upload starts.</p>
 */
  public let uploadStart: Date?
/**
<p>The time that the disk upload ends.</p>
 */
  public let uploadEnd: Date?
/**
<p>A user-defined comment about the disk upload.</p>
 */
  public let comment: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if uploadSize != nil { body["UploadSize"] = uploadSize! }
    if uploadStart != nil { body["UploadStart"] = uploadStart! }
    if uploadEnd != nil { body["UploadEnd"] = uploadEnd! }
    if comment != nil { body["Comment"] = comment! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ClientData {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ClientData(
        uploadSize: jsonDict["UploadSize"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      uploadStart: jsonDict["UploadStart"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      uploadEnd: jsonDict["UploadEnd"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      comment: jsonDict["Comment"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - uploadSize: <p>The size of the uploaded disk image, in GiB.</p>
      - uploadStart: <p>The time that the disk upload starts.</p>
      - uploadEnd: <p>The time that the disk upload ends.</p>
      - comment: <p>A user-defined comment about the disk upload.</p>
 */
  public init(uploadSize: Double?, uploadStart: Date?, uploadEnd: Date?, comment: String?) {
self.uploadSize = uploadSize
self.uploadStart = uploadStart
self.uploadEnd = uploadEnd
self.comment = comment
  }
}

/**
<p>Describes a disk image.</p>
 */
public struct DiskImageDescription: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The disk image format.</p>
 */
  public let format: Diskimageformat
/**
<p>The checksum computed for the disk image.</p>
 */
  public let checksum: String?
/**
<p>The size of the disk image, in GiB.</p>
 */
  public let size: Int
/**
<p>A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
 */
  public let importManifestUrl: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["format"] = format
    if checksum != nil { body["checksum"] = checksum! }
    body["size"] = size
    body["importManifestUrl"] = importManifestUrl
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DiskImageDescription {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DiskImageDescription(
        format: jsonDict["format"].flatMap { ($0 is NSNull) ? nil : Diskimageformat.deserialize(response: response, body: .json($0)) }!,
      checksum: jsonDict["checksum"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      size: jsonDict["size"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }!,
      importManifestUrl: jsonDict["importManifestUrl"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - format: <p>The disk image format.</p>
      - checksum: <p>The checksum computed for the disk image.</p>
      - size: <p>The size of the disk image, in GiB.</p>
      - importManifestUrl: <p>A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
 */
  public init(format: Diskimageformat, checksum: String?, size: Int, importManifestUrl: String) {
self.format = format
self.checksum = checksum
self.size = size
self.importManifestUrl = importManifestUrl
  }
}

/**
<p>Contains the output of CreateSubnet.</p>
 */
public struct CreateSubnetResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the subnet.</p>
 */
  public let subnet: Subnet?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnet != nil { body["subnet"] = subnet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateSubnetResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateSubnetResult(
        subnet: jsonDict["subnet"].flatMap { ($0 is NSNull) ? nil : Subnet.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnet: <p>Information about the subnet.</p>
 */
  public init(subnet: Subnet?) {
self.subnet = subnet
  }
}



/**
<p>Contains the output of GetConsoleOutput.</p>
 */
public struct GetConsoleOutputResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The time the output was last updated.</p>
 */
  public let timestamp: Date?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The console output, Base64-encoded. If using a command line tool, the tool decodes the output for you.</p>
 */
  public let output: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if timestamp != nil { body["timestamp"] = timestamp! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if output != nil { body["output"] = output! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> GetConsoleOutputResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return GetConsoleOutputResult(
        timestamp: jsonDict["timestamp"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      output: jsonDict["output"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - timestamp: <p>The time the output was last updated.</p>
      - instanceId: <p>The ID of the instance.</p>
      - output: <p>The console output, Base64-encoded. If using a command line tool, the tool decodes the output for you.</p>
 */
  public init(timestamp: Date?, instanceId: String?, output: String?) {
self.timestamp = timestamp
self.instanceId = instanceId
self.output = output
  }
}


/**
<p>Contains the parameters for DisassociateRouteTable.</p>
 */
public struct DisassociateRouteTableRequest: RestJsonSerializable {
/**
<p>The association ID representing the current association between the route table and subnet.</p>
 */
  public let associationId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["associationId"] = associationId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - associationId: <p>The association ID representing the current association between the route table and subnet.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(associationId: String, dryRun: Bool?) {
self.associationId = associationId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output for DescribeImportSnapshotTasks.</p>
 */
public struct DescribeImportSnapshotTasksResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
 */
  public let importSnapshotTasks: [ImportSnapshotTask]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if importSnapshotTasks != nil { body["importSnapshotTaskSet"] = importSnapshotTasks! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeImportSnapshotTasksResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeImportSnapshotTasksResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      importSnapshotTasks: jsonDict["importSnapshotTaskSet"].flatMap { ($0 is NSNull) ? nil : [ImportSnapshotTask].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - importSnapshotTasks: <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
 */
  public init(nextToken: String?, importSnapshotTasks: [ImportSnapshotTask]?) {
self.nextToken = nextToken
self.importSnapshotTasks = importSnapshotTasks
  }
}


/**
<p>Describes the status of a volume.</p>
 */
public struct VolumeStatusInfo: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The details of the volume status.</p>
 */
  public let details: [VolumeStatusDetails]?
/**
<p>The status of the volume.</p>
 */
  public let status: Volumestatusinfostatus?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if details != nil { body["details"] = details! }
    if status != nil { body["status"] = status! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VolumeStatusInfo {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VolumeStatusInfo(
        details: jsonDict["details"].flatMap { ($0 is NSNull) ? nil : [VolumeStatusDetails].deserialize(response: response, body: .json($0)) },
      status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Volumestatusinfostatus.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - details: <p>The details of the volume status.</p>
      - status: <p>The status of the volume.</p>
 */
  public init(details: [VolumeStatusDetails]?, status: Volumestatusinfostatus?) {
self.details = details
self.status = status
  }
}

/**
<p>Contains the parameters for DisableVpcClassicLinkDnsSupport.</p>
 */
public struct DisableVpcClassicLinkDnsSupportRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["VpcId"] = vpcId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
 */
  public init(vpcId: String?) {
self.vpcId = vpcId
  }
}


/**
<p>Contains the output of DescribeSubnets.</p>
 */
public struct DescribeSubnetsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more subnets.</p>
 */
  public let subnets: [Subnet]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnets != nil { body["subnetSet"] = subnets! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSubnetsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSubnetsResult(
        subnets: jsonDict["subnetSet"].flatMap { ($0 is NSNull) ? nil : [Subnet].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnets: <p>Information about one or more subnets.</p>
 */
  public init(subnets: [Subnet]?) {
self.subnets = subnets
  }
}

/**
<p>Contains the output of DeleteVpcPeeringConnection.</p>
 */
public struct DeleteVpcPeeringConnectionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public let ec2Return: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if ec2Return != nil { body["return"] = ec2Return! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DeleteVpcPeeringConnectionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DeleteVpcPeeringConnectionResult(
        ec2Return: jsonDict["return"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - ec2Return: <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
 */
  public init(ec2Return: Bool?) {
self.ec2Return = ec2Return
  }
}

/**
<p>Contains the output of DeleteVpcEndpoints.</p>
 */
public struct DeleteVpcEndpointsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the endpoints that were not successfully deleted.</p>
 */
  public let unsuccessful: [UnsuccessfulItem]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if unsuccessful != nil { body["unsuccessful"] = unsuccessful! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DeleteVpcEndpointsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DeleteVpcEndpointsResult(
        unsuccessful: jsonDict["unsuccessful"].flatMap { ($0 is NSNull) ? nil : [UnsuccessfulItem].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - unsuccessful: <p>Information about the endpoints that were not successfully deleted.</p>
 */
  public init(unsuccessful: [UnsuccessfulItem]?) {
self.unsuccessful = unsuccessful
  }
}

/**
<p>Describes the S3 bucket for the disk image.</p>
 */
public struct UserBucketDetails: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The S3 bucket from which the disk image was created.</p>
 */
  public let s3Bucket: String?
/**
<p>The file name of the disk image.</p>
 */
  public let s3Key: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if s3Bucket != nil { body["s3Bucket"] = s3Bucket! }
    if s3Key != nil { body["s3Key"] = s3Key! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UserBucketDetails {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UserBucketDetails(
        s3Bucket: jsonDict["s3Bucket"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      s3Key: jsonDict["s3Key"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - s3Bucket: <p>The S3 bucket from which the disk image was created.</p>
      - s3Key: <p>The file name of the disk image.</p>
 */
  public init(s3Bucket: String?, s3Key: String?) {
self.s3Bucket = s3Bucket
self.s3Key = s3Key
  }
}

/**
<p>Contains the output of RequestSpotFleet.</p>
 */
public struct RequestSpotFleetResponse: RestJsonDeserializable {
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String


  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RequestSpotFleetResponse {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RequestSpotFleetResponse(
        spotFleetRequestId: jsonDict["spotFleetRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
 */
  public init(spotFleetRequestId: String) {
self.spotFleetRequestId = spotFleetRequestId
  }
}


/**
<p>Describes an IAM instance profile for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesIamInstanceProfile: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name.</p>
 */
  public let name: String?
/**
<p>The Amazon Resource Name (ARN).</p>
 */
  public let arn: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if name != nil { body["Name"] = name! }
    if arn != nil { body["Arn"] = arn! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesIamInstanceProfile {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesIamInstanceProfile(
        name: jsonDict["Name"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      arn: jsonDict["Arn"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - name: <p>The name.</p>
      - arn: <p>The Amazon Resource Name (ARN).</p>
 */
  public init(name: String?, arn: String?) {
self.name = name
self.arn = arn
  }
}

/**
<p>Contains the parameters for AttachInternetGateway.</p>
 */
public struct AttachInternetGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The ID of the Internet gateway.</p>
 */
  public let internetGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    body["internetGatewayId"] = internetGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - internetGatewayId: <p>The ID of the Internet gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, internetGatewayId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.internetGatewayId = internetGatewayId
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of CopySnapshot.</p>
 */
public struct CopySnapshotResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the new snapshot.</p>
 */
  public let snapshotId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CopySnapshotResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CopySnapshotResult(
        snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - snapshotId: <p>The ID of the new snapshot.</p>
 */
  public init(snapshotId: String?) {
self.snapshotId = snapshotId
  }
}


/**
<p>Contains the output of AcceptVpcPeeringConnection.</p>
 */
public struct AcceptVpcPeeringConnectionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPC peering connection.</p>
 */
  public let vpcPeeringConnection: VpcPeeringConnection?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcPeeringConnection != nil { body["vpcPeeringConnection"] = vpcPeeringConnection! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AcceptVpcPeeringConnectionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AcceptVpcPeeringConnectionResult(
        vpcPeeringConnection: jsonDict["vpcPeeringConnection"].flatMap { ($0 is NSNull) ? nil : VpcPeeringConnection.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcPeeringConnection: <p>Information about the VPC peering connection.</p>
 */
  public init(vpcPeeringConnection: VpcPeeringConnection?) {
self.vpcPeeringConnection = vpcPeeringConnection
  }
}

/**
<p>Contains the output for ImportSnapshot.</p>
 */
public struct ImportSnapshotResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the import snapshot task.</p>
 */
  public let importTaskId: String?
/**
<p>Information about the import snapshot task.</p>
 */
  public let snapshotTaskDetail: SnapshotTaskDetail?
/**
<p>A description of the import snapshot task.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if importTaskId != nil { body["importTaskId"] = importTaskId! }
    if snapshotTaskDetail != nil { body["snapshotTaskDetail"] = snapshotTaskDetail! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportSnapshotResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportSnapshotResult(
        importTaskId: jsonDict["importTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotTaskDetail: jsonDict["snapshotTaskDetail"].flatMap { ($0 is NSNull) ? nil : SnapshotTaskDetail.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - importTaskId: <p>The ID of the import snapshot task.</p>
      - snapshotTaskDetail: <p>Information about the import snapshot task.</p>
      - description: <p>A description of the import snapshot task.</p>
 */
  public init(importTaskId: String?, snapshotTaskDetail: SnapshotTaskDetail?, description: String?) {
self.importTaskId = importTaskId
self.snapshotTaskDetail = snapshotTaskDetail
self.description = description
  }
}

/**
<p>Contains the output of DescribeDhcpOptions.</p>
 */
public struct DescribeDhcpOptionsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more DHCP options sets.</p>
 */
  public let dhcpOptions: [DhcpOptions]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dhcpOptions != nil { body["dhcpOptionsSet"] = dhcpOptions! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeDhcpOptionsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeDhcpOptionsResult(
        dhcpOptions: jsonDict["dhcpOptionsSet"].flatMap { ($0 is NSNull) ? nil : [DhcpOptions].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - dhcpOptions: <p>Information about one or more DHCP options sets.</p>
 */
  public init(dhcpOptions: [DhcpOptions]?) {
self.dhcpOptions = dhcpOptions
  }
}

/**
<p>Contains the output of DeleteFlowLogs.</p>
 */
public struct DeleteFlowLogsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the flow logs that could not be deleted successfully.</p>
 */
  public let unsuccessful: [UnsuccessfulItem]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if unsuccessful != nil { body["unsuccessful"] = unsuccessful! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DeleteFlowLogsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DeleteFlowLogsResult(
        unsuccessful: jsonDict["unsuccessful"].flatMap { ($0 is NSNull) ? nil : [UnsuccessfulItem].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - unsuccessful: <p>Information about the flow logs that could not be deleted successfully.</p>
 */
  public init(unsuccessful: [UnsuccessfulItem]?) {
self.unsuccessful = unsuccessful
  }
}

/**
<p>The disk container object for the import snapshot request.</p>
 */
public struct SnapshotDiskContainer: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The S3 bucket for the disk image.</p>
 */
  public let userBucket: UserBucket?
/**
<p>The format of the disk image being imported.</p> <p>Valid values: <code>RAW</code> | <code>VHD</code> | <code>VMDK</code> | <code>OVA</code> </p>
 */
  public let format: String?
/**
<p>The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).</p>
 */
  public let url: String?
/**
<p>The description of the disk image being imported.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if userBucket != nil { body["UserBucket"] = userBucket! }
    if format != nil { body["Format"] = format! }
    if url != nil { body["Url"] = url! }
    if description != nil { body["Description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SnapshotDiskContainer {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SnapshotDiskContainer(
        userBucket: jsonDict["UserBucket"].flatMap { ($0 is NSNull) ? nil : UserBucket.deserialize(response: response, body: .json($0)) },
      format: jsonDict["Format"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      url: jsonDict["Url"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["Description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - userBucket: <p>The S3 bucket for the disk image.</p>
      - format: <p>The format of the disk image being imported.</p> <p>Valid values: <code>RAW</code> | <code>VHD</code> | <code>VMDK</code> | <code>OVA</code> </p>
      - url: <p>The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).</p>
      - description: <p>The description of the disk image being imported.</p>
 */
  public init(userBucket: UserBucket?, format: String?, url: String?, description: String?) {
self.userBucket = userBucket
self.format = format
self.url = url
self.description = description
  }
}

/**
<p>Contains the parameters for DeleteRoute.</p>
 */
public struct DeleteRouteRequest: RestJsonSerializable {
/**
<p>The CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
 */
  public let destinationCidrBlock: String
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["destinationCidrBlock"] = destinationCidrBlock
    body["routeTableId"] = routeTableId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - destinationCidrBlock: <p>The CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
      - routeTableId: <p>The ID of the route table.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(destinationCidrBlock: String, routeTableId: String, dryRun: Bool?) {
self.destinationCidrBlock = destinationCidrBlock
self.routeTableId = routeTableId
self.dryRun = dryRun
  }
}


/**
<p>Describes the VPC peering connection options.</p>
 */
public struct PeeringConnectionOptions: RestJsonSerializable, RestJsonDeserializable {
/**
<p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC via ClassicLink.</p>
 */
  public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
/**
<p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
 */
  public let allowDnsResolutionFromRemoteVpc: Bool?
/**
<p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC via ClassicLink to instances in a peer VPC.</p>
 */
  public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if allowEgressFromLocalVpcToRemoteClassicLink != nil { body["allowEgressFromLocalVpcToRemoteClassicLink"] = allowEgressFromLocalVpcToRemoteClassicLink! }
    if allowDnsResolutionFromRemoteVpc != nil { body["allowDnsResolutionFromRemoteVpc"] = allowDnsResolutionFromRemoteVpc! }
    if allowEgressFromLocalClassicLinkToRemoteVpc != nil { body["allowEgressFromLocalClassicLinkToRemoteVpc"] = allowEgressFromLocalClassicLinkToRemoteVpc! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PeeringConnectionOptions {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PeeringConnectionOptions(
        allowEgressFromLocalVpcToRemoteClassicLink: jsonDict["allowEgressFromLocalVpcToRemoteClassicLink"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      allowDnsResolutionFromRemoteVpc: jsonDict["allowDnsResolutionFromRemoteVpc"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      allowEgressFromLocalClassicLinkToRemoteVpc: jsonDict["allowEgressFromLocalClassicLinkToRemoteVpc"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - allowEgressFromLocalVpcToRemoteClassicLink: <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC via ClassicLink.</p>
      - allowDnsResolutionFromRemoteVpc: <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
      - allowEgressFromLocalClassicLinkToRemoteVpc: <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC via ClassicLink to instances in a peer VPC.</p>
 */
  public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool?, allowDnsResolutionFromRemoteVpc: Bool?, allowEgressFromLocalClassicLinkToRemoteVpc: Bool?) {
self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
  }
}

/**
<p>Contains the parameters for DetachVpnGateway.</p>
 */
public struct DetachVpnGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let vpnGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpcId"] = vpcId
    body["VpnGatewayId"] = vpnGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - vpnGatewayId: <p>The ID of the virtual private gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, vpnGatewayId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.vpnGatewayId = vpnGatewayId
self.dryRun = dryRun
  }
}

/**
<p>Describes an association between a route table and a subnet.</p>
 */
public struct RouteTableAssociation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the subnet. A subnet ID is not returned for an implicit association.</p>
 */
  public let subnetId: String?
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String?
/**
<p>The ID of the association between a route table and a subnet.</p>
 */
  public let routeTableAssociationId: String?
/**
<p>Indicates whether this is the main route table.</p>
 */
  public let main: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if subnetId != nil { body["subnetId"] = subnetId! }
    if routeTableId != nil { body["routeTableId"] = routeTableId! }
    if routeTableAssociationId != nil { body["routeTableAssociationId"] = routeTableAssociationId! }
    if main != nil { body["main"] = main! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> RouteTableAssociation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return RouteTableAssociation(
        subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      routeTableId: jsonDict["routeTableId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      routeTableAssociationId: jsonDict["routeTableAssociationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      main: jsonDict["main"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - subnetId: <p>The ID of the subnet. A subnet ID is not returned for an implicit association.</p>
      - routeTableId: <p>The ID of the route table.</p>
      - routeTableAssociationId: <p>The ID of the association between a route table and a subnet.</p>
      - main: <p>Indicates whether this is the main route table.</p>
 */
  public init(subnetId: String?, routeTableId: String?, routeTableAssociationId: String?, main: Bool?) {
self.subnetId = subnetId
self.routeTableId = routeTableId
self.routeTableAssociationId = routeTableAssociationId
self.main = main
  }
}


/**
<p>Contains the parameters for UnmonitorInstances.</p>
 */
public struct UnmonitorInstancesRequest: RestJsonSerializable {
/**
<p>One or more instance IDs.</p>
 */
  public let instanceIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceIds
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceIds: <p>One or more instance IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceIds: [String], dryRun: Bool?) {
self.instanceIds = instanceIds
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DescribeExportTasks.</p>
 */
public struct DescribeExportTasksRequest: RestJsonSerializable {
/**
<p>One or more export task IDs.</p>
 */
  public let exportTaskIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if exportTaskIds != nil { body["exportTaskId"] = exportTaskIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - exportTaskIds: <p>One or more export task IDs.</p>
 */
  public init(exportTaskIds: [String]?) {
self.exportTaskIds = exportTaskIds
  }
}

/**
<p>Describes a Reserved Instance offering.</p>
 */
public struct PricingDetail: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The price per instance.</p>
 */
  public let price: Double?
/**
<p>The number of reservations available for the price.</p>
 */
  public let count: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if price != nil { body["price"] = price! }
    if count != nil { body["count"] = count! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PricingDetail {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PricingDetail(
        price: jsonDict["price"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      count: jsonDict["count"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - price: <p>The price per instance.</p>
      - count: <p>The number of reservations available for the price.</p>
 */
  public init(price: Double?, count: Int?) {
self.price = price
self.count = count
  }
}



/**
<p>Contains the output of the request.</p>
 */
public struct GetConsoleScreenshotResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The data that comprises the image.</p>
 */
  public let imageData: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceId != nil { body["instanceId"] = instanceId! }
    if imageData != nil { body["imageData"] = imageData! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> GetConsoleScreenshotResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return GetConsoleScreenshotResult(
        instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      imageData: jsonDict["imageData"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceId: <p>The ID of the instance.</p>
      - imageData: <p>The data that comprises the image.</p>
 */
  public init(instanceId: String?, imageData: String?) {
self.instanceId = instanceId
self.imageData = imageData
  }
}

/**
<p>Contains the parameters for DescribeReservedInstances.</p>
 */
public struct DescribeReservedInstancesRequest: RestJsonSerializable {
/**
<p>One or more Reserved Instance IDs.</p> <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>
 */
  public let reservedInstancesIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p> </li> <li> <p> <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.</p>
 */
  public let offeringType: Offeringtypevalues?
/**
<p>Describes whether the Reserved Instance is Standard or Convertible.</p>
 */
  public let offeringClass: Offeringclasstype?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesIds != nil { body["ReservedInstancesId"] = reservedInstancesIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if offeringType != nil { body["offeringType"] = offeringType! }
    if offeringClass != nil { body["OfferingClass"] = offeringClass! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstancesIds: <p>One or more Reserved Instance IDs.</p> <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p> </li> <li> <p> <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - offeringType: <p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.</p>
      - offeringClass: <p>Describes whether the Reserved Instance is Standard or Convertible.</p>
 */
  public init(reservedInstancesIds: [String]?, filters: [Filter]?, dryRun: Bool?, offeringType: Offeringtypevalues?, offeringClass: Offeringclasstype?) {
self.reservedInstancesIds = reservedInstancesIds
self.filters = filters
self.dryRun = dryRun
self.offeringType = offeringType
self.offeringClass = offeringClass
  }
}

/**
<p>Describes the placement for the instance.</p>
 */
public struct Placement: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <a>ImportInstance</a> command.</p>
 */
  public let affinity: String?
/**
<p>The name of the placement group the instance is in (for cluster compute instances).</p>
 */
  public let groupName: String?
/**
<p>The ID of the Dedicted host on which the instance resides. This parameter is not support for the <a>ImportInstance</a> command.</p>
 */
  public let hostId: String?
/**
<p>The Availability Zone of the instance.</p>
 */
  public let availabilityZone: String?
/**
<p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for the <a>ImportInstance</a> command.</p>
 */
  public let tenancy: Tenancy?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if affinity != nil { body["affinity"] = affinity! }
    if groupName != nil { body["groupName"] = groupName! }
    if hostId != nil { body["hostId"] = hostId! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if tenancy != nil { body["tenancy"] = tenancy! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Placement {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Placement(
        affinity: jsonDict["affinity"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      hostId: jsonDict["hostId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tenancy: jsonDict["tenancy"].flatMap { ($0 is NSNull) ? nil : Tenancy.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - affinity: <p>The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <a>ImportInstance</a> command.</p>
      - groupName: <p>The name of the placement group the instance is in (for cluster compute instances).</p>
      - hostId: <p>The ID of the Dedicted host on which the instance resides. This parameter is not support for the <a>ImportInstance</a> command.</p>
      - availabilityZone: <p>The Availability Zone of the instance.</p>
      - tenancy: <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for the <a>ImportInstance</a> command.</p>
 */
  public init(affinity: String?, groupName: String?, hostId: String?, availabilityZone: String?, tenancy: Tenancy?) {
self.affinity = affinity
self.groupName = groupName
self.hostId = hostId
self.availabilityZone = availabilityZone
self.tenancy = tenancy
  }
}



enum Attachmentstatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `attaching` = "attaching"
  case `attached` = "attached"
  case `detaching` = "detaching"
  case `detached` = "detached"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Attachmentstatus {
    guard case let .json(json) = body else { fatalError() }
    return Attachmentstatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

public struct DescribeStaleSecurityGroupsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the stale security groups.</p>
 */
  public let staleSecurityGroupSet: [StaleSecurityGroup]?
/**
<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if staleSecurityGroupSet != nil { body["staleSecurityGroupSet"] = staleSecurityGroupSet! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeStaleSecurityGroupsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeStaleSecurityGroupsResult(
        staleSecurityGroupSet: jsonDict["staleSecurityGroupSet"].flatMap { ($0 is NSNull) ? nil : [StaleSecurityGroup].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - staleSecurityGroupSet: <p>Information about the stale security groups.</p>
      - nextToken: <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
 */
  public init(staleSecurityGroupSet: [StaleSecurityGroup]?, nextToken: String?) {
self.staleSecurityGroupSet = staleSecurityGroupSet
self.nextToken = nextToken
  }
}

/**
<p>Describes a network interface for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesNetworkInterface: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The index of the device for the network interface attachment.</p>
 */
  public let deviceIndex: Int?
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String?
/**
<p>Indicates whether to assign a public IP address to instances launched in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is <code>true</code>.</p>
 */
  public let associatePublicIpAddress: Bool?
/**
<p>The IP address of the network interface within the subnet.</p>
 */
  public let privateIpAddress: String?
/**
<p>The private IP addresses.</p>
 */
  public let privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]?
/**
<p>The description.</p>
 */
  public let description: String?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String?
/**
<p>Indicates whether to delete the interface when the instance is terminated.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The number of secondary private IP addresses.</p>
 */
  public let secondaryPrivateIpAddressCount: Int?
/**
<p>The IDs of one or more security groups.</p>
 */
  public let groups: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deviceIndex != nil { body["DeviceIndex"] = deviceIndex! }
    if subnetId != nil { body["SubnetId"] = subnetId! }
    if associatePublicIpAddress != nil { body["AssociatePublicIpAddress"] = associatePublicIpAddress! }
    if privateIpAddress != nil { body["PrivateIpAddress"] = privateIpAddress! }
    if privateIpAddressConfigs != nil { body["PrivateIpAddressConfig"] = privateIpAddressConfigs! }
    if description != nil { body["Description"] = description! }
    if networkInterfaceId != nil { body["NetworkInterfaceId"] = networkInterfaceId! }
    if deleteOnTermination != nil { body["DeleteOnTermination"] = deleteOnTermination! }
    if secondaryPrivateIpAddressCount != nil { body["SecondaryPrivateIpAddressCount"] = secondaryPrivateIpAddressCount! }
    if groups != nil { body["Group"] = groups! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesNetworkInterface {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesNetworkInterface(
        deviceIndex: jsonDict["DeviceIndex"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["SubnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      associatePublicIpAddress: jsonDict["AssociatePublicIpAddress"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["PrivateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      privateIpAddressConfigs: jsonDict["PrivateIpAddressConfig"].flatMap { ($0 is NSNull) ? nil : [ScheduledInstancesPrivateIpAddressConfig].deserialize(response: response, body: .json($0)) },
      description: jsonDict["Description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaceId: jsonDict["NetworkInterfaceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["DeleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      secondaryPrivateIpAddressCount: jsonDict["SecondaryPrivateIpAddressCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["Group"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deviceIndex: <p>The index of the device for the network interface attachment.</p>
      - subnetId: <p>The ID of the subnet.</p>
      - associatePublicIpAddress: <p>Indicates whether to assign a public IP address to instances launched in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is <code>true</code>.</p>
      - privateIpAddress: <p>The IP address of the network interface within the subnet.</p>
      - privateIpAddressConfigs: <p>The private IP addresses.</p>
      - description: <p>The description.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - deleteOnTermination: <p>Indicates whether to delete the interface when the instance is terminated.</p>
      - secondaryPrivateIpAddressCount: <p>The number of secondary private IP addresses.</p>
      - groups: <p>The IDs of one or more security groups.</p>
 */
  public init(deviceIndex: Int?, subnetId: String?, associatePublicIpAddress: Bool?, privateIpAddress: String?, privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]?, description: String?, networkInterfaceId: String?, deleteOnTermination: Bool?, secondaryPrivateIpAddressCount: Int?, groups: [String]?) {
self.deviceIndex = deviceIndex
self.subnetId = subnetId
self.associatePublicIpAddress = associatePublicIpAddress
self.privateIpAddress = privateIpAddress
self.privateIpAddressConfigs = privateIpAddressConfigs
self.description = description
self.networkInterfaceId = networkInterfaceId
self.deleteOnTermination = deleteOnTermination
self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
self.groups = groups
  }
}

/**
<p>Describes a security group and AWS account ID pair.</p>
 */
public struct UserIdGroupPair: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned.</p> <p>[EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.</p>
 */
  public let userId: String?
/**
<p>The status of a VPC peering connection, if applicable.</p>
 */
  public let peeringStatus: String?
/**
<p>The ID of the VPC for the referenced security group, if applicable.</p>
 */
  public let vpcId: String?
/**
<p>The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.</p>
 */
  public let groupName: String?
/**
<p>The ID of the security group.</p>
 */
  public let groupId: String?
/**
<p>The ID of the VPC peering connection, if applicable.</p>
 */
  public let vpcPeeringConnectionId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if userId != nil { body["userId"] = userId! }
    if peeringStatus != nil { body["peeringStatus"] = peeringStatus! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if groupName != nil { body["groupName"] = groupName! }
    if groupId != nil { body["groupId"] = groupId! }
    if vpcPeeringConnectionId != nil { body["vpcPeeringConnectionId"] = vpcPeeringConnectionId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UserIdGroupPair {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UserIdGroupPair(
        userId: jsonDict["userId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      peeringStatus: jsonDict["peeringStatus"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groupId: jsonDict["groupId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcPeeringConnectionId: jsonDict["vpcPeeringConnectionId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - userId: <p>The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned.</p> <p>[EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.</p>
      - peeringStatus: <p>The status of a VPC peering connection, if applicable.</p>
      - vpcId: <p>The ID of the VPC for the referenced security group, if applicable.</p>
      - groupName: <p>The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.</p>
      - groupId: <p>The ID of the security group.</p>
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection, if applicable.</p>
 */
  public init(userId: String?, peeringStatus: String?, vpcId: String?, groupName: String?, groupId: String?, vpcPeeringConnectionId: String?) {
self.userId = userId
self.peeringStatus = peeringStatus
self.vpcId = vpcId
self.groupName = groupName
self.groupId = groupId
self.vpcPeeringConnectionId = vpcPeeringConnectionId
  }
}

/**
<p>Contains the parameters for DescribeConversionTasks.</p>
 */
public struct DescribeConversionTasksRequest: RestJsonSerializable {
/**
<p>One or more conversion task IDs.</p>
 */
  public let conversionTaskIds: [String]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if conversionTaskIds != nil { body["conversionTaskId"] = conversionTaskIds! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - conversionTaskIds: <p>One or more conversion task IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(conversionTaskIds: [String]?, dryRun: Bool?) {
self.conversionTaskIds = conversionTaskIds
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for ModifySubnetAttribute.</p>
 */
public struct ModifySubnetAttributeRequest: RestJsonSerializable {
/**
<p>Specify <code>true</code> to indicate that instances launched into the specified subnet should be assigned public IP address.</p>
 */
  public let mapPublicIpOnLaunch: AttributeBooleanValue?
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if mapPublicIpOnLaunch != nil { body["MapPublicIpOnLaunch"] = mapPublicIpOnLaunch! }
    body["subnetId"] = subnetId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - mapPublicIpOnLaunch: <p>Specify <code>true</code> to indicate that instances launched into the specified subnet should be assigned public IP address.</p>
      - subnetId: <p>The ID of the subnet.</p>
 */
  public init(mapPublicIpOnLaunch: AttributeBooleanValue?, subnetId: String) {
self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
self.subnetId = subnetId
  }
}

/**
<p>Describes a placement group.</p>
 */
public struct PlacementGroup: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The state of the placement group.</p>
 */
  public let state: Placementgroupstate?
/**
<p>The placement strategy.</p>
 */
  public let strategy: Placementstrategy?
/**
<p>The name of the placement group.</p>
 */
  public let groupName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if state != nil { body["state"] = state! }
    if strategy != nil { body["strategy"] = strategy! }
    if groupName != nil { body["groupName"] = groupName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PlacementGroup {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PlacementGroup(
        state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Placementgroupstate.deserialize(response: response, body: .json($0)) },
      strategy: jsonDict["strategy"].flatMap { ($0 is NSNull) ? nil : Placementstrategy.deserialize(response: response, body: .json($0)) },
      groupName: jsonDict["groupName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - state: <p>The state of the placement group.</p>
      - strategy: <p>The placement strategy.</p>
      - groupName: <p>The name of the placement group.</p>
 */
  public init(state: Placementgroupstate?, strategy: Placementstrategy?, groupName: String?) {
self.state = state
self.strategy = strategy
self.groupName = groupName
  }
}

/**
<p>Contains the output of AssociateAddress.</p>
 */
public struct AssociateAddressResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
 */
  public let associationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if associationId != nil { body["associationId"] = associationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AssociateAddressResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AssociateAddressResult(
        associationId: jsonDict["associationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - associationId: <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
 */
  public init(associationId: String?) {
self.associationId = associationId
  }
}


/**
<p>Describes a reservation.</p>
 */
public struct Reservation: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).</p>
 */
  public let requesterId: String?
/**
<p>One or more instances.</p>
 */
  public let instances: [Instance]?
/**
<p>The ID of the reservation.</p>
 */
  public let reservationId: String?
/**
<p>The ID of the AWS account that owns the reservation.</p>
 */
  public let ownerId: String?
/**
<p>[EC2-Classic only] One or more security groups.</p>
 */
  public let groups: [GroupIdentifier]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if requesterId != nil { body["requesterId"] = requesterId! }
    if instances != nil { body["instancesSet"] = instances! }
    if reservationId != nil { body["reservationId"] = reservationId! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if groups != nil { body["groupSet"] = groups! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Reservation {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Reservation(
        requesterId: jsonDict["requesterId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instances: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [Instance].deserialize(response: response, body: .json($0)) },
      reservationId: jsonDict["reservationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - requesterId: <p>The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).</p>
      - instances: <p>One or more instances.</p>
      - reservationId: <p>The ID of the reservation.</p>
      - ownerId: <p>The ID of the AWS account that owns the reservation.</p>
      - groups: <p>[EC2-Classic only] One or more security groups.</p>
 */
  public init(requesterId: String?, instances: [Instance]?, reservationId: String?, ownerId: String?, groups: [GroupIdentifier]?) {
self.requesterId = requesterId
self.instances = instances
self.reservationId = reservationId
self.ownerId = ownerId
self.groups = groups
  }
}

enum Reservationstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `paymentpending` = "payment-pending"
  case `paymentfailed` = "payment-failed"
  case `active` = "active"
  case `retired` = "retired"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Reservationstate {
    guard case let .json(json) = body else { fatalError() }
    return Reservationstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes the configuration of a Spot fleet request.</p>
 */
public struct SpotFleetRequestConfigData: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O.</p>
 */
  public let targetCapacity: Int
/**
<p>A unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
 */
  public let clientToken: String?
/**
<p>Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet.</p>
 */
  public let excessCapacityTerminationPolicy: Excesscapacityterminationpolicy?
/**
<p>Information about the launch specifications for the Spot fleet request.</p>
 */
  public let launchSpecifications: [SpotFleetLaunchSpecification]
/**
<p>Grants the Spot fleet permission to terminate Spot instances on your behalf when you cancel its Spot fleet request using <a>CancelSpotFleetRequests</a> or when the Spot fleet request expires, if you set <code>terminateInstancesWithExpiration</code>.</p>
 */
  public let iamFleetRole: String
/**
<p>The bid price per unit hour.</p>
 */
  public let spotPrice: String
/**
<p>Indicates whether running Spot instances should be terminated when the Spot fleet request expires.</p>
 */
  public let terminateInstancesWithExpiration: Bool?
/**
<p>The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately.</p>
 */
  public let validFrom: Date?
/**
<p>The number of units fulfilled by this request compared to the set target capacity.</p>
 */
  public let fulfilledCapacity: Double?
/**
<p>The type of request. Indicates whether the fleet will only <code>request</code> the target capacity or also attempt to <code>maintain</code> it. When you <code>request</code> a certain target capacity, the fleet will only place the required bids. It will not attempt to replenish Spot instances if capacity is diminished, nor will it submit bids in alternative Spot pools if capacity is not available. When you want to <code>maintain</code> a certain target capacity, fleet will place the required bids to meet this target capacity. It will also automatically replenish any interrupted instances. Default: <code>maintain</code>.</p>
 */
  public let ec2Type: Fleettype?
/**
<p>The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new Spot instance requests are placed or enabled to fulfill the request.</p>
 */
  public let validUntil: Date?
/**
<p>Indicates how to allocate the target capacity across the Spot pools specified by the Spot fleet request. The default is <code>lowestPrice</code>.</p>
 */
  public let allocationStrategy: Allocationstrategy?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["targetCapacity"] = targetCapacity
    if clientToken != nil { body["clientToken"] = clientToken! }
    if excessCapacityTerminationPolicy != nil { body["excessCapacityTerminationPolicy"] = excessCapacityTerminationPolicy! }
    body["launchSpecifications"] = launchSpecifications
    body["iamFleetRole"] = iamFleetRole
    body["spotPrice"] = spotPrice
    if terminateInstancesWithExpiration != nil { body["terminateInstancesWithExpiration"] = terminateInstancesWithExpiration! }
    if validFrom != nil { body["validFrom"] = validFrom! }
    if fulfilledCapacity != nil { body["fulfilledCapacity"] = fulfilledCapacity! }
    if ec2Type != nil { body["type"] = ec2Type! }
    if validUntil != nil { body["validUntil"] = validUntil! }
    if allocationStrategy != nil { body["allocationStrategy"] = allocationStrategy! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotFleetRequestConfigData {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotFleetRequestConfigData(
        targetCapacity: jsonDict["targetCapacity"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }!,
      clientToken: jsonDict["clientToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      excessCapacityTerminationPolicy: jsonDict["excessCapacityTerminationPolicy"].flatMap { ($0 is NSNull) ? nil : Excesscapacityterminationpolicy.deserialize(response: response, body: .json($0)) },
      launchSpecifications: jsonDict["launchSpecifications"].flatMap { ($0 is NSNull) ? nil : [SpotFleetLaunchSpecification].deserialize(response: response, body: .json($0)) }!,
      iamFleetRole: jsonDict["iamFleetRole"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      spotPrice: jsonDict["spotPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      terminateInstancesWithExpiration: jsonDict["terminateInstancesWithExpiration"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      validFrom: jsonDict["validFrom"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      fulfilledCapacity: jsonDict["fulfilledCapacity"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      ec2Type: jsonDict["type"].flatMap { ($0 is NSNull) ? nil : Fleettype.deserialize(response: response, body: .json($0)) },
      validUntil: jsonDict["validUntil"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      allocationStrategy: jsonDict["allocationStrategy"].flatMap { ($0 is NSNull) ? nil : Allocationstrategy.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - targetCapacity: <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O.</p>
      - clientToken: <p>A unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
      - excessCapacityTerminationPolicy: <p>Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet.</p>
      - launchSpecifications: <p>Information about the launch specifications for the Spot fleet request.</p>
      - iamFleetRole: <p>Grants the Spot fleet permission to terminate Spot instances on your behalf when you cancel its Spot fleet request using <a>CancelSpotFleetRequests</a> or when the Spot fleet request expires, if you set <code>terminateInstancesWithExpiration</code>.</p>
      - spotPrice: <p>The bid price per unit hour.</p>
      - terminateInstancesWithExpiration: <p>Indicates whether running Spot instances should be terminated when the Spot fleet request expires.</p>
      - validFrom: <p>The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately.</p>
      - fulfilledCapacity: <p>The number of units fulfilled by this request compared to the set target capacity.</p>
      - ec2Type: <p>The type of request. Indicates whether the fleet will only <code>request</code> the target capacity or also attempt to <code>maintain</code> it. When you <code>request</code> a certain target capacity, the fleet will only place the required bids. It will not attempt to replenish Spot instances if capacity is diminished, nor will it submit bids in alternative Spot pools if capacity is not available. When you want to <code>maintain</code> a certain target capacity, fleet will place the required bids to meet this target capacity. It will also automatically replenish any interrupted instances. Default: <code>maintain</code>.</p>
      - validUntil: <p>The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new Spot instance requests are placed or enabled to fulfill the request.</p>
      - allocationStrategy: <p>Indicates how to allocate the target capacity across the Spot pools specified by the Spot fleet request. The default is <code>lowestPrice</code>.</p>
 */
  public init(targetCapacity: Int, clientToken: String?, excessCapacityTerminationPolicy: Excesscapacityterminationpolicy?, launchSpecifications: [SpotFleetLaunchSpecification], iamFleetRole: String, spotPrice: String, terminateInstancesWithExpiration: Bool?, validFrom: Date?, fulfilledCapacity: Double?, ec2Type: Fleettype?, validUntil: Date?, allocationStrategy: Allocationstrategy?) {
self.targetCapacity = targetCapacity
self.clientToken = clientToken
self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
self.launchSpecifications = launchSpecifications
self.iamFleetRole = iamFleetRole
self.spotPrice = spotPrice
self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
self.validFrom = validFrom
self.fulfilledCapacity = fulfilledCapacity
self.ec2Type = ec2Type
self.validUntil = validUntil
self.allocationStrategy = allocationStrategy
  }
}


enum Bundletaskstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `waitingforshutdown` = "waiting-for-shutdown"
  case `bundling` = "bundling"
  case `storing` = "storing"
  case `cancelling` = "cancelling"
  case `complete` = "complete"
  case `failed` = "failed"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Bundletaskstate {
    guard case let .json(json) = body else { fatalError() }
    return Bundletaskstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DeleteInternetGateway.</p>
 */
public struct DeleteInternetGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the Internet gateway.</p>
 */
  public let internetGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["internetGatewayId"] = internetGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - internetGatewayId: <p>The ID of the Internet gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(internetGatewayId: String, dryRun: Bool?) {
self.internetGatewayId = internetGatewayId
self.dryRun = dryRun
  }
}

/**
<p>Describes a block device mapping for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesBlockDeviceMapping: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Suppresses the specified device included in the block device mapping of the AMI.</p>
 */
  public let noDevice: String?
/**
<p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>.The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p> <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
 */
  public let virtualName: String?
/**
<p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
 */
  public let deviceName: String?
/**
<p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
 */
  public let ebs: ScheduledInstancesEbs?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if noDevice != nil { body["NoDevice"] = noDevice! }
    if virtualName != nil { body["VirtualName"] = virtualName! }
    if deviceName != nil { body["DeviceName"] = deviceName! }
    if ebs != nil { body["Ebs"] = ebs! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesBlockDeviceMapping {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesBlockDeviceMapping(
        noDevice: jsonDict["NoDevice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      virtualName: jsonDict["VirtualName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deviceName: jsonDict["DeviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebs: jsonDict["Ebs"].flatMap { ($0 is NSNull) ? nil : ScheduledInstancesEbs.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - noDevice: <p>Suppresses the specified device included in the block device mapping of the AMI.</p>
      - virtualName: <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>.The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p> <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
      - deviceName: <p>The device name exposed to the instance (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
      - ebs: <p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
 */
  public init(noDevice: String?, virtualName: String?, deviceName: String?, ebs: ScheduledInstancesEbs?) {
self.noDevice = noDevice
self.virtualName = virtualName
self.deviceName = deviceName
self.ebs = ebs
  }
}

/**
<p>Describes a state change.</p>
 */
public struct StateReason: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The reason code for the state change.</p>
 */
  public let code: String?
/**
<p>The message for the state change.</p> <ul> <li> <p> <code>Server.SpotInstanceTermination</code>: A Spot instance was terminated due to an increase in the market price.</p> </li> <li> <p> <code>Server.InternalError</code>: An internal error occurred during instance launch, resulting in termination.</p> </li> <li> <p> <code>Server.InsufficientInstanceCapacity</code>: There was insufficient instance capacity to satisfy the launch request.</p> </li> <li> <p> <code>Client.InternalError</code>: A client error caused the instance to terminate on launch.</p> </li> <li> <p> <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down using the <code>shutdown -h</code> command from the instance.</p> </li> <li> <p> <code>Client.UserInitiatedShutdown</code>: The instance was shut down using the Amazon EC2 API.</p> </li> <li> <p> <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your limits.</p> </li> <li> <p> <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot was not found.</p> </li> </ul>
 */
  public let message: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if code != nil { body["code"] = code! }
    if message != nil { body["message"] = message! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> StateReason {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return StateReason(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - code: <p>The reason code for the state change.</p>
      - message: <p>The message for the state change.</p> <ul> <li> <p> <code>Server.SpotInstanceTermination</code>: A Spot instance was terminated due to an increase in the market price.</p> </li> <li> <p> <code>Server.InternalError</code>: An internal error occurred during instance launch, resulting in termination.</p> </li> <li> <p> <code>Server.InsufficientInstanceCapacity</code>: There was insufficient instance capacity to satisfy the launch request.</p> </li> <li> <p> <code>Client.InternalError</code>: A client error caused the instance to terminate on launch.</p> </li> <li> <p> <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down using the <code>shutdown -h</code> command from the instance.</p> </li> <li> <p> <code>Client.UserInitiatedShutdown</code>: The instance was shut down using the Amazon EC2 API.</p> </li> <li> <p> <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your limits.</p> </li> <li> <p> <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot was not found.</p> </li> </ul>
 */
  public init(code: String?, message: String?) {
self.code = code
self.message = message
  }
}

/**
<p>Contains the parameters for DeleteTags.</p>
 */
public struct DeleteTagsRequest: RestJsonSerializable {
/**
<p>The ID of the resource. For example, ami-1a2b3c4d. You can specify more than one resource ID.</p>
 */
  public let resources: [String]
/**
<p>One or more tags to delete. If you omit the <code>value</code> parameter, we delete the tag regardless of its value. If you specify this parameter with an empty string as the value, we delete the key only if its value is an empty string.</p>
 */
  public let tags: [Tag]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["resourceId"] = resources
    if tags != nil { body["tag"] = tags! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - resources: <p>The ID of the resource. For example, ami-1a2b3c4d. You can specify more than one resource ID.</p>
      - tags: <p>One or more tags to delete. If you omit the <code>value</code> parameter, we delete the tag regardless of its value. If you specify this parameter with an empty string as the value, we delete the key only if its value is an empty string.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(resources: [String], tags: [Tag]?, dryRun: Bool?) {
self.resources = resources
self.tags = tags
self.dryRun = dryRun
  }
}


enum Vpcpeeringconnectionstatereasoncode: String, RestJsonDeserializable, RestJsonSerializable {
  case `initiatingrequest` = "initiating-request"
  case `pendingacceptance` = "pending-acceptance"
  case `active` = "active"
  case `deleted` = "deleted"
  case `rejected` = "rejected"
  case `failed` = "failed"
  case `expired` = "expired"
  case `provisioning` = "provisioning"
  case `deleting` = "deleting"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Vpcpeeringconnectionstatereasoncode {
    guard case let .json(json) = body else { fatalError() }
    return Vpcpeeringconnectionstatereasoncode(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}



/**
<p>Contains the parameters for DescribeSpotInstanceRequests.</p>
 */
public struct DescribeSpotInstanceRequestsRequest: RestJsonSerializable {
/**
<p>One or more Spot instance request IDs.</p>
 */
  public let spotInstanceRequestIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the Spot instance request was created.</p> </li> <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li> <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li> <li> <p> <code>launch-group</code> - The Spot instance launch group.</p> </li> <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the Amazon EBS volume (for example, <code>/dev/sdh</code>).</p> </li> <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the Amazon EBS volume.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the Amazon EBS volume, in GiB.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of the Amazon EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li> <li> <p> <code>launch.group-id</code> - The security group for the instance.</p> </li> <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li> <li> <p> <code>launch.monitoring-enabled</code> - Whether monitoring is enabled for the Spot instance.</p> </li> <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li> <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li> <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li> <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li> <li> <p> <code>spot-instance-request-id</code> - The Spot instance request ID.</p> </li> <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot instance launched to fulfill the request.</p> </li> <li> <p> <code>state</code> - The state of the Spot instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot bid status information can help you track your Amazon EC2 Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Bid Status</a> in the Amazon Elastic Compute Cloud User Guide.</p> </li> <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot instance request.</p> </li> <li> <p> <code>status-message</code> - The message explaining the status of the Spot instance request.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>type</code> - The type of Spot instance request (<code>one-time</code> | <code>persistent</code>).</p> </li> <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the bid is launched.</p> </li> <li> <p> <code>valid-from</code> - The start date of the request.</p> </li> <li> <p> <code>valid-until</code> - The end date of the request.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotInstanceRequestIds != nil { body["SpotInstanceRequestId"] = spotInstanceRequestIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - spotInstanceRequestIds: <p>One or more Spot instance request IDs.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the Spot instance request was created.</p> </li> <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li> <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li> <li> <p> <code>launch-group</code> - The Spot instance launch group.</p> </li> <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the Amazon EBS volume (for example, <code>/dev/sdh</code>).</p> </li> <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the Amazon EBS volume.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the Amazon EBS volume, in GiB.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of the Amazon EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li> <li> <p> <code>launch.group-id</code> - The security group for the instance.</p> </li> <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li> <li> <p> <code>launch.monitoring-enabled</code> - Whether monitoring is enabled for the Spot instance.</p> </li> <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li> <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li> <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li> <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li> <li> <p> <code>spot-instance-request-id</code> - The Spot instance request ID.</p> </li> <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot instance launched to fulfill the request.</p> </li> <li> <p> <code>state</code> - The state of the Spot instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot bid status information can help you track your Amazon EC2 Spot instance requests. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Bid Status</a> in the Amazon Elastic Compute Cloud User Guide.</p> </li> <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot instance request.</p> </li> <li> <p> <code>status-message</code> - The message explaining the status of the Spot instance request.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> <li> <p> <code>type</code> - The type of Spot instance request (<code>one-time</code> | <code>persistent</code>).</p> </li> <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the bid is launched.</p> </li> <li> <p> <code>valid-from</code> - The start date of the request.</p> </li> <li> <p> <code>valid-until</code> - The end date of the request.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(spotInstanceRequestIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.spotInstanceRequestIds = spotInstanceRequestIds
self.filters = filters
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for AttachClassicLinkVpc.</p>
 */
public struct AttachClassicLinkVpcRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of a ClassicLink-enabled VPC.</p>
 */
  public let vpcId: String
/**
<p>The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.</p>
 */
  public let instanceId: String
/**
<p>The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.</p>
 */
  public let groups: [String]

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["vpcId"] = vpcId
    body["instanceId"] = instanceId
    body["SecurityGroupId"] = groups
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcId: <p>The ID of a ClassicLink-enabled VPC.</p>
      - instanceId: <p>The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.</p>
      - groups: <p>The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.</p>
 */
  public init(dryRun: Bool?, vpcId: String, instanceId: String, groups: [String]) {
self.dryRun = dryRun
self.vpcId = vpcId
self.instanceId = instanceId
self.groups = groups
  }
}

/**
<p>Contains the output of ReleaseHosts.</p>
 */
public struct ReleaseHostsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IDs of the Dedicated Hosts that were successfully released.</p>
 */
  public let successful: [String]?
/**
<p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
 */
  public let unsuccessful: [UnsuccessfulItem]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if successful != nil { body["successful"] = successful! }
    if unsuccessful != nil { body["unsuccessful"] = unsuccessful! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReleaseHostsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReleaseHostsResult(
        successful: jsonDict["successful"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      unsuccessful: jsonDict["unsuccessful"].flatMap { ($0 is NSNull) ? nil : [UnsuccessfulItem].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - successful: <p>The IDs of the Dedicated Hosts that were successfully released.</p>
      - unsuccessful: <p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
 */
  public init(successful: [String]?, unsuccessful: [UnsuccessfulItem]?) {
self.successful = successful
self.unsuccessful = unsuccessful
  }
}


/**
<p>Describes an instance export task.</p>
 */
public struct ExportToS3TaskSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.</p>
 */
  public let containerFormat: Containerformat?
/**
<p>The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.</p>
 */
  public let s3Prefix: String?
/**
<p>The format for the exported image.</p>
 */
  public let diskImageFormat: Diskimageformat?
/**
<p>The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.</p>
 */
  public let s3Bucket: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if containerFormat != nil { body["containerFormat"] = containerFormat! }
    if s3Prefix != nil { body["s3Prefix"] = s3Prefix! }
    if diskImageFormat != nil { body["diskImageFormat"] = diskImageFormat! }
    if s3Bucket != nil { body["s3Bucket"] = s3Bucket! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ExportToS3TaskSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ExportToS3TaskSpecification(
        containerFormat: jsonDict["containerFormat"].flatMap { ($0 is NSNull) ? nil : Containerformat.deserialize(response: response, body: .json($0)) },
      s3Prefix: jsonDict["s3Prefix"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      diskImageFormat: jsonDict["diskImageFormat"].flatMap { ($0 is NSNull) ? nil : Diskimageformat.deserialize(response: response, body: .json($0)) },
      s3Bucket: jsonDict["s3Bucket"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - containerFormat: <p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.</p>
      - s3Prefix: <p>The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.</p>
      - diskImageFormat: <p>The format for the exported image.</p>
      - s3Bucket: <p>The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.</p>
 */
  public init(containerFormat: Containerformat?, s3Prefix: String?, diskImageFormat: Diskimageformat?, s3Bucket: String?) {
self.containerFormat = containerFormat
self.s3Prefix = s3Prefix
self.diskImageFormat = diskImageFormat
self.s3Bucket = s3Bucket
  }
}

/**
<p>Describes a Spot fleet error.</p>
 */
public struct CancelSpotFleetRequestsError: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The error code.</p>
 */
  public let code: Cancelbatcherrorcode
/**
<p>The description for the error code.</p>
 */
  public let message: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["code"] = code
    body["message"] = message
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CancelSpotFleetRequestsError {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CancelSpotFleetRequestsError(
        code: jsonDict["code"].flatMap { ($0 is NSNull) ? nil : Cancelbatcherrorcode.deserialize(response: response, body: .json($0)) }!,
      message: jsonDict["message"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - code: <p>The error code.</p>
      - message: <p>The description for the error code.</p>
 */
  public init(code: Cancelbatcherrorcode, message: String) {
self.code = code
self.message = message
  }
}

/**
<p>Contains the parameters for DescribeKeyPairs.</p>
 */
public struct DescribeKeyPairsRequest: RestJsonSerializable {
/**
<p>One or more filters.</p> <ul> <li> <p> <code>fingerprint</code> - The fingerprint of the key pair.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>One or more key pair names.</p> <p>Default: Describes all your key pairs.</p>
 */
  public let keyNames: [String]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if filters != nil { body["Filter"] = filters! }
    if keyNames != nil { body["KeyName"] = keyNames! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>fingerprint</code> - The fingerprint of the key pair.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair.</p> </li> </ul>
      - keyNames: <p>One or more key pair names.</p> <p>Default: Describes all your key pairs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(filters: [Filter]?, keyNames: [String]?, dryRun: Bool?) {
self.filters = filters
self.keyNames = keyNames
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeReservedInstancesOfferings.</p>
 */
public struct DescribeReservedInstancesOfferingsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A list of Reserved Instances offerings.</p>
 */
  public let reservedInstancesOfferings: [ReservedInstancesOffering]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if reservedInstancesOfferings != nil { body["reservedInstancesOfferingsSet"] = reservedInstancesOfferings! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeReservedInstancesOfferingsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeReservedInstancesOfferingsResult(
        reservedInstancesOfferings: jsonDict["reservedInstancesOfferingsSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesOffering].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - reservedInstancesOfferings: <p>A list of Reserved Instances offerings.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(reservedInstancesOfferings: [ReservedInstancesOffering]?, nextToken: String?) {
self.reservedInstancesOfferings = reservedInstancesOfferings
self.nextToken = nextToken
  }
}

enum Recurringchargefrequency: String, RestJsonDeserializable, RestJsonSerializable {
  case `hourly` = "Hourly"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Recurringchargefrequency {
    guard case let .json(json) = body else { fatalError() }
    return Recurringchargefrequency(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for CopySnapshot.</p>
 */
public struct CopySnapshotRequest: RestJsonSerializable {
/**
<p>The ID of the EBS snapshot to copy.</p>
 */
  public let sourceSnapshotId: String
/**
<p>A description for the EBS snapshot.</p>
 */
  public let description: String?
/**
<p>The ID of the region that contains the snapshot to be copied.</p>
 */
  public let sourceRegion: String
/**
<p>Specifies whether the destination snapshot should be encrypted. You can encrypt a copy of an unencrypted snapshot using this flag, but you cannot use it to create an unencrypted copy from an encrypted snapshot. Your default CMK for EBS is used unless a non-default AWS Key Management Service (AWS KMS) CMK is specified with <code>KmsKeyId</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let encrypted: Bool?
/**
<p>The destination region to use in the <code>PresignedUrl</code> parameter of a snapshot copy operation. This parameter is only valid for specifying the destination region in a <code>PresignedUrl</code> parameter, where it is required.</p> <note> <p> <code>CopySnapshot</code> sends the snapshot copy to the regional endpoint that you send the HTTP request to, such as <code>ec2.us-east-1.amazonaws.com</code> (in the AWS CLI, this is specified with the <code>--region</code> parameter or the default region in your AWS configuration file).</p> </note>
 */
  public let destinationRegion: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The pre-signed URL that facilitates copying an encrypted snapshot. This parameter is only required when copying an encrypted snapshot with the Amazon EC2 Query API; it is available as an optional parameter in all other cases. The <code>PresignedUrl</code> should use the snapshot source endpoint, the <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code> must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests by Using Query Parameters (AWS Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail asynchronously, and the snapshot will move to an <code>error</code> state.</p>
 */
  public let presignedUrl: String?
/**
<p>The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when creating the snapshot copy. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the <code>arn:aws:kms</code> namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. The specified CMK must exist in the region that the snapshot is being copied to. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set.</p>
 */
  public let kmsKeyId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["SourceSnapshotId"] = sourceSnapshotId
    if description != nil { body["Description"] = description! }
    body["SourceRegion"] = sourceRegion
    if encrypted != nil { body["encrypted"] = encrypted! }
    if destinationRegion != nil { body["destinationRegion"] = destinationRegion! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if presignedUrl != nil { body["presignedUrl"] = presignedUrl! }
    if kmsKeyId != nil { body["kmsKeyId"] = kmsKeyId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - sourceSnapshotId: <p>The ID of the EBS snapshot to copy.</p>
      - description: <p>A description for the EBS snapshot.</p>
      - sourceRegion: <p>The ID of the region that contains the snapshot to be copied.</p>
      - encrypted: <p>Specifies whether the destination snapshot should be encrypted. You can encrypt a copy of an unencrypted snapshot using this flag, but you cannot use it to create an unencrypted copy from an encrypted snapshot. Your default CMK for EBS is used unless a non-default AWS Key Management Service (AWS KMS) CMK is specified with <code>KmsKeyId</code>. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - destinationRegion: <p>The destination region to use in the <code>PresignedUrl</code> parameter of a snapshot copy operation. This parameter is only valid for specifying the destination region in a <code>PresignedUrl</code> parameter, where it is required.</p> <note> <p> <code>CopySnapshot</code> sends the snapshot copy to the regional endpoint that you send the HTTP request to, such as <code>ec2.us-east-1.amazonaws.com</code> (in the AWS CLI, this is specified with the <code>--region</code> parameter or the default region in your AWS configuration file).</p> </note>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - presignedUrl: <p>The pre-signed URL that facilitates copying an encrypted snapshot. This parameter is only required when copying an encrypted snapshot with the Amazon EC2 Query API; it is available as an optional parameter in all other cases. The <code>PresignedUrl</code> should use the snapshot source endpoint, the <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code> must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests by Using Query Parameters (AWS Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail asynchronously, and the snapshot will move to an <code>error</code> state.</p>
      - kmsKeyId: <p>The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when creating the snapshot copy. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the <code>arn:aws:kms</code> namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. The specified CMK must exist in the region that the snapshot is being copied to. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set.</p>
 */
  public init(sourceSnapshotId: String, description: String?, sourceRegion: String, encrypted: Bool?, destinationRegion: String?, dryRun: Bool?, presignedUrl: String?, kmsKeyId: String?) {
self.sourceSnapshotId = sourceSnapshotId
self.description = description
self.sourceRegion = sourceRegion
self.encrypted = encrypted
self.destinationRegion = destinationRegion
self.dryRun = dryRun
self.presignedUrl = presignedUrl
self.kmsKeyId = kmsKeyId
  }
}

/**
<p>Describes a static route for a VPN connection.</p>
 */
public struct VpnStaticRoute: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The CIDR block associated with the local subnet of the customer data center.</p>
 */
  public let destinationCidrBlock: String?
/**
<p>The current state of the static route.</p>
 */
  public let state: Vpnstate?
/**
<p>Indicates how the routes were provided.</p>
 */
  public let source: Vpnstaticroutesource?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if destinationCidrBlock != nil { body["destinationCidrBlock"] = destinationCidrBlock! }
    if state != nil { body["state"] = state! }
    if source != nil { body["source"] = source! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpnStaticRoute {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpnStaticRoute(
        destinationCidrBlock: jsonDict["destinationCidrBlock"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Vpnstate.deserialize(response: response, body: .json($0)) },
      source: jsonDict["source"].flatMap { ($0 is NSNull) ? nil : Vpnstaticroutesource.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - destinationCidrBlock: <p>The CIDR block associated with the local subnet of the customer data center.</p>
      - state: <p>The current state of the static route.</p>
      - source: <p>Indicates how the routes were provided.</p>
 */
  public init(destinationCidrBlock: String?, state: Vpnstate?, source: Vpnstaticroutesource?) {
self.destinationCidrBlock = destinationCidrBlock
self.state = state
self.source = source
  }
}

enum Statusname: String, RestJsonDeserializable, RestJsonSerializable {
  case `reachability` = "reachability"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Statusname {
    guard case let .json(json) = body else { fatalError() }
    return Statusname(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the output of DescribePlacementGroups.</p>
 */
public struct DescribePlacementGroupsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more placement groups.</p>
 */
  public let placementGroups: [PlacementGroup]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if placementGroups != nil { body["placementGroupSet"] = placementGroups! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribePlacementGroupsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribePlacementGroupsResult(
        placementGroups: jsonDict["placementGroupSet"].flatMap { ($0 is NSNull) ? nil : [PlacementGroup].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - placementGroups: <p>One or more placement groups.</p>
 */
  public init(placementGroups: [PlacementGroup]?) {
self.placementGroups = placementGroups
  }
}

/**
<p>Contains the parameters for DetachVolume.</p>
 */
public struct DetachVolumeRequest: RestJsonSerializable {
/**
<p>The device name.</p>
 */
  public let device: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The ID of the volume.</p>
 */
  public let volumeId: String
/**
<p>Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.</p>
 */
  public let force: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if device != nil { body["Device"] = device! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if instanceId != nil { body["InstanceId"] = instanceId! }
    body["VolumeId"] = volumeId
    if force != nil { body["Force"] = force! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - device: <p>The device name.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceId: <p>The ID of the instance.</p>
      - volumeId: <p>The ID of the volume.</p>
      - force: <p>Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.</p>
 */
  public init(device: String?, dryRun: Bool?, instanceId: String?, volumeId: String, force: Bool?) {
self.device = device
self.dryRun = dryRun
self.instanceId = instanceId
self.volumeId = volumeId
self.force = force
  }
}



/**
<p>Contains the parameters for EnableVgwRoutePropagation.</p>
 */
public struct EnableVgwRoutePropagationRequest: RestJsonSerializable {
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let gatewayId: String
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["GatewayId"] = gatewayId
    body["RouteTableId"] = routeTableId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - gatewayId: <p>The ID of the virtual private gateway.</p>
      - routeTableId: <p>The ID of the route table.</p>
 */
  public init(gatewayId: String, routeTableId: String) {
self.gatewayId = gatewayId
self.routeTableId = routeTableId
  }
}


/**
<p>Contains the parameters for GetReservedInstanceExchangeQuote.</p>
 */
public struct GetReservedInstancesExchangeQuoteRequest: RestJsonSerializable {
/**
<p>The ID/s of the Convertible Reserved Instances you want to exchange.</p>
 */
  public let reservedInstanceIds: [String]
/**
<p>The configuration requirements of the Convertible Reserved Instances you want in exchange for your current Convertible Reserved Instances.</p>
 */
  public let targetConfigurations: [TargetConfigurationRequest]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ReservedInstanceId"] = reservedInstanceIds
    if targetConfigurations != nil { body["TargetConfiguration"] = targetConfigurations! }
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - reservedInstanceIds: <p>The ID/s of the Convertible Reserved Instances you want to exchange.</p>
      - targetConfigurations: <p>The configuration requirements of the Convertible Reserved Instances you want in exchange for your current Convertible Reserved Instances.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(reservedInstanceIds: [String], targetConfigurations: [TargetConfigurationRequest]?, dryRun: Bool?) {
self.reservedInstanceIds = reservedInstanceIds
self.targetConfigurations = targetConfigurations
self.dryRun = dryRun
  }
}

/**
<p>Describes the launch specification for one or more Spot instances.</p>
 */
public struct SpotFleetLaunchSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more block device mapping entries.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>The ID of the subnet in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".</p>
 */
  public let subnetId: String?
/**
<p>The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let userData: String?
/**
<p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
 */
  public let ebsOptimized: Bool?
/**
<p>The bid price per unit hour for the specified instance type. If this value is not specified, the default is the Spot bid price specified for the fleet. To determine the bid price per unit hour, divide the Spot bid price by the value of <code>WeightedCapacity</code>.</p>
 */
  public let spotPrice: String?
/**
<p>The ID of the kernel.</p>
 */
  public let kernelId: String?
/**
<p>Enable or disable monitoring for the instances.</p>
 */
  public let monitoring: SpotFleetMonitoring?
/**
<p>The instance type.</p>
 */
  public let instanceType: Instancetype?
/**
<p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms (instances or a performance characteristic such as vCPUs, memory, or I/O).</p> <p>If the target capacity divided by this value is not a whole number, we round the number of instances to the next whole number. If this value is not specified, the default is 1.</p>
 */
  public let weightedCapacity: Double?
/**
<p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
 */
  public let securityGroups: [GroupIdentifier]?
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String?
/**
<p>Deprecated.</p>
 */
  public let addressingType: String?
/**
<p>The IAM instance profile.</p>
 */
  public let iamInstanceProfile: IamInstanceProfileSpecification?
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String?
/**
<p>One or more network interfaces.</p>
 */
  public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
/**
<p>The placement information.</p>
 */
  public let placement: SpotPlacement?
/**
<p>The ID of the RAM disk.</p>
 */
  public let ramdiskId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if subnetId != nil { body["subnetId"] = subnetId! }
    if userData != nil { body["userData"] = userData! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if spotPrice != nil { body["spotPrice"] = spotPrice! }
    if kernelId != nil { body["kernelId"] = kernelId! }
    if monitoring != nil { body["monitoring"] = monitoring! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if weightedCapacity != nil { body["weightedCapacity"] = weightedCapacity! }
    if securityGroups != nil { body["groupSet"] = securityGroups! }
    if keyName != nil { body["keyName"] = keyName! }
    if addressingType != nil { body["addressingType"] = addressingType! }
    if iamInstanceProfile != nil { body["iamInstanceProfile"] = iamInstanceProfile! }
    if imageId != nil { body["imageId"] = imageId! }
    if networkInterfaces != nil { body["networkInterfaceSet"] = networkInterfaces! }
    if placement != nil { body["placement"] = placement! }
    if ramdiskId != nil { body["ramdiskId"] = ramdiskId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotFleetLaunchSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotFleetLaunchSpecification(
        blockDeviceMappings: jsonDict["blockDeviceMapping"].flatMap { ($0 is NSNull) ? nil : [BlockDeviceMapping].deserialize(response: response, body: .json($0)) },
      subnetId: jsonDict["subnetId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userData: jsonDict["userData"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ebsOptimized: jsonDict["ebsOptimized"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      spotPrice: jsonDict["spotPrice"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      kernelId: jsonDict["kernelId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      monitoring: jsonDict["monitoring"].flatMap { ($0 is NSNull) ? nil : SpotFleetMonitoring.deserialize(response: response, body: .json($0)) },
      instanceType: jsonDict["instanceType"].flatMap { ($0 is NSNull) ? nil : Instancetype.deserialize(response: response, body: .json($0)) },
      weightedCapacity: jsonDict["weightedCapacity"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      securityGroups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      addressingType: jsonDict["addressingType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      iamInstanceProfile: jsonDict["iamInstanceProfile"].flatMap { ($0 is NSNull) ? nil : IamInstanceProfileSpecification.deserialize(response: response, body: .json($0)) },
      imageId: jsonDict["imageId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      networkInterfaces: jsonDict["networkInterfaceSet"].flatMap { ($0 is NSNull) ? nil : [InstanceNetworkInterfaceSpecification].deserialize(response: response, body: .json($0)) },
      placement: jsonDict["placement"].flatMap { ($0 is NSNull) ? nil : SpotPlacement.deserialize(response: response, body: .json($0)) },
      ramdiskId: jsonDict["ramdiskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - blockDeviceMappings: <p>One or more block device mapping entries.</p>
      - subnetId: <p>The ID of the subnet in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".</p>
      - userData: <p>The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
      - ebsOptimized: <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
      - spotPrice: <p>The bid price per unit hour for the specified instance type. If this value is not specified, the default is the Spot bid price specified for the fleet. To determine the bid price per unit hour, divide the Spot bid price by the value of <code>WeightedCapacity</code>.</p>
      - kernelId: <p>The ID of the kernel.</p>
      - monitoring: <p>Enable or disable monitoring for the instances.</p>
      - instanceType: <p>The instance type.</p>
      - weightedCapacity: <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms (instances or a performance characteristic such as vCPUs, memory, or I/O).</p> <p>If the target capacity divided by this value is not a whole number, we round the number of instances to the next whole number. If this value is not specified, the default is 1.</p>
      - securityGroups: <p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
      - keyName: <p>The name of the key pair.</p>
      - addressingType: <p>Deprecated.</p>
      - iamInstanceProfile: <p>The IAM instance profile.</p>
      - imageId: <p>The ID of the AMI.</p>
      - networkInterfaces: <p>One or more network interfaces.</p>
      - placement: <p>The placement information.</p>
      - ramdiskId: <p>The ID of the RAM disk.</p>
 */
  public init(blockDeviceMappings: [BlockDeviceMapping]?, subnetId: String?, userData: String?, ebsOptimized: Bool?, spotPrice: String?, kernelId: String?, monitoring: SpotFleetMonitoring?, instanceType: Instancetype?, weightedCapacity: Double?, securityGroups: [GroupIdentifier]?, keyName: String?, addressingType: String?, iamInstanceProfile: IamInstanceProfileSpecification?, imageId: String?, networkInterfaces: [InstanceNetworkInterfaceSpecification]?, placement: SpotPlacement?, ramdiskId: String?) {
self.blockDeviceMappings = blockDeviceMappings
self.subnetId = subnetId
self.userData = userData
self.ebsOptimized = ebsOptimized
self.spotPrice = spotPrice
self.kernelId = kernelId
self.monitoring = monitoring
self.instanceType = instanceType
self.weightedCapacity = weightedCapacity
self.securityGroups = securityGroups
self.keyName = keyName
self.addressingType = addressingType
self.iamInstanceProfile = iamInstanceProfile
self.imageId = imageId
self.networkInterfaces = networkInterfaces
self.placement = placement
self.ramdiskId = ramdiskId
  }
}

/**
<p>Describes a region.</p>
 */
public struct Region: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The region service endpoint.</p>
 */
  public let endpoint: String?
/**
<p>The name of the region.</p>
 */
  public let regionName: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if endpoint != nil { body["regionEndpoint"] = endpoint! }
    if regionName != nil { body["regionName"] = regionName! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Region {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return Region(
        endpoint: jsonDict["regionEndpoint"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      regionName: jsonDict["regionName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - endpoint: <p>The region service endpoint.</p>
      - regionName: <p>The name of the region.</p>
 */
  public init(endpoint: String?, regionName: String?) {
self.endpoint = endpoint
self.regionName = regionName
  }
}

/**
<p>Describes a request to purchase Scheduled Instances.</p>
 */
public struct PurchaseRequest: RestJsonSerializable {
/**
<p>The purchase token.</p>
 */
  public let purchaseToken: String
/**
<p>The number of instances.</p>
 */
  public let instanceCount: Int

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["PurchaseToken"] = purchaseToken
    body["InstanceCount"] = instanceCount
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - purchaseToken: <p>The purchase token.</p>
      - instanceCount: <p>The number of instances.</p>
 */
  public init(purchaseToken: String, instanceCount: Int) {
self.purchaseToken = purchaseToken
self.instanceCount = instanceCount
  }
}

/**
<p>Contains the output of DescribeVpcClassicLinkDnsSupport.</p>
 */
public struct DescribeVpcClassicLinkDnsSupportResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the ClassicLink DNS support status of the VPCs.</p>
 */
  public let vpcs: [ClassicLinkDnsSupport]?
/**
<p>The token to use when requesting the next set of items.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcs != nil { body["vpcs"] = vpcs! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcClassicLinkDnsSupportResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcClassicLinkDnsSupportResult(
        vpcs: jsonDict["vpcs"].flatMap { ($0 is NSNull) ? nil : [ClassicLinkDnsSupport].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcs: <p>Information about the ClassicLink DNS support status of the VPCs.</p>
      - nextToken: <p>The token to use when requesting the next set of items.</p>
 */
  public init(vpcs: [ClassicLinkDnsSupport]?, nextToken: String?) {
self.vpcs = vpcs
self.nextToken = nextToken
  }
}

/**
<p>Contains the parameters for DetachInternetGateway.</p>
 */
public struct DetachInternetGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The ID of the Internet gateway.</p>
 */
  public let internetGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["vpcId"] = vpcId
    body["internetGatewayId"] = internetGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - internetGatewayId: <p>The ID of the Internet gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, internetGatewayId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.internetGatewayId = internetGatewayId
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for CreateInternetGateway.</p>
 */
public struct CreateInternetGatewayRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(dryRun: Bool?) {
self.dryRun = dryRun
  }
}

/**
<p>Describes VPN connection options.</p>
 */
public struct VpnConnectionOptionsSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.</p>
 */
  public let staticRoutesOnly: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if staticRoutesOnly != nil { body["staticRoutesOnly"] = staticRoutesOnly! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpnConnectionOptionsSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpnConnectionOptionsSpecification(
        staticRoutesOnly: jsonDict["staticRoutesOnly"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - staticRoutesOnly: <p>Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.</p>
 */
  public init(staticRoutesOnly: Bool?) {
self.staticRoutesOnly = staticRoutesOnly
  }
}

enum Devicetype: String, RestJsonDeserializable, RestJsonSerializable {
  case `ebs` = "ebs"
  case `instancestore` = "instance-store"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Devicetype {
    guard case let .json(json) = body else { fatalError() }
    return Devicetype(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

enum Imagestate: String, RestJsonDeserializable, RestJsonSerializable {
  case `pending` = "pending"
  case `available` = "available"
  case `invalid` = "invalid"
  case `deregistered` = "deregistered"
  case `transient` = "transient"
  case `failed` = "failed"
  case `error` = "error"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Imagestate {
    guard case let .json(json) = body else { fatalError() }
    return Imagestate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes an event in the history of the Spot fleet request.</p>
 */
public struct HistoryRecord: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The event type.</p> <ul> <li> <p> <code>error</code> - Indicates an error with the Spot fleet request.</p> </li> <li> <p> <code>fleetRequestChange</code> - Indicates a change in the status or configuration of the Spot fleet request.</p> </li> <li> <p> <code>instanceChange</code> - Indicates that an instance was launched or terminated.</p> </li> </ul>
 */
  public let eventType: Eventtype
/**
<p>The date and time of the event, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let timestamp: Date
/**
<p>Information about the event.</p>
 */
  public let eventInformation: EventInformation

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["eventType"] = eventType
    body["timestamp"] = timestamp
    body["eventInformation"] = eventInformation
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> HistoryRecord {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return HistoryRecord(
        eventType: jsonDict["eventType"].flatMap { ($0 is NSNull) ? nil : Eventtype.deserialize(response: response, body: .json($0)) }!,
      timestamp: jsonDict["timestamp"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }!,
      eventInformation: jsonDict["eventInformation"].flatMap { ($0 is NSNull) ? nil : EventInformation.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - eventType: <p>The event type.</p> <ul> <li> <p> <code>error</code> - Indicates an error with the Spot fleet request.</p> </li> <li> <p> <code>fleetRequestChange</code> - Indicates a change in the status or configuration of the Spot fleet request.</p> </li> <li> <p> <code>instanceChange</code> - Indicates that an instance was launched or terminated.</p> </li> </ul>
      - timestamp: <p>The date and time of the event, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - eventInformation: <p>Information about the event.</p>
 */
  public init(eventType: Eventtype, timestamp: Date, eventInformation: EventInformation) {
self.eventType = eventType
self.timestamp = timestamp
self.eventInformation = eventInformation
  }
}

/**
<p>Contains the output of DescribeSpotFleetRequests.</p>
 */
public struct DescribeSpotFleetRequestsResponse: RestJsonDeserializable {
/**
<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>Information about the configuration of your Spot fleet.</p>
 */
  public let spotFleetRequestConfigs: [SpotFleetRequestConfig]


  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSpotFleetRequestsResponse {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSpotFleetRequestsResponse(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      spotFleetRequestConfigs: jsonDict["spotFleetRequestConfigSet"].flatMap { ($0 is NSNull) ? nil : [SpotFleetRequestConfig].deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - nextToken: <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
      - spotFleetRequestConfigs: <p>Information about the configuration of your Spot fleet.</p>
 */
  public init(nextToken: String?, spotFleetRequestConfigs: [SpotFleetRequestConfig]) {
self.nextToken = nextToken
self.spotFleetRequestConfigs = spotFleetRequestConfigs
  }
}

/**
<p>Describes the VPC peering connection options.</p>
 */
public struct VpcPeeringConnectionOptionsDescription: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.</p>
 */
  public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
/**
<p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.</p>
 */
  public let allowDnsResolutionFromRemoteVpc: Bool?
/**
<p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.</p>
 */
  public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if allowEgressFromLocalVpcToRemoteClassicLink != nil { body["allowEgressFromLocalVpcToRemoteClassicLink"] = allowEgressFromLocalVpcToRemoteClassicLink! }
    if allowDnsResolutionFromRemoteVpc != nil { body["allowDnsResolutionFromRemoteVpc"] = allowDnsResolutionFromRemoteVpc! }
    if allowEgressFromLocalClassicLinkToRemoteVpc != nil { body["allowEgressFromLocalClassicLinkToRemoteVpc"] = allowEgressFromLocalClassicLinkToRemoteVpc! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcPeeringConnectionOptionsDescription {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcPeeringConnectionOptionsDescription(
        allowEgressFromLocalVpcToRemoteClassicLink: jsonDict["allowEgressFromLocalVpcToRemoteClassicLink"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      allowDnsResolutionFromRemoteVpc: jsonDict["allowDnsResolutionFromRemoteVpc"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      allowEgressFromLocalClassicLinkToRemoteVpc: jsonDict["allowEgressFromLocalClassicLinkToRemoteVpc"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - allowEgressFromLocalVpcToRemoteClassicLink: <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.</p>
      - allowDnsResolutionFromRemoteVpc: <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.</p>
      - allowEgressFromLocalClassicLinkToRemoteVpc: <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.</p>
 */
  public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool?, allowDnsResolutionFromRemoteVpc: Bool?, allowEgressFromLocalClassicLinkToRemoteVpc: Bool?) {
self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
  }
}

/**
<p>Describes the status of an instance.</p>
 */
public struct InstanceStatus: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The intended state of the instance. <a>DescribeInstanceStatus</a> requires that an instance be in the <code>running</code> state.</p>
 */
  public let instanceState: InstanceState?
/**
<p>Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.</p>
 */
  public let systemStatus: InstanceStatusSummary?
/**
<p>Any scheduled events associated with the instance.</p>
 */
  public let events: [InstanceStatusEvent]?
/**
<p>Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.</p>
 */
  public let instanceStatus: InstanceStatusSummary?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>The Availability Zone of the instance.</p>
 */
  public let availabilityZone: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceState != nil { body["instanceState"] = instanceState! }
    if systemStatus != nil { body["systemStatus"] = systemStatus! }
    if events != nil { body["eventsSet"] = events! }
    if instanceStatus != nil { body["instanceStatus"] = instanceStatus! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InstanceStatus {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InstanceStatus(
        instanceState: jsonDict["instanceState"].flatMap { ($0 is NSNull) ? nil : InstanceState.deserialize(response: response, body: .json($0)) },
      systemStatus: jsonDict["systemStatus"].flatMap { ($0 is NSNull) ? nil : InstanceStatusSummary.deserialize(response: response, body: .json($0)) },
      events: jsonDict["eventsSet"].flatMap { ($0 is NSNull) ? nil : [InstanceStatusEvent].deserialize(response: response, body: .json($0)) },
      instanceStatus: jsonDict["instanceStatus"].flatMap { ($0 is NSNull) ? nil : InstanceStatusSummary.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      availabilityZone: jsonDict["availabilityZone"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceState: <p>The intended state of the instance. <a>DescribeInstanceStatus</a> requires that an instance be in the <code>running</code> state.</p>
      - systemStatus: <p>Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.</p>
      - events: <p>Any scheduled events associated with the instance.</p>
      - instanceStatus: <p>Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.</p>
      - instanceId: <p>The ID of the instance.</p>
      - availabilityZone: <p>The Availability Zone of the instance.</p>
 */
  public init(instanceState: InstanceState?, systemStatus: InstanceStatusSummary?, events: [InstanceStatusEvent]?, instanceStatus: InstanceStatusSummary?, instanceId: String?, availabilityZone: String?) {
self.instanceState = instanceState
self.systemStatus = systemStatus
self.events = events
self.instanceStatus = instanceStatus
self.instanceId = instanceId
self.availabilityZone = availabilityZone
  }
}



/**
<p>Describes a VPC in a VPC peering connection.</p>
 */
public struct VpcPeeringConnectionVpcInfo: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
 */
  public let peeringOptions: VpcPeeringConnectionOptionsDescription?
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>The AWS account ID of the VPC owner.</p>
 */
  public let ownerId: String?
/**
<p>The CIDR block for the VPC.</p>
 */
  public let cidrBlock: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if peeringOptions != nil { body["peeringOptions"] = peeringOptions! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if ownerId != nil { body["ownerId"] = ownerId! }
    if cidrBlock != nil { body["cidrBlock"] = cidrBlock! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcPeeringConnectionVpcInfo {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcPeeringConnectionVpcInfo(
        peeringOptions: jsonDict["peeringOptions"].flatMap { ($0 is NSNull) ? nil : VpcPeeringConnectionOptionsDescription.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      ownerId: jsonDict["ownerId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      cidrBlock: jsonDict["cidrBlock"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - peeringOptions: <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
      - vpcId: <p>The ID of the VPC.</p>
      - ownerId: <p>The AWS account ID of the VPC owner.</p>
      - cidrBlock: <p>The CIDR block for the VPC.</p>
 */
  public init(peeringOptions: VpcPeeringConnectionOptionsDescription?, vpcId: String?, ownerId: String?, cidrBlock: String?) {
self.peeringOptions = peeringOptions
self.vpcId = vpcId
self.ownerId = ownerId
self.cidrBlock = cidrBlock
  }
}

/**
<p>Details about the import snapshot task.</p>
 */
public struct SnapshotTaskDetail: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A brief status for the import snapshot task.</p>
 */
  public let status: String?
/**
<p>The percentage of completion for the import snapshot task.</p>
 */
  public let progress: String?
/**
<p>The URL of the disk image from which the snapshot is created.</p>
 */
  public let url: String?
/**
<p>The size of the disk in the snapshot, in GiB.</p>
 */
  public let diskImageSize: Double?
/**
<p>The format of the disk image from which the snapshot is created.</p>
 */
  public let format: String?
/**
<p>The snapshot ID of the disk being imported.</p>
 */
  public let snapshotId: String?
/**
<p>The S3 bucket for the disk image.</p>
 */
  public let userBucket: UserBucketDetails?
/**
<p>A detailed status message for the import snapshot task.</p>
 */
  public let statusMessage: String?
/**
<p>The description of the snapshot.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if status != nil { body["status"] = status! }
    if progress != nil { body["progress"] = progress! }
    if url != nil { body["url"] = url! }
    if diskImageSize != nil { body["diskImageSize"] = diskImageSize! }
    if format != nil { body["format"] = format! }
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
    if userBucket != nil { body["userBucket"] = userBucket! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SnapshotTaskDetail {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SnapshotTaskDetail(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      progress: jsonDict["progress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      url: jsonDict["url"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      diskImageSize: jsonDict["diskImageSize"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      format: jsonDict["format"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userBucket: jsonDict["userBucket"].flatMap { ($0 is NSNull) ? nil : UserBucketDetails.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>A brief status for the import snapshot task.</p>
      - progress: <p>The percentage of completion for the import snapshot task.</p>
      - url: <p>The URL of the disk image from which the snapshot is created.</p>
      - diskImageSize: <p>The size of the disk in the snapshot, in GiB.</p>
      - format: <p>The format of the disk image from which the snapshot is created.</p>
      - snapshotId: <p>The snapshot ID of the disk being imported.</p>
      - userBucket: <p>The S3 bucket for the disk image.</p>
      - statusMessage: <p>A detailed status message for the import snapshot task.</p>
      - description: <p>The description of the snapshot.</p>
 */
  public init(status: String?, progress: String?, url: String?, diskImageSize: Double?, format: String?, snapshotId: String?, userBucket: UserBucketDetails?, statusMessage: String?, description: String?) {
self.status = status
self.progress = progress
self.url = url
self.diskImageSize = diskImageSize
self.format = format
self.snapshotId = snapshotId
self.userBucket = userBucket
self.statusMessage = statusMessage
self.description = description
  }
}


/**
<p>Contains the output of CreateSpotDatafeedSubscription.</p>
 */
public struct CreateSpotDatafeedSubscriptionResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The Spot instance data feed subscription.</p>
 */
  public let spotDatafeedSubscription: SpotDatafeedSubscription?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotDatafeedSubscription != nil { body["spotDatafeedSubscription"] = spotDatafeedSubscription! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateSpotDatafeedSubscriptionResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateSpotDatafeedSubscriptionResult(
        spotDatafeedSubscription: jsonDict["spotDatafeedSubscription"].flatMap { ($0 is NSNull) ? nil : SpotDatafeedSubscription.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - spotDatafeedSubscription: <p>The Spot instance data feed subscription.</p>
 */
  public init(spotDatafeedSubscription: SpotDatafeedSubscription?) {
self.spotDatafeedSubscription = spotDatafeedSubscription
  }
}

enum Summarystatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `ok` = "ok"
  case `impaired` = "impaired"
  case `insufficientdata` = "insufficient-data"
  case `notapplicable` = "not-applicable"
  case `initializing` = "initializing"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Summarystatus {
    guard case let .json(json) = body else { fatalError() }
    return Summarystatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of DescribeSpotInstanceRequests.</p>
 */
public struct DescribeSpotInstanceRequestsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more Spot instance requests.</p>
 */
  public let spotInstanceRequests: [SpotInstanceRequest]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotInstanceRequests != nil { body["spotInstanceRequestSet"] = spotInstanceRequests! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeSpotInstanceRequestsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeSpotInstanceRequestsResult(
        spotInstanceRequests: jsonDict["spotInstanceRequestSet"].flatMap { ($0 is NSNull) ? nil : [SpotInstanceRequest].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - spotInstanceRequests: <p>One or more Spot instance requests.</p>
 */
  public init(spotInstanceRequests: [SpotInstanceRequest]?) {
self.spotInstanceRequests = spotInstanceRequests
  }
}

enum Reservedinstancestate: String, RestJsonDeserializable, RestJsonSerializable {
  case `paymentpending` = "payment-pending"
  case `active` = "active"
  case `paymentfailed` = "payment-failed"
  case `retired` = "retired"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Reservedinstancestate {
    guard case let .json(json) = body else { fatalError() }
    return Reservedinstancestate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

public struct ModifyVpcPeeringConnectionOptionsRequest: RestJsonSerializable {
/**
<p>The VPC peering connection options for the accepter VPC.</p>
 */
  public let accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
/**
<p>The VPC peering connection options for the requester VPC.</p>
 */
  public let requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
/**
<p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the VPC peering connection.</p>
 */
  public let vpcPeeringConnectionId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if accepterPeeringConnectionOptions != nil { body["AccepterPeeringConnectionOptions"] = accepterPeeringConnectionOptions! }
    if requesterPeeringConnectionOptions != nil { body["RequesterPeeringConnectionOptions"] = requesterPeeringConnectionOptions! }
    if dryRun != nil { body["DryRun"] = dryRun! }
    body["VpcPeeringConnectionId"] = vpcPeeringConnectionId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - accepterPeeringConnectionOptions: <p>The VPC peering connection options for the accepter VPC.</p>
      - requesterPeeringConnectionOptions: <p>The VPC peering connection options for the requester VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - vpcPeeringConnectionId: <p>The ID of the VPC peering connection.</p>
 */
  public init(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?, requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?, dryRun: Bool?, vpcPeeringConnectionId: String) {
self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
self.dryRun = dryRun
self.vpcPeeringConnectionId = vpcPeeringConnectionId
  }
}

enum Autoplacement: String, RestJsonDeserializable, RestJsonSerializable {
  case `on` = "on"
  case `off` = "off"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Autoplacement {
    guard case let .json(json) = body else { fatalError() }
    return Autoplacement(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes an IAM instance profile.</p>
 */
public struct IamInstanceProfileSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the instance profile.</p>
 */
  public let name: String?
/**
<p>The Amazon Resource Name (ARN) of the instance profile.</p>
 */
  public let arn: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if name != nil { body["name"] = name! }
    if arn != nil { body["arn"] = arn! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> IamInstanceProfileSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return IamInstanceProfileSpecification(
        name: jsonDict["name"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      arn: jsonDict["arn"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - name: <p>The name of the instance profile.</p>
      - arn: <p>The Amazon Resource Name (ARN) of the instance profile.</p>
 */
  public init(name: String?, arn: String?) {
self.name = name
self.arn = arn
  }
}

enum Hosttenancy: String, RestJsonDeserializable, RestJsonSerializable {
  case `dedicated` = "dedicated"
  case `host` = "host"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Hosttenancy {
    guard case let .json(json) = body else { fatalError() }
    return Hosttenancy(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the parameters for ConfirmProductInstance.</p>
 */
public struct ConfirmProductInstanceRequest: RestJsonSerializable {
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>The product code. This must be a product code that you own.</p>
 */
  public let productCode: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["InstanceId"] = instanceId
    body["ProductCode"] = productCode
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - instanceId: <p>The ID of the instance.</p>
      - productCode: <p>The product code. This must be a product code that you own.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(instanceId: String, productCode: String, dryRun: Bool?) {
self.instanceId = instanceId
self.productCode = productCode
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for DisableVgwRoutePropagation.</p>
 */
public struct DisableVgwRoutePropagationRequest: RestJsonSerializable {
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let gatewayId: String
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["GatewayId"] = gatewayId
    body["RouteTableId"] = routeTableId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - gatewayId: <p>The ID of the virtual private gateway.</p>
      - routeTableId: <p>The ID of the route table.</p>
 */
  public init(gatewayId: String, routeTableId: String) {
self.gatewayId = gatewayId
self.routeTableId = routeTableId
  }
}


/**
<p>Contains the parameters for DescribeSpotPriceHistory.</p>
 */
public struct DescribeSpotPriceHistoryRequest: RestJsonSerializable {
/**
<p>The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let startTime: Date?
/**
<p>Filters the results by the specified instance types.</p>
 */
  public let instanceTypes: [Instancetype]?
/**
<p>Filters the results by the specified basic product descriptions.</p>
 */
  public let productDescriptions: [String]?
/**
<p>The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
 */
  public let endTime: Date?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>product-description</code> - The product description for the Spot price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).</p> </li> <li> <p> <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).</p> </li> <li> <p> <code>timestamp</code> - The timestamp of the Spot price history, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Filters the results by the specified Availability Zone.</p>
 */
  public let availabilityZone: String?
/**
<p>The token for the next set of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if startTime != nil { body["startTime"] = startTime! }
    if instanceTypes != nil { body["InstanceType"] = instanceTypes! }
    if productDescriptions != nil { body["ProductDescription"] = productDescriptions! }
    if endTime != nil { body["endTime"] = endTime! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if availabilityZone != nil { body["availabilityZone"] = availabilityZone! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - startTime: <p>The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - instanceTypes: <p>Filters the results by the specified instance types.</p>
      - productDescriptions: <p>Filters the results by the specified basic product descriptions.</p>
      - endTime: <p>The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>product-description</code> - The product description for the Spot price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).</p> </li> <li> <p> <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).</p> </li> <li> <p> <code>timestamp</code> - The timestamp of the Spot price history, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - availabilityZone: <p>Filters the results by the specified Availability Zone.</p>
      - nextToken: <p>The token for the next set of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(startTime: Date?, instanceTypes: [Instancetype]?, productDescriptions: [String]?, endTime: Date?, filters: [Filter]?, dryRun: Bool?, availabilityZone: String?, nextToken: String?, maxResults: Int?) {
self.startTime = startTime
self.instanceTypes = instanceTypes
self.productDescriptions = productDescriptions
self.endTime = endTime
self.filters = filters
self.dryRun = dryRun
self.availabilityZone = availabilityZone
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes a conversion task.</p>
 */
public struct ConversionTask: RestJsonSerializable, RestJsonDeserializable {
/**
<p>If the task is for importing an instance, this contains information about the import instance task.</p>
 */
  public let importInstance: ImportInstanceTaskDetails?
/**
<p>The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.</p>
 */
  public let expirationTime: String?
/**
<p>Any tags assigned to the task.</p>
 */
  public let tags: [Tag]?
/**
<p>The state of the conversion task.</p>
 */
  public let state: Conversiontaskstate
/**
<p>The ID of the conversion task.</p>
 */
  public let conversionTaskId: String
/**
<p>The status message related to the conversion task.</p>
 */
  public let statusMessage: String?
/**
<p>If the task is for importing a volume, this contains information about the import volume task.</p>
 */
  public let importVolume: ImportVolumeTaskDetails?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if importInstance != nil { body["importInstance"] = importInstance! }
    if expirationTime != nil { body["expirationTime"] = expirationTime! }
    if tags != nil { body["tagSet"] = tags! }
    body["state"] = state
    body["conversionTaskId"] = conversionTaskId
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if importVolume != nil { body["importVolume"] = importVolume! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ConversionTask {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ConversionTask(
        importInstance: jsonDict["importInstance"].flatMap { ($0 is NSNull) ? nil : ImportInstanceTaskDetails.deserialize(response: response, body: .json($0)) },
      expirationTime: jsonDict["expirationTime"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : Conversiontaskstate.deserialize(response: response, body: .json($0)) }!,
      conversionTaskId: jsonDict["conversionTaskId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!,
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      importVolume: jsonDict["importVolume"].flatMap { ($0 is NSNull) ? nil : ImportVolumeTaskDetails.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - importInstance: <p>If the task is for importing an instance, this contains information about the import instance task.</p>
      - expirationTime: <p>The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.</p>
      - tags: <p>Any tags assigned to the task.</p>
      - state: <p>The state of the conversion task.</p>
      - conversionTaskId: <p>The ID of the conversion task.</p>
      - statusMessage: <p>The status message related to the conversion task.</p>
      - importVolume: <p>If the task is for importing a volume, this contains information about the import volume task.</p>
 */
  public init(importInstance: ImportInstanceTaskDetails?, expirationTime: String?, tags: [Tag]?, state: Conversiontaskstate, conversionTaskId: String, statusMessage: String?, importVolume: ImportVolumeTaskDetails?) {
self.importInstance = importInstance
self.expirationTime = expirationTime
self.tags = tags
self.state = state
self.conversionTaskId = conversionTaskId
self.statusMessage = statusMessage
self.importVolume = importVolume
  }
}

/**
<p>Contains the output of ReplaceRouteTableAssociation.</p>
 */
public struct ReplaceRouteTableAssociationResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the new association.</p>
 */
  public let newAssociationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if newAssociationId != nil { body["newAssociationId"] = newAssociationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReplaceRouteTableAssociationResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReplaceRouteTableAssociationResult(
        newAssociationId: jsonDict["newAssociationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - newAssociationId: <p>The ID of the new association.</p>
 */
  public init(newAssociationId: String?) {
self.newAssociationId = newAssociationId
  }
}


/**
<p>Describes a key pair.</p>
 */
public struct KeyPair: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The name of the key pair.</p>
 */
  public let keyName: String?
/**
<p>The SHA-1 digest of the DER encoded private key.</p>
 */
  public let keyFingerprint: String?
/**
<p>An unencrypted PEM encoded RSA private key.</p>
 */
  public let keyMaterial: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if keyName != nil { body["keyName"] = keyName! }
    if keyFingerprint != nil { body["keyFingerprint"] = keyFingerprint! }
    if keyMaterial != nil { body["keyMaterial"] = keyMaterial! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> KeyPair {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return KeyPair(
        keyName: jsonDict["keyName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      keyFingerprint: jsonDict["keyFingerprint"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      keyMaterial: jsonDict["keyMaterial"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - keyName: <p>The name of the key pair.</p>
      - keyFingerprint: <p>The SHA-1 digest of the DER encoded private key.</p>
      - keyMaterial: <p>An unencrypted PEM encoded RSA private key.</p>
 */
  public init(keyName: String?, keyFingerprint: String?, keyMaterial: String?) {
self.keyName = keyName
self.keyFingerprint = keyFingerprint
self.keyMaterial = keyMaterial
  }
}

/**
<p>Contains the output of DescribeVpnGateways.</p>
 */
public struct DescribeVpnGatewaysResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more virtual private gateways.</p>
 */
  public let vpnGateways: [VpnGateway]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnGateways != nil { body["vpnGatewaySet"] = vpnGateways! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpnGatewaysResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpnGatewaysResult(
        vpnGateways: jsonDict["vpnGatewaySet"].flatMap { ($0 is NSNull) ? nil : [VpnGateway].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpnGateways: <p>Information about one or more virtual private gateways.</p>
 */
  public init(vpnGateways: [VpnGateway]?) {
self.vpnGateways = vpnGateways
  }
}

/**
<p>Contains the parameters for DescribeSpotFleetInstances.</p>
 */
public struct DescribeSpotFleetInstancesRequest: RestJsonSerializable {
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The token for the next set of results.</p>
 */
  public let nextToken: String?
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String
/**
<p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    body["spotFleetRequestId"] = spotFleetRequestId
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The token for the next set of results.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
      - maxResults: <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(dryRun: Bool?, nextToken: String?, spotFleetRequestId: String, maxResults: Int?) {
self.dryRun = dryRun
self.nextToken = nextToken
self.spotFleetRequestId = spotFleetRequestId
self.maxResults = maxResults
  }
}

/**
<p>Contains the parameters for DeleteVpcEndpoints.</p>
 */
public struct DeleteVpcEndpointsRequest: RestJsonSerializable {
/**
<p>One or more endpoint IDs.</p>
 */
  public let vpcEndpointIds: [String]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpcEndpointId"] = vpcEndpointIds
    if dryRun != nil { body["DryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcEndpointIds: <p>One or more endpoint IDs.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcEndpointIds: [String], dryRun: Bool?) {
self.vpcEndpointIds = vpcEndpointIds
self.dryRun = dryRun
  }
}

/**
<p>Contains the output of DescribeReservedInstancesModifications.</p>
 */
public struct DescribeReservedInstancesModificationsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?
/**
<p>The Reserved Instance modification information.</p>
 */
  public let reservedInstancesModifications: [ReservedInstancesModification]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if nextToken != nil { body["nextToken"] = nextToken! }
    if reservedInstancesModifications != nil { body["reservedInstancesModificationsSet"] = reservedInstancesModifications! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeReservedInstancesModificationsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeReservedInstancesModificationsResult(
        nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      reservedInstancesModifications: jsonDict["reservedInstancesModificationsSet"].flatMap { ($0 is NSNull) ? nil : [ReservedInstancesModification].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
      - reservedInstancesModifications: <p>The Reserved Instance modification information.</p>
 */
  public init(nextToken: String?, reservedInstancesModifications: [ReservedInstancesModification]?) {
self.nextToken = nextToken
self.reservedInstancesModifications = reservedInstancesModifications
  }
}

/**
<p>Contains the parameters for DescribeDhcpOptions.</p>
 */
public struct DescribeDhcpOptionsRequest: RestJsonSerializable {
/**
<p>The IDs of one or more DHCP options sets.</p> <p>Default: Describes all your DHCP options sets.</p>
 */
  public let dhcpOptionsIds: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p> </li> <li> <p> <code>value</code> - The value for one of the options.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if dhcpOptionsIds != nil { body["DhcpOptionsId"] = dhcpOptionsIds! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dhcpOptionsIds: <p>The IDs of one or more DHCP options sets.</p> <p>Default: Describes all your DHCP options sets.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p> </li> <li> <p> <code>value</code> - The value for one of the options.</p> </li> <li> <p> <code>tag</code>:<i>key</i>=<i>value</i> - The key/value combination of a tag assigned to the resource.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. This filter is independent of the <code>tag-value</code> filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the <code>tag</code>:<i>key</i>=<i>value</i> filter.</p> </li> <li> <p> <code>tag-value</code> - The value of a tag assigned to the resource. This filter is independent of the <code>tag-key</code> filter.</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(dhcpOptionsIds: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.dhcpOptionsIds = dhcpOptionsIds
self.filters = filters
self.dryRun = dryRun
  }
}

/**
<p>Describes a launch permission modification.</p>
 */
public struct LaunchPermissionModifications: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The AWS account ID to remove from the list of launch permissions for the AMI.</p>
 */
  public let remove: [LaunchPermission]?
/**
<p>The AWS account ID to add to the list of launch permissions for the AMI.</p>
 */
  public let add: [LaunchPermission]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if remove != nil { body["Remove"] = remove! }
    if add != nil { body["Add"] = add! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> LaunchPermissionModifications {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return LaunchPermissionModifications(
        remove: jsonDict["Remove"].flatMap { ($0 is NSNull) ? nil : [LaunchPermission].deserialize(response: response, body: .json($0)) },
      add: jsonDict["Add"].flatMap { ($0 is NSNull) ? nil : [LaunchPermission].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - remove: <p>The AWS account ID to remove from the list of launch permissions for the AMI.</p>
      - add: <p>The AWS account ID to add to the list of launch permissions for the AMI.</p>
 */
  public init(remove: [LaunchPermission]?, add: [LaunchPermission]?) {
self.remove = remove
self.add = add
  }
}

enum Allocationstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `available` = "available"
  case `underassessment` = "under-assessment"
  case `permanentfailure` = "permanent-failure"
  case `released` = "released"
  case `releasedpermanentfailure` = "released-permanent-failure"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Allocationstate {
    guard case let .json(json) = body else { fatalError() }
    return Allocationstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for ModifyHosts.</p>
 */
public struct ModifyHostsRequest: RestJsonSerializable {
/**
<p>The host IDs of the Dedicated Hosts you want to modify.</p>
 */
  public let hostIds: [String]
/**
<p>Specify whether to enable or disable auto-placement.</p>
 */
  public let autoPlacement: Autoplacement

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["hostId"] = hostIds
    body["autoPlacement"] = autoPlacement
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - hostIds: <p>The host IDs of the Dedicated Hosts you want to modify.</p>
      - autoPlacement: <p>Specify whether to enable or disable auto-placement.</p>
 */
  public init(hostIds: [String], autoPlacement: Autoplacement) {
self.hostIds = hostIds
self.autoPlacement = autoPlacement
  }
}

enum Networkinterfaceattribute: String, RestJsonDeserializable, RestJsonSerializable {
  case `description` = "description"
  case `groupSet` = "groupSet"
  case `sourceDestCheck` = "sourceDestCheck"
  case `attachment` = "attachment"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Networkinterfaceattribute {
    guard case let .json(json) = body else { fatalError() }
    return Networkinterfaceattribute(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for ReleaseAddress.</p>
 */
public struct ReleaseAddressRequest: RestJsonSerializable {
/**
<p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
 */
  public let publicIp: String?
/**
<p>[EC2-VPC] The allocation ID. Required for EC2-VPC.</p>
 */
  public let allocationId: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if publicIp != nil { body["PublicIp"] = publicIp! }
    if allocationId != nil { body["AllocationId"] = allocationId! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - publicIp: <p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
      - allocationId: <p>[EC2-VPC] The allocation ID. Required for EC2-VPC.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(publicIp: String?, allocationId: String?, dryRun: Bool?) {
self.publicIp = publicIp
self.allocationId = allocationId
self.dryRun = dryRun
  }
}

/**
<p>Describes a VPC endpoint.</p>
 */
public struct VpcEndpoint: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The date and time the VPC endpoint was created.</p>
 */
  public let creationTimestamp: Date?
/**
<p>The ID of the VPC to which the endpoint is associated.</p>
 */
  public let vpcId: String?
/**
<p>The state of the VPC endpoint.</p>
 */
  public let state: State?
/**
<p>The name of the AWS service to which the endpoint is associated.</p>
 */
  public let serviceName: String?
/**
<p>The ID of the VPC endpoint.</p>
 */
  public let vpcEndpointId: String?
/**
<p>The policy document associated with the endpoint.</p>
 */
  public let policyDocument: String?
/**
<p>One or more route tables associated with the endpoint.</p>
 */
  public let routeTableIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if creationTimestamp != nil { body["creationTimestamp"] = creationTimestamp! }
    if vpcId != nil { body["vpcId"] = vpcId! }
    if state != nil { body["state"] = state! }
    if serviceName != nil { body["serviceName"] = serviceName! }
    if vpcEndpointId != nil { body["vpcEndpointId"] = vpcEndpointId! }
    if policyDocument != nil { body["policyDocument"] = policyDocument! }
    if routeTableIds != nil { body["routeTableIdSet"] = routeTableIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VpcEndpoint {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VpcEndpoint(
        creationTimestamp: jsonDict["creationTimestamp"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      state: jsonDict["state"].flatMap { ($0 is NSNull) ? nil : State.deserialize(response: response, body: .json($0)) },
      serviceName: jsonDict["serviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      vpcEndpointId: jsonDict["vpcEndpointId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      policyDocument: jsonDict["policyDocument"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      routeTableIds: jsonDict["routeTableIdSet"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - creationTimestamp: <p>The date and time the VPC endpoint was created.</p>
      - vpcId: <p>The ID of the VPC to which the endpoint is associated.</p>
      - state: <p>The state of the VPC endpoint.</p>
      - serviceName: <p>The name of the AWS service to which the endpoint is associated.</p>
      - vpcEndpointId: <p>The ID of the VPC endpoint.</p>
      - policyDocument: <p>The policy document associated with the endpoint.</p>
      - routeTableIds: <p>One or more route tables associated with the endpoint.</p>
 */
  public init(creationTimestamp: Date?, vpcId: String?, state: State?, serviceName: String?, vpcEndpointId: String?, policyDocument: String?, routeTableIds: [String]?) {
self.creationTimestamp = creationTimestamp
self.vpcId = vpcId
self.state = state
self.serviceName = serviceName
self.vpcEndpointId = vpcEndpointId
self.policyDocument = policyDocument
self.routeTableIds = routeTableIds
  }
}

enum Offeringtypevalues: String, RestJsonDeserializable, RestJsonSerializable {
  case `heavyUtilization` = "Heavy Utilization"
  case `mediumUtilization` = "Medium Utilization"
  case `lightUtilization` = "Light Utilization"
  case `noUpfront` = "No Upfront"
  case `partialUpfront` = "Partial Upfront"
  case `allUpfront` = "All Upfront"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Offeringtypevalues {
    guard case let .json(json) = body else { fatalError() }
    return Offeringtypevalues(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the parameters for DeleteDhcpOptions.</p>
 */
public struct DeleteDhcpOptionsRequest: RestJsonSerializable {
/**
<p>The ID of the DHCP options set.</p>
 */
  public let dhcpOptionsId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["DhcpOptionsId"] = dhcpOptionsId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dhcpOptionsId: <p>The ID of the DHCP options set.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(dhcpOptionsId: String, dryRun: Bool?) {
self.dhcpOptionsId = dhcpOptionsId
self.dryRun = dryRun
  }
}


enum Currencycodevalues: String, RestJsonDeserializable, RestJsonSerializable {
  case `uSD` = "USD"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Currencycodevalues {
    guard case let .json(json) = body else { fatalError() }
    return Currencycodevalues(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

public struct DescribeHostReservationsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Details about the reservation's configuration.</p>
 */
  public let hostReservationSet: [HostReservation]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if hostReservationSet != nil { body["hostReservationSet"] = hostReservationSet! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeHostReservationsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeHostReservationsResult(
        hostReservationSet: jsonDict["hostReservationSet"].flatMap { ($0 is NSNull) ? nil : [HostReservation].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - hostReservationSet: <p>Details about the reservation's configuration.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(hostReservationSet: [HostReservation]?, nextToken: String?) {
self.hostReservationSet = hostReservationSet
self.nextToken = nextToken
  }
}

/**
<p>Describes a value for a resource attribute that is a Boolean value.</p>
 */
public struct AttributeBooleanValue: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The attribute value. The valid values are <code>true</code> or <code>false</code>.</p>
 */
  public let value: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if value != nil { body["value"] = value! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AttributeBooleanValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AttributeBooleanValue(
        value: jsonDict["value"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - value: <p>The attribute value. The valid values are <code>true</code> or <code>false</code>.</p>
 */
  public init(value: Bool?) {
self.value = value
  }
}

enum Routeorigin: String, RestJsonDeserializable, RestJsonSerializable {
  case `createRouteTable` = "CreateRouteTable"
  case `createRoute` = "CreateRoute"
  case `enableVgwRoutePropagation` = "EnableVgwRoutePropagation"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Routeorigin {
    guard case let .json(json) = body else { fatalError() }
    return Routeorigin(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}


/**
<p>Contains the parameters for AttachVpnGateway.</p>
 */
public struct AttachVpnGatewayRequest: RestJsonSerializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String
/**
<p>The ID of the virtual private gateway.</p>
 */
  public let vpnGatewayId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["VpcId"] = vpcId
    body["VpnGatewayId"] = vpnGatewayId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - vpnGatewayId: <p>The ID of the virtual private gateway.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(vpcId: String, vpnGatewayId: String, dryRun: Bool?) {
self.vpcId = vpcId
self.vpnGatewayId = vpnGatewayId
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for ModifyNetworkInterfaceAttribute.</p>
 */
public struct ModifyNetworkInterfaceAttributeRequest: RestJsonSerializable {
/**
<p>Indicates whether source/destination checking is enabled. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
 */
  public let sourceDestCheck: AttributeBooleanValue?
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.</p>
 */
  public let attachment: NetworkInterfaceAttachmentChanges?
/**
<p>Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
 */
  public let groups: [String]?
/**
<p>A description for the network interface.</p>
 */
  public let description: AttributeValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if sourceDestCheck != nil { body["sourceDestCheck"] = sourceDestCheck! }
    body["networkInterfaceId"] = networkInterfaceId
    if dryRun != nil { body["dryRun"] = dryRun! }
    if attachment != nil { body["attachment"] = attachment! }
    if groups != nil { body["SecurityGroupId"] = groups! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - sourceDestCheck: <p>Indicates whether source/destination checking is enabled. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - attachment: <p>Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.</p>
      - groups: <p>Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
      - description: <p>A description for the network interface.</p>
 */
  public init(sourceDestCheck: AttributeBooleanValue?, networkInterfaceId: String, dryRun: Bool?, attachment: NetworkInterfaceAttachmentChanges?, groups: [String]?, description: AttributeValue?) {
self.sourceDestCheck = sourceDestCheck
self.networkInterfaceId = networkInterfaceId
self.dryRun = dryRun
self.attachment = attachment
self.groups = groups
self.description = description
  }
}


enum Status: String, RestJsonDeserializable, RestJsonSerializable {
  case `moveInProgress` = "MoveInProgress"
  case `inVpc` = "InVpc"
  case `inClassic` = "InClassic"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Status {
    guard case let .json(json) = body else { fatalError() }
    return Status(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes an attachment change.</p>
 */
public struct NetworkInterfaceAttachmentChanges: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether the network interface is deleted when the instance is terminated.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The ID of the network interface attachment.</p>
 */
  public let attachmentId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if deleteOnTermination != nil { body["deleteOnTermination"] = deleteOnTermination! }
    if attachmentId != nil { body["attachmentId"] = attachmentId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> NetworkInterfaceAttachmentChanges {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return NetworkInterfaceAttachmentChanges(
        deleteOnTermination: jsonDict["deleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      attachmentId: jsonDict["attachmentId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - deleteOnTermination: <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
      - attachmentId: <p>The ID of the network interface attachment.</p>
 */
  public init(deleteOnTermination: Bool?, attachmentId: String?) {
self.deleteOnTermination = deleteOnTermination
self.attachmentId = attachmentId
  }
}

/**
<p>Contains the parameters for CancelExportTask.</p>
 */
public struct CancelExportTaskRequest: RestJsonSerializable {
/**
<p>The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.</p>
 */
  public let exportTaskId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["exportTaskId"] = exportTaskId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - exportTaskId: <p>The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.</p>
 */
  public init(exportTaskId: String) {
self.exportTaskId = exportTaskId
  }
}


/**
<p>Contains the parameters for ResetImageAttribute.</p>
 */
public struct ResetImageAttributeRequest: RestJsonSerializable {
/**
<p>The ID of the AMI.</p>
 */
  public let imageId: String
/**
<p>The attribute to reset (currently you can only reset the launch permission attribute).</p>
 */
  public let attribute: Resetimageattributename
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["ImageId"] = imageId
    body["Attribute"] = attribute
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - imageId: <p>The ID of the AMI.</p>
      - attribute: <p>The attribute to reset (currently you can only reset the launch permission attribute).</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(imageId: String, attribute: Resetimageattributename, dryRun: Bool?) {
self.imageId = imageId
self.attribute = attribute
self.dryRun = dryRun
  }
}


/**
<p>Contains the parameters for AssociateRouteTable.</p>
 */
public struct AssociateRouteTableRequest: RestJsonSerializable {
/**
<p>The ID of the subnet.</p>
 */
  public let subnetId: String
/**
<p>The ID of the route table.</p>
 */
  public let routeTableId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["subnetId"] = subnetId
    body["routeTableId"] = routeTableId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - subnetId: <p>The ID of the subnet.</p>
      - routeTableId: <p>The ID of the route table.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(subnetId: String, routeTableId: String, dryRun: Bool?) {
self.subnetId = subnetId
self.routeTableId = routeTableId
self.dryRun = dryRun
  }
}

/**
<p>Describes a secondary private IP address for a network interface.</p>
 */
public struct PrivateIpAddressSpecification: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Indicates whether the private IP address is the primary private IP address. Only one IP address can be designated as primary.</p>
 */
  public let primary: Bool?
/**
<p>The private IP addresses.</p>
 */
  public let privateIpAddress: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if primary != nil { body["primary"] = primary! }
    body["privateIpAddress"] = privateIpAddress
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> PrivateIpAddressSpecification {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return PrivateIpAddressSpecification(
        primary: jsonDict["primary"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      privateIpAddress: jsonDict["privateIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - primary: <p>Indicates whether the private IP address is the primary private IP address. Only one IP address can be designated as primary.</p>
      - privateIpAddress: <p>The private IP addresses.</p>
 */
  public init(primary: Bool?, privateIpAddress: String) {
self.primary = primary
self.privateIpAddress = privateIpAddress
  }
}

/**
<p>Contains the parameters for ReplaceNetworkAclAssociation.</p>
 */
public struct ReplaceNetworkAclAssociationRequest: RestJsonSerializable {
/**
<p>The ID of the new network ACL to associate with the subnet.</p>
 */
  public let networkAclId: String
/**
<p>The ID of the current association between the original network ACL and the subnet.</p>
 */
  public let associationId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["networkAclId"] = networkAclId
    body["associationId"] = associationId
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - networkAclId: <p>The ID of the new network ACL to associate with the subnet.</p>
      - associationId: <p>The ID of the current association between the original network ACL and the subnet.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(networkAclId: String, associationId: String, dryRun: Bool?) {
self.networkAclId = networkAclId
self.associationId = associationId
self.dryRun = dryRun
  }
}

/**
<p>Describes a linked EC2-Classic instance.</p>
 */
public struct ClassicLinkInstance: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String?
/**
<p>A list of security groups.</p>
 */
  public let groups: [GroupIdentifier]?
/**
<p>Any tags assigned to the instance.</p>
 */
  public let tags: [Tag]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["vpcId"] = vpcId! }
    if instanceId != nil { body["instanceId"] = instanceId! }
    if groups != nil { body["groupSet"] = groups! }
    if tags != nil { body["tagSet"] = tags! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ClassicLinkInstance {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ClassicLinkInstance(
        vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      instanceId: jsonDict["instanceId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      groups: jsonDict["groupSet"].flatMap { ($0 is NSNull) ? nil : [GroupIdentifier].deserialize(response: response, body: .json($0)) },
      tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - instanceId: <p>The ID of the instance.</p>
      - groups: <p>A list of security groups.</p>
      - tags: <p>Any tags assigned to the instance.</p>
 */
  public init(vpcId: String?, instanceId: String?, groups: [GroupIdentifier]?, tags: [Tag]?) {
self.vpcId = vpcId
self.instanceId = instanceId
self.groups = groups
self.tags = tags
  }
}

/**
<p>Contains the parameters for DescribePlacementGroups.</p>
 */
public struct DescribePlacementGroupsRequest: RestJsonSerializable {
/**
<p>One or more placement group names.</p> <p>Default: Describes all your placement groups, or only those otherwise specified.</p>
 */
  public let groupNames: [String]?
/**
<p>One or more filters.</p> <ul> <li> <p> <code>group-name</code> - The name of the placement group.</p> </li> <li> <p> <code>state</code> - The state of the placement group (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>strategy</code> - The strategy of the placement group (<code>cluster</code>).</p> </li> </ul>
 */
  public let filters: [Filter]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if groupNames != nil { body["groupName"] = groupNames! }
    if filters != nil { body["Filter"] = filters! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - groupNames: <p>One or more placement group names.</p> <p>Default: Describes all your placement groups, or only those otherwise specified.</p>
      - filters: <p>One or more filters.</p> <ul> <li> <p> <code>group-name</code> - The name of the placement group.</p> </li> <li> <p> <code>state</code> - The state of the placement group (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>strategy</code> - The strategy of the placement group (<code>cluster</code>).</p> </li> </ul>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(groupNames: [String]?, filters: [Filter]?, dryRun: Bool?) {
self.groupNames = groupNames
self.filters = filters
self.dryRun = dryRun
  }
}

/**
<p>Contains the parameters for CreateImage.</p>
 */
public struct CreateImageRequest: RestJsonSerializable {
/**
<p>By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.</p>
 */
  public let noReboot: Bool?
/**
<p>Information about one or more block device mappings.</p>
 */
  public let blockDeviceMappings: [BlockDeviceMapping]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>A name for the new image.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
 */
  public let name: String
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>A description for the new image.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if noReboot != nil { body["noReboot"] = noReboot! }
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["name"] = name
    body["instanceId"] = instanceId
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - noReboot: <p>By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.</p>
      - blockDeviceMappings: <p>Information about one or more block device mappings.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - name: <p>A name for the new image.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
      - instanceId: <p>The ID of the instance.</p>
      - description: <p>A description for the new image.</p>
 */
  public init(noReboot: Bool?, blockDeviceMappings: [BlockDeviceMapping]?, dryRun: Bool?, name: String, instanceId: String, description: String?) {
self.noReboot = noReboot
self.blockDeviceMappings = blockDeviceMappings
self.dryRun = dryRun
self.name = name
self.instanceId = instanceId
self.description = description
  }
}

public struct ModifyVpcPeeringConnectionOptionsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the VPC peering connection options for the accepter VPC.</p>
 */
  public let accepterPeeringConnectionOptions: PeeringConnectionOptions?
/**
<p>Information about the VPC peering connection options for the requester VPC.</p>
 */
  public let requesterPeeringConnectionOptions: PeeringConnectionOptions?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if accepterPeeringConnectionOptions != nil { body["accepterPeeringConnectionOptions"] = accepterPeeringConnectionOptions! }
    if requesterPeeringConnectionOptions != nil { body["requesterPeeringConnectionOptions"] = requesterPeeringConnectionOptions! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ModifyVpcPeeringConnectionOptionsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ModifyVpcPeeringConnectionOptionsResult(
        accepterPeeringConnectionOptions: jsonDict["accepterPeeringConnectionOptions"].flatMap { ($0 is NSNull) ? nil : PeeringConnectionOptions.deserialize(response: response, body: .json($0)) },
      requesterPeeringConnectionOptions: jsonDict["requesterPeeringConnectionOptions"].flatMap { ($0 is NSNull) ? nil : PeeringConnectionOptions.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - accepterPeeringConnectionOptions: <p>Information about the VPC peering connection options for the accepter VPC.</p>
      - requesterPeeringConnectionOptions: <p>Information about the VPC peering connection options for the requester VPC.</p>
 */
  public init(accepterPeeringConnectionOptions: PeeringConnectionOptions?, requesterPeeringConnectionOptions: PeeringConnectionOptions?) {
self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
  }
}

enum Batchstate: String, RestJsonDeserializable, RestJsonSerializable {
  case `submitted` = "submitted"
  case `active` = "active"
  case `cancelled` = "cancelled"
  case `failed` = "failed"
  case `cancelled_running` = "cancelled_running"
  case `cancelled_terminating` = "cancelled_terminating"
  case `modifying` = "modifying"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Batchstate {
    guard case let .json(json) = body else { fatalError() }
    return Batchstate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Contains the output of DescribeVpcAttribute.</p>
 */
public struct DescribeVpcAttributeResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the VPC.</p>
 */
  public let vpcId: String?
/**
<p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
 */
  public let enableDnsSupport: AttributeBooleanValue?
/**
<p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
 */
  public let enableDnsHostnames: AttributeBooleanValue?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpcId != nil { body["vpcId"] = vpcId! }
    if enableDnsSupport != nil { body["enableDnsSupport"] = enableDnsSupport! }
    if enableDnsHostnames != nil { body["enableDnsHostnames"] = enableDnsHostnames! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeVpcAttributeResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeVpcAttributeResult(
        vpcId: jsonDict["vpcId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      enableDnsSupport: jsonDict["enableDnsSupport"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) },
      enableDnsHostnames: jsonDict["enableDnsHostnames"].flatMap { ($0 is NSNull) ? nil : AttributeBooleanValue.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpcId: <p>The ID of the VPC.</p>
      - enableDnsSupport: <p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
      - enableDnsHostnames: <p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
 */
  public init(vpcId: String?, enableDnsSupport: AttributeBooleanValue?, enableDnsHostnames: AttributeBooleanValue?) {
self.vpcId = vpcId
self.enableDnsSupport = enableDnsSupport
self.enableDnsHostnames = enableDnsHostnames
  }
}




/**
<p>Contains the output of DescribeCustomerGateways.</p>
 */
public struct DescribeCustomerGatewaysResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more customer gateways.</p>
 */
  public let customerGateways: [CustomerGateway]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if customerGateways != nil { body["customerGatewaySet"] = customerGateways! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeCustomerGatewaysResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeCustomerGatewaysResult(
        customerGateways: jsonDict["customerGatewaySet"].flatMap { ($0 is NSNull) ? nil : [CustomerGateway].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - customerGateways: <p>Information about one or more customer gateways.</p>
 */
  public init(customerGateways: [CustomerGateway]?) {
self.customerGateways = customerGateways
  }
}

/**
<p>Contains the parameters for ModifyInstanceAttribute.</p>
 */
public struct ModifyInstanceAttributeRequest: RestJsonSerializable {
/**
<p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is deleted when the instance is terminated.</p> <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Updating the Block Device Mapping when Launching an Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
 */
  public let blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]?
/**
<p>If the value is <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this paramater for Spot Instances.</p>
 */
  public let disableApiTermination: AttributeBooleanValue?
/**
<p>Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
 */
  public let userData: BlobAttributeValue?
/**
<p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance.</p> <p>There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p>
 */
  public let sriovNetSupport: AttributeValue?
/**
<p>Specifies whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
 */
  public let ebsOptimized: AttributeBooleanValue?
/**
<p>Specifies whether source/destination checking is enabled. A value of <code>true</code> means that checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</p>
 */
  public let sourceDestCheck: AttributeBooleanValue?
/**
<p>The name of the attribute.</p>
 */
  public let attribute: Instanceattributename?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>Changes the instance type to the specified value. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>. If the instance type is not valid, the error returned is <code>InvalidInstanceAttributeValue</code>.</p>
 */
  public let instanceType: AttributeValue?
/**
<p>Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
 */
  public let ramdisk: AttributeValue?
/**
<p>A new value for the attribute. Use only with the <code>kernel</code>, <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or <code>instanceInitiatedShutdownBehavior</code> attribute.</p>
 */
  public let value: String?
/**
<p>Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
 */
  public let kernel: AttributeValue?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String
/**
<p>Set to <code>true</code> to enable enhanced networking with ENA for the instance.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p>
 */
  public let enaSupport: AttributeBooleanValue?
/**
<p>Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
 */
  public let instanceInitiatedShutdownBehavior: AttributeValue?
/**
<p>[EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.</p>
 */
  public let groups: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if blockDeviceMappings != nil { body["blockDeviceMapping"] = blockDeviceMappings! }
    if disableApiTermination != nil { body["disableApiTermination"] = disableApiTermination! }
    if userData != nil { body["userData"] = userData! }
    if sriovNetSupport != nil { body["sriovNetSupport"] = sriovNetSupport! }
    if ebsOptimized != nil { body["ebsOptimized"] = ebsOptimized! }
    if sourceDestCheck != nil { body["SourceDestCheck"] = sourceDestCheck! }
    if attribute != nil { body["attribute"] = attribute! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if instanceType != nil { body["instanceType"] = instanceType! }
    if ramdisk != nil { body["ramdisk"] = ramdisk! }
    if value != nil { body["value"] = value! }
    if kernel != nil { body["kernel"] = kernel! }
    body["instanceId"] = instanceId
    if enaSupport != nil { body["enaSupport"] = enaSupport! }
    if instanceInitiatedShutdownBehavior != nil { body["instanceInitiatedShutdownBehavior"] = instanceInitiatedShutdownBehavior! }
    if groups != nil { body["GroupId"] = groups! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - blockDeviceMappings: <p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is deleted when the instance is terminated.</p> <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Updating the Block Device Mapping when Launching an Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      - disableApiTermination: <p>If the value is <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this paramater for Spot Instances.</p>
      - userData: <p>Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
      - sriovNetSupport: <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance.</p> <p>There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p>
      - ebsOptimized: <p>Specifies whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
      - sourceDestCheck: <p>Specifies whether source/destination checking is enabled. A value of <code>true</code> means that checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</p>
      - attribute: <p>The name of the attribute.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceType: <p>Changes the instance type to the specified value. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>. If the instance type is not valid, the error returned is <code>InvalidInstanceAttributeValue</code>.</p>
      - ramdisk: <p>Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
      - value: <p>A new value for the attribute. Use only with the <code>kernel</code>, <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or <code>instanceInitiatedShutdownBehavior</code> attribute.</p>
      - kernel: <p>Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
      - instanceId: <p>The ID of the instance.</p>
      - enaSupport: <p>Set to <code>true</code> to enable enhanced networking with ENA for the instance.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p>
      - instanceInitiatedShutdownBehavior: <p>Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
      - groups: <p>[EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.</p>
 */
  public init(blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]?, disableApiTermination: AttributeBooleanValue?, userData: BlobAttributeValue?, sriovNetSupport: AttributeValue?, ebsOptimized: AttributeBooleanValue?, sourceDestCheck: AttributeBooleanValue?, attribute: Instanceattributename?, dryRun: Bool?, instanceType: AttributeValue?, ramdisk: AttributeValue?, value: String?, kernel: AttributeValue?, instanceId: String, enaSupport: AttributeBooleanValue?, instanceInitiatedShutdownBehavior: AttributeValue?, groups: [String]?) {
self.blockDeviceMappings = blockDeviceMappings
self.disableApiTermination = disableApiTermination
self.userData = userData
self.sriovNetSupport = sriovNetSupport
self.ebsOptimized = ebsOptimized
self.sourceDestCheck = sourceDestCheck
self.attribute = attribute
self.dryRun = dryRun
self.instanceType = instanceType
self.ramdisk = ramdisk
self.value = value
self.kernel = kernel
self.instanceId = instanceId
self.enaSupport = enaSupport
self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
self.groups = groups
  }
}

/**
<p>Describes the recurring schedule for a Scheduled Instance.</p>
 */
public struct ScheduledInstanceRecurrence: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>
 */
  public let frequency: String?
/**
<p>The unit for <code>occurrenceDaySet</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>).</p>
 */
  public let occurrenceUnit: String?
/**
<p>Indicates whether the occurrence is relative to the end of the specified week or month.</p>
 */
  public let occurrenceRelativeToEnd: Bool?
/**
<p>The interval quantity. The interval unit depends on the value of <code>frequency</code>. For example, every 2 weeks or every 2 months.</p>
 */
  public let interval: Int?
/**
<p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).</p>
 */
  public let occurrenceDaySet: [Int]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if frequency != nil { body["frequency"] = frequency! }
    if occurrenceUnit != nil { body["occurrenceUnit"] = occurrenceUnit! }
    if occurrenceRelativeToEnd != nil { body["occurrenceRelativeToEnd"] = occurrenceRelativeToEnd! }
    if interval != nil { body["interval"] = interval! }
    if occurrenceDaySet != nil { body["occurrenceDaySet"] = occurrenceDaySet! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstanceRecurrence {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstanceRecurrence(
        frequency: jsonDict["frequency"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      occurrenceUnit: jsonDict["occurrenceUnit"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      occurrenceRelativeToEnd: jsonDict["occurrenceRelativeToEnd"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      interval: jsonDict["interval"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      occurrenceDaySet: jsonDict["occurrenceDaySet"].flatMap { ($0 is NSNull) ? nil : [Int].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - frequency: <p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>
      - occurrenceUnit: <p>The unit for <code>occurrenceDaySet</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>).</p>
      - occurrenceRelativeToEnd: <p>Indicates whether the occurrence is relative to the end of the specified week or month.</p>
      - interval: <p>The interval quantity. The interval unit depends on the value of <code>frequency</code>. For example, every 2 weeks or every 2 months.</p>
      - occurrenceDaySet: <p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).</p>
 */
  public init(frequency: String?, occurrenceUnit: String?, occurrenceRelativeToEnd: Bool?, interval: Int?, occurrenceDaySet: [Int]?) {
self.frequency = frequency
self.occurrenceUnit = occurrenceUnit
self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
self.interval = interval
self.occurrenceDaySet = occurrenceDaySet
  }
}

/**
<p>Contains the output of CreateVpnGateway.</p>
 */
public struct CreateVpnGatewayResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the virtual private gateway.</p>
 */
  public let vpnGateway: VpnGateway?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if vpnGateway != nil { body["vpnGateway"] = vpnGateway! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVpnGatewayResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVpnGatewayResult(
        vpnGateway: jsonDict["vpnGateway"].flatMap { ($0 is NSNull) ? nil : VpnGateway.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - vpnGateway: <p>Information about the virtual private gateway.</p>
 */
  public init(vpnGateway: VpnGateway?) {
self.vpnGateway = vpnGateway
  }
}

/**
<p>Describes the snapshot created from the imported disk.</p>
 */
public struct SnapshotDetail: RestJsonSerializable, RestJsonDeserializable {
/**
<p>A brief status of the snapshot creation.</p>
 */
  public let status: String?
/**
<p>The percentage of progress for the task.</p>
 */
  public let progress: String?
/**
<p>The URL used to access the disk image.</p>
 */
  public let url: String?
/**
<p>The size of the disk in the snapshot, in GiB.</p>
 */
  public let diskImageSize: Double?
/**
<p>The format of the disk image from which the snapshot is created.</p>
 */
  public let format: String?
/**
<p>The snapshot ID of the disk being imported.</p>
 */
  public let snapshotId: String?
/**
<p>The S3 bucket for the disk image.</p>
 */
  public let userBucket: UserBucketDetails?
/**
<p>A detailed status message for the snapshot creation.</p>
 */
  public let statusMessage: String?
/**
<p>The block device mapping for the snapshot.</p>
 */
  public let deviceName: String?
/**
<p>A description for the snapshot.</p>
 */
  public let description: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if status != nil { body["status"] = status! }
    if progress != nil { body["progress"] = progress! }
    if url != nil { body["url"] = url! }
    if diskImageSize != nil { body["diskImageSize"] = diskImageSize! }
    if format != nil { body["format"] = format! }
    if snapshotId != nil { body["snapshotId"] = snapshotId! }
    if userBucket != nil { body["userBucket"] = userBucket! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if deviceName != nil { body["deviceName"] = deviceName! }
    if description != nil { body["description"] = description! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SnapshotDetail {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SnapshotDetail(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      progress: jsonDict["progress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      url: jsonDict["url"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      diskImageSize: jsonDict["diskImageSize"].flatMap { ($0 is NSNull) ? nil : Double.deserialize(response: response, body: .json($0)) },
      format: jsonDict["format"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      snapshotId: jsonDict["snapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      userBucket: jsonDict["userBucket"].flatMap { ($0 is NSNull) ? nil : UserBucketDetails.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deviceName: jsonDict["deviceName"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      description: jsonDict["description"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>A brief status of the snapshot creation.</p>
      - progress: <p>The percentage of progress for the task.</p>
      - url: <p>The URL used to access the disk image.</p>
      - diskImageSize: <p>The size of the disk in the snapshot, in GiB.</p>
      - format: <p>The format of the disk image from which the snapshot is created.</p>
      - snapshotId: <p>The snapshot ID of the disk being imported.</p>
      - userBucket: <p>The S3 bucket for the disk image.</p>
      - statusMessage: <p>A detailed status message for the snapshot creation.</p>
      - deviceName: <p>The block device mapping for the snapshot.</p>
      - description: <p>A description for the snapshot.</p>
 */
  public init(status: String?, progress: String?, url: String?, diskImageSize: Double?, format: String?, snapshotId: String?, userBucket: UserBucketDetails?, statusMessage: String?, deviceName: String?, description: String?) {
self.status = status
self.progress = progress
self.url = url
self.diskImageSize = diskImageSize
self.format = format
self.snapshotId = snapshotId
self.userBucket = userBucket
self.statusMessage = statusMessage
self.deviceName = deviceName
self.description = description
  }
}

/**
<p>Contains the parameters for DescribeVpcClassicLinkDnsSupport.</p>
 */
public struct DescribeVpcClassicLinkDnsSupportRequest: RestJsonSerializable {
/**
<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
 */
  public let maxResults: Int?
/**
<p>The token for the next set of items to return. (You received this token from a prior call.)</p>
 */
  public let nextToken: String?
/**
<p>One or more VPC IDs.</p>
 */
  public let vpcIds: [String]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if maxResults != nil { body["maxResults"] = maxResults! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if vpcIds != nil { body["VpcIds"] = vpcIds! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - maxResults: <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
      - nextToken: <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
      - vpcIds: <p>One or more VPC IDs.</p>
 */
  public init(maxResults: Int?, nextToken: String?, vpcIds: [String]?) {
self.maxResults = maxResults
self.nextToken = nextToken
self.vpcIds = vpcIds
  }
}

/**
<p>Contains the output of DeleteNatGateway.</p>
 */
public struct DeleteNatGatewayResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the NAT gateway.</p>
 */
  public let natGatewayId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if natGatewayId != nil { body["natGatewayId"] = natGatewayId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DeleteNatGatewayResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DeleteNatGatewayResult(
        natGatewayId: jsonDict["natGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - natGatewayId: <p>The ID of the NAT gateway.</p>
 */
  public init(natGatewayId: String?) {
self.natGatewayId = natGatewayId
  }
}

/**
<p>Contains the parameters for AttachNetworkInterface.</p>
 */
public struct AttachNetworkInterfaceRequest: RestJsonSerializable {
/**
<p>The index of the device for the network interface attachment.</p>
 */
  public let deviceIndex: Int
/**
<p>The ID of the network interface.</p>
 */
  public let networkInterfaceId: String
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The ID of the instance.</p>
 */
  public let instanceId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["deviceIndex"] = deviceIndex
    body["networkInterfaceId"] = networkInterfaceId
    if dryRun != nil { body["dryRun"] = dryRun! }
    body["instanceId"] = instanceId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - deviceIndex: <p>The index of the device for the network interface attachment.</p>
      - networkInterfaceId: <p>The ID of the network interface.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - instanceId: <p>The ID of the instance.</p>
 */
  public init(deviceIndex: Int, networkInterfaceId: String, dryRun: Bool?, instanceId: String) {
self.deviceIndex = deviceIndex
self.networkInterfaceId = networkInterfaceId
self.dryRun = dryRun
self.instanceId = instanceId
  }
}


/**
<p>Describes a security group rule.</p>
 */
public struct IpPermission: RestJsonSerializable, RestJsonDeserializable {
/**
<p>(Valid for <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupEgress</a> and <a>DescribeSecurityGroups</a> only) One or more prefix list IDs for an AWS service. In an <a>AuthorizeSecurityGroupEgress</a> request, this is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.</p>
 */
  public let prefixListIds: [PrefixListId]?
/**
<p>One or more security group and AWS account ID pairs.</p>
 */
  public let userIdGroupPairs: [UserIdGroupPair]?
/**
<p>One or more IP ranges.</p>
 */
  public let ipRanges: [IpRange]?
/**
<p>The start of port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types.</p>
 */
  public let fromPort: Int?
/**
<p>The end of port range for the TCP and UDP protocols, or an ICMP code. A value of <code>-1</code> indicates all ICMP codes for the specified ICMP type.</p>
 */
  public let toPort: Int?
/**
<p>The IP protocol name (for <code>tcp</code>, <code>udp</code>, and <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). </p> <p>[EC2-VPC only] When you authorize or revoke security group rules, you can use <code>-1</code> to specify all.</p>
 */
  public let ipProtocol: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if prefixListIds != nil { body["prefixListIds"] = prefixListIds! }
    if userIdGroupPairs != nil { body["groups"] = userIdGroupPairs! }
    if ipRanges != nil { body["ipRanges"] = ipRanges! }
    if fromPort != nil { body["fromPort"] = fromPort! }
    if toPort != nil { body["toPort"] = toPort! }
    if ipProtocol != nil { body["ipProtocol"] = ipProtocol! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> IpPermission {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return IpPermission(
        prefixListIds: jsonDict["prefixListIds"].flatMap { ($0 is NSNull) ? nil : [PrefixListId].deserialize(response: response, body: .json($0)) },
      userIdGroupPairs: jsonDict["groups"].flatMap { ($0 is NSNull) ? nil : [UserIdGroupPair].deserialize(response: response, body: .json($0)) },
      ipRanges: jsonDict["ipRanges"].flatMap { ($0 is NSNull) ? nil : [IpRange].deserialize(response: response, body: .json($0)) },
      fromPort: jsonDict["fromPort"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      toPort: jsonDict["toPort"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      ipProtocol: jsonDict["ipProtocol"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - prefixListIds: <p>(Valid for <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupEgress</a> and <a>DescribeSecurityGroups</a> only) One or more prefix list IDs for an AWS service. In an <a>AuthorizeSecurityGroupEgress</a> request, this is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.</p>
      - userIdGroupPairs: <p>One or more security group and AWS account ID pairs.</p>
      - ipRanges: <p>One or more IP ranges.</p>
      - fromPort: <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types.</p>
      - toPort: <p>The end of port range for the TCP and UDP protocols, or an ICMP code. A value of <code>-1</code> indicates all ICMP codes for the specified ICMP type.</p>
      - ipProtocol: <p>The IP protocol name (for <code>tcp</code>, <code>udp</code>, and <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). </p> <p>[EC2-VPC only] When you authorize or revoke security group rules, you can use <code>-1</code> to specify all.</p>
 */
  public init(prefixListIds: [PrefixListId]?, userIdGroupPairs: [UserIdGroupPair]?, ipRanges: [IpRange]?, fromPort: Int?, toPort: Int?, ipProtocol: String?) {
self.prefixListIds = prefixListIds
self.userIdGroupPairs = userIdGroupPairs
self.ipRanges = ipRanges
self.fromPort = fromPort
self.toPort = toPort
self.ipProtocol = ipProtocol
  }
}

/**
<p>Describes telemetry for a VPN tunnel.</p>
 */
public struct VgwTelemetry: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The status of the VPN tunnel.</p>
 */
  public let status: Telemetrystatus?
/**
<p>The date and time of the last change in status.</p>
 */
  public let lastStatusChange: Date?
/**
<p>The Internet-routable IP address of the virtual private gateway's outside interface.</p>
 */
  public let outsideIpAddress: String?
/**
<p>If an error occurs, a description of the error.</p>
 */
  public let statusMessage: String?
/**
<p>The number of accepted routes.</p>
 */
  public let acceptedRouteCount: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if status != nil { body["status"] = status! }
    if lastStatusChange != nil { body["lastStatusChange"] = lastStatusChange! }
    if outsideIpAddress != nil { body["outsideIpAddress"] = outsideIpAddress! }
    if statusMessage != nil { body["statusMessage"] = statusMessage! }
    if acceptedRouteCount != nil { body["acceptedRouteCount"] = acceptedRouteCount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> VgwTelemetry {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return VgwTelemetry(
        status: jsonDict["status"].flatMap { ($0 is NSNull) ? nil : Telemetrystatus.deserialize(response: response, body: .json($0)) },
      lastStatusChange: jsonDict["lastStatusChange"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) },
      outsideIpAddress: jsonDict["outsideIpAddress"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      statusMessage: jsonDict["statusMessage"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      acceptedRouteCount: jsonDict["acceptedRouteCount"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - status: <p>The status of the VPN tunnel.</p>
      - lastStatusChange: <p>The date and time of the last change in status.</p>
      - outsideIpAddress: <p>The Internet-routable IP address of the virtual private gateway's outside interface.</p>
      - statusMessage: <p>If an error occurs, a description of the error.</p>
      - acceptedRouteCount: <p>The number of accepted routes.</p>
 */
  public init(status: Telemetrystatus?, lastStatusChange: Date?, outsideIpAddress: String?, statusMessage: String?, acceptedRouteCount: Int?) {
self.status = status
self.lastStatusChange = lastStatusChange
self.outsideIpAddress = outsideIpAddress
self.statusMessage = statusMessage
self.acceptedRouteCount = acceptedRouteCount
  }
}



/**
<p>Contains the output of ReplaceNetworkAclAssociation.</p>
 */
public struct ReplaceNetworkAclAssociationResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the new association.</p>
 */
  public let newAssociationId: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if newAssociationId != nil { body["newAssociationId"] = newAssociationId! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ReplaceNetworkAclAssociationResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ReplaceNetworkAclAssociationResult(
        newAssociationId: jsonDict["newAssociationId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - newAssociationId: <p>The ID of the new association.</p>
 */
  public init(newAssociationId: String?) {
self.newAssociationId = newAssociationId
  }
}



/**
<p>Describes a disk image volume.</p>
 */
public struct DiskImageVolumeDescription: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The size of the volume, in GiB.</p>
 */
  public let size: Int?
/**
<p>The volume identifier.</p>
 */
  public let id: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if size != nil { body["size"] = size! }
    body["id"] = id
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DiskImageVolumeDescription {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DiskImageVolumeDescription(
        size: jsonDict["size"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      id: jsonDict["id"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - size: <p>The size of the volume, in GiB.</p>
      - id: <p>The volume identifier.</p>
 */
  public init(size: Int?, id: String) {
self.size = size
self.id = id
  }
}

enum Volumestate: String, RestJsonDeserializable, RestJsonSerializable {
  case `creating` = "creating"
  case `available` = "available"
  case `inuse` = "in-use"
  case `deleting` = "deleting"
  case `deleted` = "deleted"
  case `error` = "error"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Volumestate {
    guard case let .json(json) = body else { fatalError() }
    return Volumestate(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

/**
<p>Describes a value for a resource attribute that is a String.</p>
 */
public struct AttributeValue: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The attribute value. Note that the value is case-sensitive.</p>
 */
  public let value: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if value != nil { body["value"] = value! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> AttributeValue {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return AttributeValue(
        value: jsonDict["value"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - value: <p>The attribute value. Note that the value is case-sensitive.</p>
 */
  public init(value: String?) {
self.value = value
  }
}


/**
<p>Contains the output for ImportInstance.</p>
 */
public struct ImportInstanceResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about the conversion task.</p>
 */
  public let conversionTask: ConversionTask?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if conversionTask != nil { body["conversionTask"] = conversionTask! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ImportInstanceResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ImportInstanceResult(
        conversionTask: jsonDict["conversionTask"].flatMap { ($0 is NSNull) ? nil : ConversionTask.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - conversionTask: <p>Information about the conversion task.</p>
 */
  public init(conversionTask: ConversionTask?) {
self.conversionTask = conversionTask
  }
}

/**
<p>Contains the parameters of ModifyIdentityIdFormat.</p>
 */
public struct ModifyIdentityIdFormatRequest: RestJsonSerializable {
/**
<p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account.</p>
 */
  public let principalArn: String
/**
<p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
 */
  public let resource: String
/**
<p>Indicates whether the resource should use longer IDs (17-character IDs)</p>
 */
  public let useLongIds: Bool

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["principalArn"] = principalArn
    body["resource"] = resource
    body["useLongIds"] = useLongIds
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - principalArn: <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account.</p>
      - resource: <p>The type of resource: <code>instance</code> | <code>reservation</code> | <code>snapshot</code> | <code>volume</code> </p>
      - useLongIds: <p>Indicates whether the resource should use longer IDs (17-character IDs)</p>
 */
  public init(principalArn: String, resource: String, useLongIds: Bool) {
self.principalArn = principalArn
self.resource = resource
self.useLongIds = useLongIds
  }
}

/**
<p>Contains the parameters for CreateDhcpOptions.</p>
 */
public struct CreateDhcpOptionsRequest: RestJsonSerializable {
/**
<p>A DHCP configuration option.</p>
 */
  public let dhcpConfigurations: [NewDhcpConfiguration]
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["dhcpConfiguration"] = dhcpConfigurations
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - dhcpConfigurations: <p>A DHCP configuration option.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(dhcpConfigurations: [NewDhcpConfiguration], dryRun: Bool?) {
self.dhcpConfigurations = dhcpConfigurations
self.dryRun = dryRun
  }
}

/**
<p>Describes a Spot fleet request.</p>
 */
public struct SpotFleetRequestConfig: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The state of the Spot fleet request.</p>
 */
  public let spotFleetRequestState: Batchstate
/**
<p>The progress of the Spot fleet request. If there is an error, the status is <code>error</code>. After all bids are placed, the status is <code>pending_fulfillment</code>. If the size of the fleet is equal to or greater than its target capacity, the status is <code>fulfilled</code>. If the size of the fleet is decreased, the status is <code>pending_termination</code> while Spot instances are terminating.</p>
 */
  public let activityStatus: Activitystatus?
/**
<p>The creation date and time of the request.</p>
 */
  public let createTime: Date
/**
<p>Information about the configuration of the Spot fleet request.</p>
 */
  public let spotFleetRequestConfig: SpotFleetRequestConfigData
/**
<p>The ID of the Spot fleet request.</p>
 */
  public let spotFleetRequestId: String

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["spotFleetRequestState"] = spotFleetRequestState
    if activityStatus != nil { body["activityStatus"] = activityStatus! }
    body["createTime"] = createTime
    body["spotFleetRequestConfig"] = spotFleetRequestConfig
    body["spotFleetRequestId"] = spotFleetRequestId
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> SpotFleetRequestConfig {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return SpotFleetRequestConfig(
        spotFleetRequestState: jsonDict["spotFleetRequestState"].flatMap { ($0 is NSNull) ? nil : Batchstate.deserialize(response: response, body: .json($0)) }!,
      activityStatus: jsonDict["activityStatus"].flatMap { ($0 is NSNull) ? nil : Activitystatus.deserialize(response: response, body: .json($0)) },
      createTime: jsonDict["createTime"].flatMap { ($0 is NSNull) ? nil : Date.deserialize(response: response, body: .json($0)) }!,
      spotFleetRequestConfig: jsonDict["spotFleetRequestConfig"].flatMap { ($0 is NSNull) ? nil : SpotFleetRequestConfigData.deserialize(response: response, body: .json($0)) }!,
      spotFleetRequestId: jsonDict["spotFleetRequestId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }!
    )
  }

/**
    - parameters:
      - spotFleetRequestState: <p>The state of the Spot fleet request.</p>
      - activityStatus: <p>The progress of the Spot fleet request. If there is an error, the status is <code>error</code>. After all bids are placed, the status is <code>pending_fulfillment</code>. If the size of the fleet is equal to or greater than its target capacity, the status is <code>fulfilled</code>. If the size of the fleet is decreased, the status is <code>pending_termination</code> while Spot instances are terminating.</p>
      - createTime: <p>The creation date and time of the request.</p>
      - spotFleetRequestConfig: <p>Information about the configuration of the Spot fleet request.</p>
      - spotFleetRequestId: <p>The ID of the Spot fleet request.</p>
 */
  public init(spotFleetRequestState: Batchstate, activityStatus: Activitystatus?, createTime: Date, spotFleetRequestConfig: SpotFleetRequestConfigData, spotFleetRequestId: String) {
self.spotFleetRequestState = spotFleetRequestState
self.activityStatus = activityStatus
self.createTime = createTime
self.spotFleetRequestConfig = spotFleetRequestConfig
self.spotFleetRequestId = spotFleetRequestId
  }
}

/**
<p>Contains the output of ModifyHosts.</p>
 */
public struct ModifyHostsResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The IDs of the Dedicated Hosts that were successfully modified.</p>
 */
  public let successful: [String]?
/**
<p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
 */
  public let unsuccessful: [UnsuccessfulItem]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if successful != nil { body["successful"] = successful! }
    if unsuccessful != nil { body["unsuccessful"] = unsuccessful! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ModifyHostsResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ModifyHostsResult(
        successful: jsonDict["successful"].flatMap { ($0 is NSNull) ? nil : [String].deserialize(response: response, body: .json($0)) },
      unsuccessful: jsonDict["unsuccessful"].flatMap { ($0 is NSNull) ? nil : [UnsuccessfulItem].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - successful: <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
      - unsuccessful: <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
 */
  public init(successful: [String]?, unsuccessful: [UnsuccessfulItem]?) {
self.successful = successful
self.unsuccessful = unsuccessful
  }
}

/**
<p>Contains the parameters for DisassociateAddress.</p>
 */
public struct DisassociateAddressRequest: RestJsonSerializable {
/**
<p>[EC2-VPC] The association ID. Required for EC2-VPC.</p>
 */
  public let associationId: String?
/**
<p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
 */
  public let publicIp: String?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if associationId != nil { body["AssociationId"] = associationId! }
    if publicIp != nil { body["PublicIp"] = publicIp! }
    if dryRun != nil { body["dryRun"] = dryRun! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - associationId: <p>[EC2-VPC] The association ID. Required for EC2-VPC.</p>
      - publicIp: <p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public init(associationId: String?, publicIp: String?, dryRun: Bool?) {
self.associationId = associationId
self.publicIp = publicIp
self.dryRun = dryRun
  }
}

/**
<p>Describes modifications to the permissions for a volume.</p>
 */
public struct CreateVolumePermissionModifications: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Removes a specific AWS account ID or group from a volume's list of create volume permissions.</p>
 */
  public let remove: [CreateVolumePermission]?
/**
<p>Adds a specific AWS account ID or group to a volume's list of create volume permissions.</p>
 */
  public let add: [CreateVolumePermission]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if remove != nil { body["Remove"] = remove! }
    if add != nil { body["Add"] = add! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> CreateVolumePermissionModifications {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return CreateVolumePermissionModifications(
        remove: jsonDict["Remove"].flatMap { ($0 is NSNull) ? nil : [CreateVolumePermission].deserialize(response: response, body: .json($0)) },
      add: jsonDict["Add"].flatMap { ($0 is NSNull) ? nil : [CreateVolumePermission].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - remove: <p>Removes a specific AWS account ID or group from a volume's list of create volume permissions.</p>
      - add: <p>Adds a specific AWS account ID or group to a volume's list of create volume permissions.</p>
 */
  public init(remove: [CreateVolumePermission]?, add: [CreateVolumePermission]?) {
self.remove = remove
self.add = add
  }
}

/**
<p>Contains the parameters for DescribeSpotFleetRequests.</p>
 */
public struct DescribeSpotFleetRequestsRequest: RestJsonSerializable {
/**
<p>The IDs of the Spot fleet requests.</p>
 */
  public let spotFleetRequestIds: [String]?
/**
<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
 */
  public let dryRun: Bool?
/**
<p>The token for the next set of results.</p>
 */
  public let nextToken: String?
/**
<p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public let maxResults: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if spotFleetRequestIds != nil { body["spotFleetRequestId"] = spotFleetRequestIds! }
    if dryRun != nil { body["dryRun"] = dryRun! }
    if nextToken != nil { body["nextToken"] = nextToken! }
    if maxResults != nil { body["maxResults"] = maxResults! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - spotFleetRequestIds: <p>The IDs of the Spot fleet requests.</p>
      - dryRun: <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
      - nextToken: <p>The token for the next set of results.</p>
      - maxResults: <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
 */
  public init(spotFleetRequestIds: [String]?, dryRun: Bool?, nextToken: String?, maxResults: Int?) {
self.spotFleetRequestIds = spotFleetRequestIds
self.dryRun = dryRun
self.nextToken = nextToken
self.maxResults = maxResults
  }
}

/**
<p>Describes an EBS volume for a Scheduled Instance.</p>
 */
public struct ScheduledInstancesEbs: RestJsonSerializable, RestJsonDeserializable {
/**
<p>The ID of the snapshot.</p>
 */
  public let snapshotId: String?
/**
<p>Indicates whether the volume is deleted on instance termination.</p>
 */
  public let deleteOnTermination: Bool?
/**
<p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p> <p>Default: <code>standard</code> </p>
 */
  public let volumeType: String?
/**
<p>The size of the volume, in GiB.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
 */
  public let volumeSize: Int?
/**
<p>The number of I/O operations per second (IOPS) that the volume supports. For io1 volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about <code>gp2</code> baseline performance, I/O credits, and bursting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for <code>io1</code> volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code>volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
 */
  public let iops: Int?
/**
<p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
 */
  public let encrypted: Bool?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if snapshotId != nil { body["SnapshotId"] = snapshotId! }
    if deleteOnTermination != nil { body["DeleteOnTermination"] = deleteOnTermination! }
    if volumeType != nil { body["VolumeType"] = volumeType! }
    if volumeSize != nil { body["VolumeSize"] = volumeSize! }
    if iops != nil { body["Iops"] = iops! }
    if encrypted != nil { body["Encrypted"] = encrypted! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> ScheduledInstancesEbs {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return ScheduledInstancesEbs(
        snapshotId: jsonDict["SnapshotId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      deleteOnTermination: jsonDict["DeleteOnTermination"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) },
      volumeType: jsonDict["VolumeType"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      volumeSize: jsonDict["VolumeSize"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      iops: jsonDict["Iops"].flatMap { ($0 is NSNull) ? nil : Int.deserialize(response: response, body: .json($0)) },
      encrypted: jsonDict["Encrypted"].flatMap { ($0 is NSNull) ? nil : Bool.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - snapshotId: <p>The ID of the snapshot.</p>
      - deleteOnTermination: <p>Indicates whether the volume is deleted on instance termination.</p>
      - volumeType: <p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p> <p>Default: <code>standard</code> </p>
      - volumeSize: <p>The size of the volume, in GiB.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
      - iops: <p>The number of I/O operations per second (IOPS) that the volume supports. For io1 volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about <code>gp2</code> baseline performance, I/O credits, and bursting, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for <code>io1</code> volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code>volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
      - encrypted: <p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
 */
  public init(snapshotId: String?, deleteOnTermination: Bool?, volumeType: String?, volumeSize: Int?, iops: Int?, encrypted: Bool?) {
self.snapshotId = snapshotId
self.deleteOnTermination = deleteOnTermination
self.volumeType = volumeType
self.volumeSize = volumeSize
self.iops = iops
self.encrypted = encrypted
  }
}

/**
<p>Describes an Internet gateway.</p>
 */
public struct InternetGateway: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Any tags assigned to the Internet gateway.</p>
 */
  public let tags: [Tag]?
/**
<p>The ID of the Internet gateway.</p>
 */
  public let internetGatewayId: String?
/**
<p>Any VPCs attached to the Internet gateway.</p>
 */
  public let attachments: [InternetGatewayAttachment]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if tags != nil { body["tagSet"] = tags! }
    if internetGatewayId != nil { body["internetGatewayId"] = internetGatewayId! }
    if attachments != nil { body["attachmentSet"] = attachments! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> InternetGateway {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return InternetGateway(
        tags: jsonDict["tagSet"].flatMap { ($0 is NSNull) ? nil : [Tag].deserialize(response: response, body: .json($0)) },
      internetGatewayId: jsonDict["internetGatewayId"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) },
      attachments: jsonDict["attachmentSet"].flatMap { ($0 is NSNull) ? nil : [InternetGatewayAttachment].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - tags: <p>Any tags assigned to the Internet gateway.</p>
      - internetGatewayId: <p>The ID of the Internet gateway.</p>
      - attachments: <p>Any VPCs attached to the Internet gateway.</p>
 */
  public init(tags: [Tag]?, internetGatewayId: String?, attachments: [InternetGatewayAttachment]?) {
self.tags = tags
self.internetGatewayId = internetGatewayId
self.attachments = attachments
  }
}

/**
<p>Contains the output of UnmonitorInstances.</p>
 */
public struct UnmonitorInstancesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Monitoring information for one or more instances.</p>
 */
  public let instanceMonitorings: [InstanceMonitoring]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceMonitorings != nil { body["instancesSet"] = instanceMonitorings! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> UnmonitorInstancesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return UnmonitorInstancesResult(
        instanceMonitorings: jsonDict["instancesSet"].flatMap { ($0 is NSNull) ? nil : [InstanceMonitoring].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceMonitorings: <p>Monitoring information for one or more instances.</p>
 */
  public init(instanceMonitorings: [InstanceMonitoring]?) {
self.instanceMonitorings = instanceMonitorings
  }
}

/**
<p>Contains the output of DescribeNetworkInterfaces.</p>
 */
public struct DescribeNetworkInterfacesResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>Information about one or more network interfaces.</p>
 */
  public let networkInterfaces: [NetworkInterface]?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if networkInterfaces != nil { body["networkInterfaceSet"] = networkInterfaces! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeNetworkInterfacesResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeNetworkInterfacesResult(
        networkInterfaces: jsonDict["networkInterfaceSet"].flatMap { ($0 is NSNull) ? nil : [NetworkInterface].deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - networkInterfaces: <p>Information about one or more network interfaces.</p>
 */
  public init(networkInterfaces: [NetworkInterface]?) {
self.networkInterfaces = networkInterfaces
  }
}

/**
<p>Details about the target configuration.</p>
 */
public struct TargetConfigurationRequest: RestJsonSerializable {
/**
<p>The Convertible Reserved Instance offering ID. If this isn't included in the request, the response lists your current Convertible Reserved Instance/s and their value/s.</p>
 */
  public let offeringId: String
/**
<p>The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request</p>
 */
  public let instanceCount: Int?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    body["OfferingId"] = offeringId
    if instanceCount != nil { body["InstanceCount"] = instanceCount! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }


/**
    - parameters:
      - offeringId: <p>The Convertible Reserved Instance offering ID. If this isn't included in the request, the response lists your current Convertible Reserved Instance/s and their value/s.</p>
      - instanceCount: <p>The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request</p>
 */
  public init(offeringId: String, instanceCount: Int?) {
self.offeringId = offeringId
self.instanceCount = instanceCount
  }
}

/**
<p>Contains the output of DescribeInstanceStatus.</p>
 */
public struct DescribeInstanceStatusResult: RestJsonSerializable, RestJsonDeserializable {
/**
<p>One or more instance status descriptions.</p>
 */
  public let instanceStatuses: [InstanceStatus]?
/**
<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public let nextToken: String?

  func serialize() -> SerializedForm {
    let uri: [String: String] = [:]
    let querystring: [String: String] = [:]
    let header: [String: String] = [:]
    var body: [String: Any] = [:]
  
    if instanceStatuses != nil { body["instanceStatusSet"] = instanceStatuses! }
    if nextToken != nil { body["nextToken"] = nextToken! }
  
    return SerializedForm(uri: uri, queryString: querystring, header: header, body: .json(body))
  }

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> DescribeInstanceStatusResult {
    guard case let .json(json) = body else { fatalError() }
  let jsonDict = json as! [String: Any]
    return DescribeInstanceStatusResult(
        instanceStatuses: jsonDict["instanceStatusSet"].flatMap { ($0 is NSNull) ? nil : [InstanceStatus].deserialize(response: response, body: .json($0)) },
      nextToken: jsonDict["nextToken"].flatMap { ($0 is NSNull) ? nil : String.deserialize(response: response, body: .json($0)) }
    )
  }

/**
    - parameters:
      - instanceStatuses: <p>One or more instance status descriptions.</p>
      - nextToken: <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
 */
  public init(instanceStatuses: [InstanceStatus]?, nextToken: String?) {
self.instanceStatuses = instanceStatuses
self.nextToken = nextToken
  }
}

enum Networkinterfacestatus: String, RestJsonDeserializable, RestJsonSerializable {
  case `available` = "available"
  case `attaching` = "attaching"
  case `inuse` = "in-use"
  case `detaching` = "detaching"

  static func deserialize(response: HTTPURLResponse, body: DeserializableBody) -> Networkinterfacestatus {
    guard case let .json(json) = body else { fatalError() }
    return Networkinterfacestatus(rawValue: json as! String)!
  }

  func serialize() -> SerializedForm {
    return SerializedForm(uri: [:], queryString: [:], header: [:], body: .raw(rawValue.data(using: .utf8)!))
  }
}

}

import Foundation
import Signer

struct {{name}} {
    struct Client {
        let region: String
        let credentialsProvider: AwsCredentialsProvider
        let session: URLSession
        let queue: DispatchQueue

        init(region: String) {
            self.region = region
            self.credentialsProvider = DefaultChainProvider()
            self.session = URLSession(configuration: URLSessionConfiguration.default)
            self.queue = DispatchQueue(label: "awswift.Lambda.Client.queue")
        }

        func scope() -> AwsCredentialsScope {
           return AwsCredentialsScope(url: baseURL())!
        }

        func credentials() -> AwsCredentials {
            return credentialsProvider.provideAwsCredentials()!
        }

        func baseURL() -> URL {
            return URL(string: "https://{{awsDomain}}/")!
        }

        func awsApiCallTask<O: AwswiftDeserializable>(request: RestJsonRequest, completionHandler: @escaping (_: O?, _: Error?) -> ()) -> URLSessionTask {
            let unsignedRequest = RestJsonRequestSerializer(input: request, baseURL: baseURL())
            let httpRequest = dateAndSignRequest(request: unsignedRequest, credentials: credentials(), scope: scope())
            
            return session.dataTask(with: httpRequest, completionHandler: { (data, response, error) in
                self.queue.async {
                    let http = response as! HTTPURLResponse
                    if error != nil {
                        completionHandler(nil, error)
                    } else if request.expectedStatus == nil || http.statusCode == request.expectedStatus {
                        let json = try! JSONSerialization.jsonObject(with: data!, options: [])
                        let ret = O.deserialize(response: http, body: json)
                        completionHandler(ret, nil)
                    } else {
                        completionHandler(nil, UnexpectedStatusResponse(response: http, data: data))
                    }
                }
            })
        }

        {{#operations}}
        func {{name}}(input: {{input.name}}, completionHandler: @escaping (_: {{output.name}}?, _: Error?) -> ()) -> URLSessionTask {
            let serial = input.restJsonSerialize()
            guard case let .object(fields) = serial else { fatalError() }

            let request = RestJsonRequest(
                method: "{{method}}",
                relativeUrl: "{{uri}}",
                expectedStatus: {{respCode}},
                fields: fields
            )
            
            return awsApiCallTask(request: request, completionHandler: completionHandler)
        }
        {{/operations}}
    }

    {{#structures}}
    struct {{name}}: RestJsonSerializable, AwswiftDeserializable {
        {{#members}}public let {{identifier(name)}}: {{shape.memberType}}{{^required}}?{{/}}
        {{/members}}

        init(
            {{#each(members)}}{{identifier(name)}}: {{shape.memberType}}{{^required}}?{{/}}{{^ @last }},{{/}}
            {{/}}
        ) {
            {{#members}}self.{{identifier(name)}} = {{identifier(name)}}
            {{/}}
        }

        func restJsonSerialize() -> RestJsonFieldValue {
            let fields = [
            {{#each(members)}}
                RestJsonField(name: "{{locationName}}", location: .{{location}}, value: {{identifier(name)}}{{^required}}?{{/}}.restJsonSerialize()){{^ @last }},{{/}}
            {{/}}
            ]
            return .object(fields)
        }

        {{#isRequest}}
        static func deserialize(response: HTTPURLResponse, body: Any?) -> {{name}} {
            fatalError()
        }
        {{/}}
        {{^isRequest}}
        static func deserialize(response: HTTPURLResponse, body: Any?) -> {{name}} {
            guard let body = body as? [String: Any] else { fatalError() }
            
            {{#bodyMembers}}
            let {{identifier(name)}} = body["{{locationName}}"].flatMapNoNulls { v in
                return {{shape.memberType}}.deserialize(response: response, body: v)
            }
            {{/}}
            {{#headerMembers}}
            let {{identifier(name)}} = response.allHeaderFields["{{locationName}}"] as{{#required}}!{{/}}{{^required}}?{{/}} {{shape.memberType}}
            {{/}}
            {{#statusCodeMembers}}
            let {{identifier(name)}} = response.statusCode            
            {{/}}

            return {{name}}(
                {{#each(members)}}
                {{identifier(name)}}: {{identifier(name)}}{{^ @last }},{{/}}
                {{/}}
            )
        }
        {{/isRequest}}
    }
    {{/structures}}

    {{#enums}}
    enum {{name}}: String, RestJsonSerializable, AwswiftDeserializable {
        {{#cases}}case {{identifier(.)}} = "{{.}}"
        {{/}}

        static func deserialize(response: HTTPURLResponse, body: Any?) -> {{name}} {
            guard let body = body as? String else { fatalError() }
            if let e = {{name}}(rawValue: body) {
                return e
            } else {
                fatalError()
            }
        }

        func restJsonSerialize() -> RestJsonFieldValue {
            return .string(rawValue)
        }
    }
    {{/enums}}
}
